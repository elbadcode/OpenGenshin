// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:33 2019

cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 g_mViewProjPrev : packoffset(c0);
  float4 PS_NearFarClipDist : packoffset(c4);
}

cbuffer CBPerViewGlobal : register(b13)
{
  row_major float4x4 CV_ViewProjZeroMatr : packoffset(c0);
  float4 CV_AnimGenParams : packoffset(c4);
  row_major float4x4 CV_ViewProjMatr : packoffset(c5);
  row_major float4x4 CV_ViewProjNearestMatr : packoffset(c9);
  row_major float4x4 CV_InvViewProj : packoffset(c13);
  row_major float4x4 CV_PrevViewProjMatr : packoffset(c17);
  row_major float4x4 CV_PrevViewProjNearestMatr : packoffset(c21);
  row_major float3x4 CV_ScreenToWorldBasis : packoffset(c25);
  float4 CV_TessInfo : packoffset(c28);
  float4 CV_CameraFrontVector : packoffset(c29);
  float4 CV_CameraUpVector : packoffset(c30);
  float4 CV_ScreenSize : packoffset(c31);
  float4 CV_HPosScale : packoffset(c32);
  float4 CV_ProjRatio : packoffset(c33);
  float4 CV_NearestScaled : packoffset(c34);
  float4 CV_NearFarClipDist : packoffset(c35);
  float4 CV_SunLightDir : packoffset(c36);
  float4 CV_SunColor : packoffset(c37);
  float4 CV_SkyColor : packoffset(c38);
  float4 CV_FogColor : packoffset(c39);
  float4 CV_TerrainInfo : packoffset(c40);
  float4 CV_DecalZFightingRemedy : packoffset(c41);
  row_major float4x4 CV_FrustumPlaneEquation : packoffset(c42);
  float4 CV_WindGridOffset : packoffset(c46);
  row_major float4x4 CV_ViewMatr : packoffset(c47);
  row_major float4x4 CV_InvViewMatr : packoffset(c51);
  float CV_LookingGlass_SunSelector : packoffset(c55);
  float CV_LookingGlass_DepthScalar : packoffset(c55.y);
  float CV_PADDING0 : packoffset(c55.z);
  float CV_PADDING1 : packoffset(c55.w);
}

SamplerState _tex0_s_s : register(s0);
SamplerState _tex1_s_s : register(s1);
SamplerState _tex2_s_s : register(s2);
SamplerState _tex3_s_s : register(s3);
SamplerState _tex4_s_s : register(s4);
SamplerState _tex5_s_s : register(s5);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex2 : register(t2);
Texture2D<float4> _tex3 : register(t3);
Texture2D<float4> _tex4 : register(t4);
Texture2D<float4> _tex5 : register(t5);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = CV_ScreenSize.zw + v1.xy;
  r1.xyz = _tex1.Sample(_tex1_s_s, r0.xy).xyz;
  r0.x = _tex2.Sample(_tex2_s_s, r0.xy).x;
  r0.yzw = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r1.z = _tex0.Sample(_tex0_s_s, v1.xy).x;
  r2.xy = trunc(v0.xy);
  r1.xy = r2.xy * r1.zz;
  r2.x = dot(CV_ScreenToWorldBasis._m00_m01_m02, r1.xyz);
  r2.y = dot(CV_ScreenToWorldBasis._m10_m11_m12, r1.xyz);
  r2.z = dot(CV_ScreenToWorldBasis._m20_m21_m22, r1.xyz);
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r2.xyz * r2.www;
  r2.w = 1.5 * r1.z;
  r2.w = CV_NearFarClipDist.y * r2.w;
  r3.w = dot(r3.xyz, r0.yzw);
  r3.w = r3.w + r3.w;
  r0.yzw = r0.yzw * -r3.www + r3.xyz;
  r3.w = dot(r0.yzw, r0.yzw);
  r3.w = rsqrt(r3.w);
  r0.yzw = r3.www * r0.yzw;
  r4.xyz = r0.yzw * r2.www;
  r3.x = dot(r3.xyz, r4.xyz);
  r3.x = saturate(0.5 + r3.x);
  r3.y = cmp(r3.x < 0.00999999978);
  r3.z = cmp(r1.z == 1.000000);
  r3.y = (int)r3.z | (int)r3.y;
  if (r3.y != 0) {
    o0.xyzw = float4(0,0,0,0);
    return;
  }
  r5.x = CV_ScreenToWorldBasis._m03 + r2.x;
  r5.y = CV_ScreenToWorldBasis._m13 + r2.y;
  r5.z = CV_ScreenToWorldBasis._m23 + r2.z;
  r5.w = 1;
  r2.x = dot(CV_ViewProjMatr._m00_m01_m02_m03, r5.xyzw);
  r2.y = dot(CV_ViewProjMatr._m10_m11_m12_m13, r5.xyzw);
  r1.w = dot(CV_ViewProjMatr._m30_m31_m32_m33, r5.xyzw);
  r2.z = 0.5 * r1.w;
  r2.xy = r2.xy * float2(0.5,-0.5) + r2.zz;
  r1.xy = CV_HPosScale.xy * r2.xy;
  r6.xyz = r0.yzw * r2.www + r5.xyz;
  r6.w = 1;
  r2.x = dot(CV_ViewProjMatr._m00_m01_m02_m03, r6.xyzw);
  r2.y = dot(CV_ViewProjMatr._m10_m11_m12_m13, r6.xyzw);
  r0.y = dot(CV_ViewProjMatr._m20_m21_m22_m23, r6.xyzw);
  r6.w = dot(CV_ViewProjMatr._m30_m31_m32_m33, r6.xyzw);
  r0.y = r0.y / r6.w;
  r0.y = -CV_ProjRatio.x + r0.y;
  r6.z = CV_ProjRatio.y / r0.y;
  r0.y = 0.5 * r6.w;
  r0.yz = r2.xy * float2(0.5,-0.5) + r0.yy;
  r6.xy = CV_HPosScale.xy * r0.yz;
  r6.xyzw = r6.xyzw + -r1.xyzw;
  r0.x = r0.x * 28 + 4;
  r0.y = (int)r0.x;
  r0.x = trunc(r0.x);
  r0.z = 1 / r0.x;
  r0.x = 1.60000002 * r0.x;
  r0.x = r2.w / r0.x;
  r0.x = r0.x / CV_NearFarClipDist.y;
  r2.y = 0;
  r2.w = r0.z;
  r2.z = 0;
  r0.w = 0;
  while (true) {
    r3.y = cmp((int)r0.w >= (int)r0.y);
    if (r3.y != 0) break;
    r7.xyzw = r6.xyzw * r2.wwww + r1.xyzw;
    r3.yz = r7.xy / r7.ww;
    r3.y = _tex3.SampleLevel(_tex3_s_s, r3.yz, 0).x;
    r3.y = r3.y + -r7.z;
    r3.y = cmp(abs(r3.y) < r0.x);
    if (r3.y != 0) {
      r2.z = r2.w;
      break;
    }
    r2.x = r2.w + r0.z;
    r0.w = (int)r0.w + 1;
    r2.zw = r2.yx;
  }
  r0.x = cmp(0 < r2.z);
  if (r0.x != 0) {
    r0.x = 0.0700000003 * CV_HPosScale.x;
    r0.yzw = r4.xyz * r2.zzz + r5.xyz;
    r1.xyz = g_mViewProjPrev._m10_m11_m13 * r0.zzz;
    r1.xyz = r0.yyy * g_mViewProjPrev._m00_m01_m03 + r1.xyz;
    r0.yzw = r0.www * g_mViewProjPrev._m20_m21_m23 + r1.xyz;
    r0.yzw = g_mViewProjPrev._m30_m31_m33 + r0.yzw;
    r0.yz = saturate(r0.yz / r0.ww);
    r0.w = min(r0.y, r0.z);
    r1.x = max(r0.y, r0.z);
    r1.x = 1 + -r1.x;
    r0.w = min(r1.x, r0.w);
    r1.x = cmp(r0.x < r0.w);
    r0.x = r0.w / r0.x;
    r0.x = sqrt(r0.x);
    r0.x = r1.x ? 1 : r0.x;
    r0.yz = CV_HPosScale.zw * r0.yz;
    r0.w = _tex5.SampleLevel(_tex5_s_s, v1.xy, 0).x;
    r0.w = 100 * r0.w;
    r0.yz = max(float2(0,0), r0.yz);
    r0.yz = min(CV_HPosScale.xy, r0.yz);
    r1.xyz = _tex4.SampleLevel(_tex4_s_s, r0.yz, 0).xyz;
    r0.yzw = min(r1.xyz, r0.www);
    r1.xyz = (int3)r0.yzw & int3(0x7f800000,0x7f800000,0x7f800000);
    r1.xyz = cmp((int3)r1.xyz != int3(0x7f800000,0x7f800000,0x7f800000));
    o0.xyz = r1.xyz ? r0.yzw : 0;
    o0.w = r0.x * r3.x;
  } else {
    o0.xyzw = float4(0,0,0,0);
  }
  return;
}