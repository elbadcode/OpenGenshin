// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:40 2019

cbuffer cb4 : register(b4)
{
  float4 cb4[11] : packoffset(c0);
}

cbuffer vc0 : register(b0)
{
  float4 IR_Light_Pos : packoffset(c0);
  float4 IR_Light_Dir : packoffset(c1);
  float4 Link_categories : packoffset(c2);
  float4 IR_light_back_color : packoffset(c3);
  float4 IR_Light_Color : packoffset(c4);
  float4 IR_Light_Info : packoffset(c5);
  float4 IR_Spot_Info : packoffset(c6);
}

SamplerState IR_GBuffer_LightingSampler_s_s : register(s12);
SamplerState IR_GBuffer_NormalsSampler_s_s : register(s13);
SamplerState IR_GBuffer_DepthSampler_s_s : register(s14);
Texture2D<float4> IR_GBuffer_LightingSampler : register(t12);
Texture2D<float4> IR_GBuffer_NormalsSampler : register(t13);
Texture2D<float4> IR_GBuffer_DepthSampler : register(t14);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = IR_GBuffer_DepthSampler.Sample(IR_GBuffer_DepthSampler_s_s, v1.xy).xyzw;
  r0.x = cb4[10].z * r0.x + cb4[10].w;
  r0.x = 1 / r0.x;
  r0.yzw = v2.xyz * r0.xxx;
  r1.xyz = -v2.xyz * r0.xxx + IR_Light_Pos.xyz;
  r0.x = dot(r0.yzw, r0.yzw);
  r0.x = rsqrt(r0.x);
  r0.xyz = r0.yzw * r0.xxx;
  r2.xyzw = IR_GBuffer_NormalsSampler.Sample(IR_GBuffer_NormalsSampler_s_s, v1.xy).xyzw;
  r2.xy = r2.xy * float2(2,2) + float2(-1,-1);
  r0.w = dot(r2.xy, r2.xy);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r2.z = sqrt(r0.w);
  r0.w = r2.z + r2.z;
  r2.xyz = r0.www * r2.xyz;
  r2.w = -r2.z;
  r2.xyz = float3(0,0,1) + r2.xyw;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r1.xyz = r1.xyz / r0.www;
  r0.w = -IR_Light_Info.y + r0.w;
  r1.w = dot(r2.xyz, r1.xyz);
  r2.w = r1.w + r1.w;
  r2.xyz = r2.www * r2.xyz + -r1.xyz;
  r1.x = dot(-r1.xyz, IR_Light_Dir.xyz);
  r1.x = -IR_Spot_Info.y + r1.x;
  r1.x = saturate(IR_Spot_Info.z * r1.x);
  r0.x = saturate(dot(r2.xyz, -r0.xyz));
  r0.x = log2(r0.x);
  r2.xyzw = IR_GBuffer_LightingSampler.Sample(IR_GBuffer_LightingSampler_s_s, v1.xy).xyzw;
  r0.y = 512 * r2.x;
  r0.y = 9.99999975e-05 + abs(r0.y);
  r0.x = r0.y * r0.x;
  r0.x = exp2(r0.x);
  r0.y = dot(IR_Light_Color.xyz, float3(0.300000012,0.589999974,0.109999999));
  r0.x = r0.x * r0.y;
  r0.y = saturate(r1.w);
  r1.yz = r1.ww * float2(-0.5,0.5) + float2(0.5,0.5);
  r1.yz = r1.yz * r1.yz;
  r1.yz = min(float2(1,1), r1.yz);
  r0.z = r2.z * 2 + -1;
  r2.xy = r2.zy + r2.zy;
  r0.z = saturate(1 + -r0.z);
  r2.x = saturate(r2.x);
  r0.z = -r2.x + r0.z;
  r0.y = r0.y * r0.z + r2.x;
  r3.w = r0.x * r0.y;
  r0.x = IR_Light_Info.z + -IR_Light_Info.y;
  r0.x = saturate(r0.w / r0.x);
  r0.x = 1 + -r0.x;
  r0.x = r0.x * r1.x;
  r0.x = log2(r0.x);
  r0.x = IR_Light_Info.x * r0.x;
  r0.x = exp2(r0.x);
  r0.yzw = IR_Light_Color.xyz * r1.zzz;
  r3.xyz = IR_light_back_color.xyz * r1.yyy + r0.yzw;
  r0.xyzw = r3.xyzw * r0.xxxx;
  r1.x = cmp(r2.y >= -r2.y);
  r1.y = frac(abs(r2.y));
  r1.x = r1.x ? r1.y : -r1.y;
  r2.xyzw = cmp(r1.xxxx >= float4(-0.166666999,0.166666999,0.5,0.833333015));
  r1.xyzw = cmp(float4(0.166666999,0.5,0.833333015,1.16666698) >= r1.xxxx);
  r1.xyzw = r1.xyzw ? float4(1,1,1,1) : 0;
  r2.xyzw = r2.xyzw ? float4(1,1,1,1) : 0;
  r1.xyzw = min(r2.xyzw, r1.xyzw);
  r1.x = saturate(dot(Link_categories.xyzw, r1.xyzw));
  o0.xyzw = r1.xxxx * r0.xyzw;
  return;
}