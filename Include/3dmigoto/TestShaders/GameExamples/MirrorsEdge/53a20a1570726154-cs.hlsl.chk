// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:40:34 2019

struct g_lightCullInput_res
{
    uint4 g_lightCullInput_uint4;  // Offset:    0
};

struct g_lightIndexInput_res
{
    uint g_lightIndexInput_uint;   // Offset:    0
};

struct g_compactTileGridBuffer_res
{
    uint g_compactTileGridBuffer_uint;// Offset:    0
};

cbuffer cbLocalIBLLightInfo : register(b5)
{

  struct
  {
    float3 pos;
    float sqrAttenuationRadius;
    float4x4 invTransform;
    float3 extend;
    float textureIndex;
    float3 sideFadePositive;
    float influenceFadeDistance;
    float3 sideFadeNegative;
    float IBLType;
    float3 localOffset;
    float influenceExpandDistance;
    float3 influenceFadeNormal;
    float skipSkyVisibilityAsAO;
    float skipSkyVisibilityAsMask;
    float3 unused;
  } g_lightInfoLocalIBL[128] : packoffset(c0);

}

cbuffer cb0 : register(b0)
{
  float4x4 invViewProjectionMatrix : packoffset(c0);
  float4 g_exposureMultipliers : packoffset(c4);
  float localIblMipmapBias : packoffset(c5);
  float screenAspectRatio : packoffset(c5.y);
  float2 invResolution : packoffset(c5.z);
  float4 shadowMapSizeAndInvSize : packoffset(c6);
  uint forceSplitLighting : packoffset(c7);
  uint sssScatteringEnables : packoffset(c7.y);
  float volumetricShadowmapHalfTexelOffset : packoffset(c7.z);
  float volumetricShadowmapOneMinusHalfTexelOffset : packoffset(c7.w);
  float volumetricShadowmapInvMaxCount : packoffset(c8);
  float dynamicAOFactor : packoffset(c8.y);
  uint tileCountX : packoffset(c8.z);
  uint pad1 : packoffset(c8.w);
  float4x3 g_normalBasisTransforms[6] : packoffset(c9);
}

SamplerState g_linearSampler_s_s : register(s0);
SamplerState g_linearMipmapSampler_s_s : register(s1);
Texture2D<float4> g_gbufferTexture0 : register(t0);
Texture2D<float4> g_gbufferTexture1 : register(t1);
Texture2D<float4> g_gbufferTexture2 : register(t2);
Texture2D<float> g_depthTexture : register(t6);
TextureCubeArray<float4> g_specularLocalIBLsTexture : register(t7);
Texture2D<float4> g_preIntegratedFGTexture : register(t8);
Texture2D<float> g_diffuseOcclusionTexture : register(t10);
StructuredBuffer<g_lightCullInput_res> g_lightCullInput : register(t19);
StructuredBuffer<g_lightIndexInput_res> g_lightIndexInput : register(t20);
StructuredBuffer<g_compactTileGridBuffer_res> g_compactTileGridBuffer : register(t24);
RWTexture2D<float4> g_outputTexture0 : register(u0);


// 3Dmigoto declarations
#define cmp -


void main)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g0, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g1, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_thread_group 16, 16, 1
  r0.x = g_compactTileGridBuffer[vThreadGroupID.x].g_compactTileGridBuffer_uint;
  r1.x = (uint)r0.x >> 16;
  r1.yzw = (int3)r0.xxx & int3(0xffff,0xffff,0xffff);
  r0.xyzw = mad((int4)r1.xyzw, int4(16,16,16,16), (int4)vThreadIDInGroup.xyyy);
  if (vThreadIDInGroupFlattened.x == 0) {
    r1.x = mad((int)r1.w, tileCountX, (int)r1.x);
    r1.x = g_lightCullInput[r1.x].g_lightCullInput_uint4.x;
    r1.y = g_lightCullInput[r1.x].g_lightCullInput_uint4.y;
    r1.z = g_lightCullInput[r1.x].g_lightCullInput_uint4.z;
    r1.w = g_lightCullInput[r1.x].g_lightCullInput_uint4.w;
    r2.xy = (uint2)r1.yz >> int2(16,16);
    r1.yzw = (int3)r1.yzw & int3(0xffff,0xffff,0xffff);
  // No code for instruction (needs manual fix):
    store_raw g1.x, l(0), r1.w
    r1.y = (int)r2.x + (int)r1.y;
    r1.y = (int)r1.z + (int)r1.y;
    r1.y = (int)r2.y + (int)r1.y;
    r1.x = (int)r1.y + (int)r1.x;
  // No code for instruction (needs manual fix):
    store_raw g0.x, l(0), r1.x
  }
  GroupMemoryBarrierWithGroupSync();
  r1.xy = (uint2)r0.xw;
  r1.zw = float2(0.5,0.5) + r1.xy;
  r1.zw = invResolution.xy * r1.zw;
  r2.xy = (int2)r1.xy;
  r2.zw = float2(0,0);
  r3.xyzw = g_gbufferTexture0.Load(r2.xyw).xyzw;
  r4.xyzw = g_gbufferTexture1.Load(r2.xyw).xyzw;
  r5.xyz = g_gbufferTexture2.Load(r2.xyw).yzw;
  r2.z = g_depthTexture.Load(r2.xyz).x;
  r1.x = 6 * r4.w;
  r1.x = round(r1.x);
  r1.x = (uint)r1.x;
  r6.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r1.y = dot(r6.xy, r6.xy);
  r1.y = min(1, r1.y);
  r1.y = 1 + -r1.y;
  r6.z = sqrt(r1.y);
  r1.x = (int)r1.x * 3;
  r7.x = dot(r6.xyz, g_normalBasisTransforms[r1.x]._m00_m10_m20);
  r7.y = dot(r6.xyz, g_normalBasisTransforms[r1.x]._m01_m11_m21);
  r7.z = dot(r6.xyz, g_normalBasisTransforms[r1.x]._m02_m12_m22);
  r1.x = 1 + -r3.z;
  r1.y = 3 * r3.w;
  r1.y = round(r1.y);
  r1.y = (int)r1.y;
  r1.y = cmp((int)r1.y == 1);
  r1.y = r1.y ? 0 : r5.x;
  r3.x = r5.y * r5.y;
  r3.y = 0.159999996 * r3.x;
  r3.xzw = -r3.xxx * float3(0.159999996,0.159999996,0.159999996) + r4.xyz;
  r3.xyz = r1.yyy * r3.xzw + r3.yyy;
  r1.y = dot(r3.xyz, float3(0.330000013,0.330000013,0.330000013));
  r1.y = saturate(50 * r1.y);
  r4.y = r1.x * r1.x;
  r4.zw = r1.zw * float2(2,2) + float2(-1,-1);
  r2.xy = float2(1,-1) * r4.zw;
  r2.w = 1;
  r6.x = dot(r2.xyzw, invViewProjectionMatrix._m00_m10_m20_m30);
  r6.y = dot(r2.xyzw, invViewProjectionMatrix._m01_m11_m21_m31);
  r6.z = dot(r2.xyzw, invViewProjectionMatrix._m02_m12_m22_m32);
  r2.x = dot(r2.xyzw, invViewProjectionMatrix._m03_m13_m23_m33);
  r2.x = 1 / r2.x;
  r8.xyz = r6.xyz * r2.xxx;
  r2.y = dot(-r8.xyz, -r8.xyz);
  r2.y = rsqrt(r2.y);
  r2.yzw = -r8.xyz * r2.yyy;
  r3.w = dot(-r2.yzw, r7.xyz);
  r3.w = r3.w + r3.w;
  r5.xyw = r7.xyz * -r3.www + -r2.yzw;
  r4.x = saturate(dot(r7.xyz, r2.yzw));
  r1.z = g_diffuseOcclusionTexture.SampleLevel(g_linearSampler_s_s, r1.zw, 0).x;
// No code for instruction (needs manual fix):
ld_raw r1.w, l(0), g0.xxxx
  r2.yz = g_preIntegratedFGTexture.SampleLevel(g_linearSampler_s_s, r4.xy, 0).xy;
  r1.y = r2.z * r1.y;
  r2.yzw = r3.xyz * r2.yyy + r1.yyy;
// No code for instruction (needs manual fix):
ld_raw r1.y, l(0), g1.xxxx
  r1.y = (int)r1.w + (int)r1.y;
  r3.x = -r1.x * r1.x + 1;
  r3.y = max(0, r3.x);
  r3.y = sqrt(r3.y);
  r3.y = r1.x * r1.x + r3.y;
  r3.x = r3.x * r3.y;
  r3.yzw = r5.xyw + -r7.xyz;
  r3.xyz = r3.xxx * r3.yzw + r7.xyz;
  r3.w = dot(r3.xyz, r3.xyz);
  r4.z = 4 * r3.w;
  r4.w = cmp(r3.w == 0.000000);
  r3.w = r3.w + r3.w;
  r5.x = min(1, r4.y);
  r5.y = r5.x * -2 + 3;
  r5.x = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r5.y = r4.y * -16 + -1;
  r5.y = exp2(r5.y);
  r5.w = 1 + -r5.z;
  r8.w = 1;
  r9.xyz = float3(0,0,0);
  r6.w = 0;
  r7.w = r1.w;
  while (true) {
    r9.w = cmp((uint)r7.w < (uint)r1.y);
    r10.x = cmp(r6.w < 1);
    r9.w = r9.w ? r10.x : 0;
    if (r9.w == 0) break;
    r9.w = g_lightIndexInput[r7.w].g_lightIndexInput_uint;
    r9.w = (int)r9.w * 11;
    r10.x = cmp(0.000000 == g_lightInfoLocalIBL[r9.w].IBLType);
    if (r10.x != 0) {
      r10.xyz = r6.xyz * r2.xxx + -g_lightInfoLocalIBL[r9.w].pos.xyz;
      r10.w = dot(r3.xyz, r10.xyz);
      r11.x = r10.w + r10.w;
      r11.y = dot(r10.xyz, r10.xyz);
      r11.z = -g_lightInfoLocalIBL[r9.w].extend.x * g_lightInfoLocalIBL[r9.w].extend.x + r11.y;
      r11.z = r11.z * r4.z;
      r11.x = r11.x * r11.x + -r11.z;
      r11.z = cmp(r11.x < 0);
      r11.z = (int)r4.w | (int)r11.z;
      if (r11.z != 0) {
        r11.w = 0;
      } else {
        r11.x = sqrt(r11.x);
        r10.w = -r10.w * 2 + r11.x;
        r11.w = r10.w / r3.w;
      }
      if (r11.z == 0) {
        r12.xyz = r11.www * r3.xyz + r8.xyz;
        r12.xyz = -g_lightInfoLocalIBL[r9.w].pos.xyz + r12.xyz;
        r10.w = dot(r12.xyz, r12.xyz);
        r10.w = sqrt(r10.w);
        r11.x = r11.w * r4.y;
        r10.w = r11.x / r10.w;
        r11.x = r1.x * r1.x + -r10.w;
        r10.w = r5.x * r11.x + r10.w;
        r11.xzw = -r12.xyz + r3.xyz;
        r12.xyz = r5.xxx * r11.xzw + r12.xyz;
        r10.w = max(0.0135000004, r10.w);
        r10.w = min(1, r10.w);
        r10.w = r10.w * localIblMipmapBias + 1;
        r10.w = log2(r10.w);
        r12.w = g_lightInfoLocalIBL[r9.w].textureIndex;
        r12.xyzw = g_specularLocalIBLsTexture.SampleLevel(g_linearMipmapSampler_s_s, r12.xyzw, r10.w).xyzw;
        r11.xzw = r12.xyz * r2.yzw;
        r10.w = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsAO, r5.z);
        r10.w = min(r10.w, r1.z);
        r12.x = r10.w + r4.x;
        r12.x = log2(r12.x);
        r12.x = r12.x * r5.y;
        r12.x = exp2(r12.x);
        r10.w = r12.x + r10.w;
        r10.w = saturate(-1 + r10.w);
        r11.xzw = r11.xzw * r10.www;
        r10.w = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsMask, r5.w);
        r10.w = r12.w * r10.w;
        r12.x = sqrt(r11.y);
        r12.y = g_lightInfoLocalIBL[r9.w].influenceExpandDistance + g_lightInfoLocalIBL[r9.w].extend.x;
        r12.y = r12.y + -r12.x;
        r12.z = max(g_lightInfoLocalIBL[r9.w].influenceFadeDistance, 9.99999975e-05);
        r12.y = saturate(r12.y / r12.z);
        r12.x = -g_lightInfoLocalIBL[r9.w].extend.x + r12.x;
        r12.x = saturate(g_lightInfoLocalIBL[r9.w].influenceFadeNormal.x + r12.x);
        r11.y = rsqrt(r11.y);
        r10.xyz = r11.yyy * r10.xyz;
        r10.x = dot(r7.xyz, r10.xyz);
        r10.x = saturate(r10.x * -2.5 + 1.5);
        r10.y = cmp(0 < r12.x);
        r10.x = r10.y ? r10.x : 1;
        r10.x = r12.y * r10.x;
        r10.y = r10.x * r10.x;
        r10.x = -r10.x * 2 + 3;
        r10.x = r10.y * r10.x;
        r10.x = r10.w * r10.x;
      } else {
        r11.xzw = float3(0,0,0);
        r10.x = 0;
      }
    } else {
      r12.x = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w/4]._m00_m10_m20_m30);
      r12.y = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w/4]._m01_m11_m21_m31);
      r12.z = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w/4]._m02_m12_m22_m32);
      r13.x = dot(r3.xyz, g_lightInfoLocalIBL[r9.w/4]._m00_m10_m20);
      r13.y = dot(r3.xyz, g_lightInfoLocalIBL[r9.w/4]._m01_m11_m21);
      r13.z = dot(r3.xyz, g_lightInfoLocalIBL[r9.w/4]._m02_m12_m22);
      r10.yzw = float3(1,1,1) / r13.xyz;
      r14.xyz = -g_lightInfoLocalIBL[r9.w].extend.xyz + -r12.xyz;
      r14.xyz = r14.xyz * r10.yzw;
      r15.xyz = g_lightInfoLocalIBL[r9.w].extend.xyz + -r12.xyz;
      r10.yzw = r15.xyz * r10.yzw;
      r15.xyz = min(r14.xyz, r10.yzw);
      r10.yzw = max(r14.xyz, r10.yzw);
      r11.y = max(r15.y, r15.z);
      r11.y = max(r15.x, r11.y);
      r10.y = min(r10.y, r10.z);
      r10.y = min(r10.y, r10.w);
      r10.z = cmp(r11.y < r10.y);
      if (r10.z != 0) {
        r14.xyz = r10.yyy * r13.xyz + r12.xyz;
        r14.xyz = -g_lightInfoLocalIBL[r9.w].localOffset.xyz + r14.xyz;
        r10.z = dot(r14.xyz, r14.xyz);
        r10.z = sqrt(r10.z);
        r10.y = r10.y * r4.y;
        r10.y = r10.y / r10.z;
        r10.z = r1.x * r1.x + -r10.y;
        r10.y = r5.x * r10.z + r10.y;
        r13.xyz = -r14.xyz + r13.xyz;
        r13.xyz = r5.xxx * r13.xyz + r14.xyz;
        r10.y = max(0.0135000004, r10.y);
        r10.y = min(1, r10.y);
        r10.y = r10.y * localIblMipmapBias + 1;
        r10.y = log2(r10.y);
        r13.w = g_lightInfoLocalIBL[r9.w].textureIndex;
        r14.xyzw = g_specularLocalIBLsTexture.SampleLevel(g_linearMipmapSampler_s_s, r13.xyzw, r10.y).xyzw;
        r10.yzw = r14.xyz * r2.yzw;
        r11.y = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsAO, r5.z);
        r11.y = min(r11.y, r1.z);
        r12.w = r11.y + r4.x;
        r12.w = log2(r12.w);
        r12.w = r12.w * r5.y;
        r12.w = exp2(r12.w);
        r11.y = r12.w + r11.y;
        r11.y = saturate(-1 + r11.y);
        r11.xzw = r11.yyy * r10.yzw;
        r10.y = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsMask, r5.w);
        r10.y = r14.w * r10.y;
        r14.xyz = g_lightInfoLocalIBL[r9.w].influenceExpandDistance + g_lightInfoLocalIBL[r9.w].extend.xyz;
        r15.xyz = g_lightInfoLocalIBL[r9.w].influenceFadeDistance + -r14.xyz;
        r16.xyz = -g_lightInfoLocalIBL[r9.w].influenceFadeDistance + r14.xyz;
        r17.xyz = cmp(r12.xyz < r15.xyz);
        r15.xyz = r15.xyz + -r12.xyz;
        r15.xyz = r15.xyz * r15.xyz;
        r15.xyz = r17.xyz ? r15.xyz : 0;
        r17.xyz = cmp(r16.xyz < r12.xyz);
        r16.xyz = -r16.xyz + r12.xyz;
        r16.xyz = r16.xyz * r16.xyz;
        r16.xyz = r17.xyz ? r16.xyz : 0;
        r10.z = dot(r15.xyz, float3(1,1,1));
        r10.w = dot(r16.xyz, float3(1,1,1));
        r10.z = r10.z + r10.w;
        r10.z = sqrt(r10.z);
        r10.w = max(g_lightInfoLocalIBL[r9.w].influenceFadeDistance, 9.99999975e-05);
        r10.z = r10.z / r10.w;
        r10.z = min(1, r10.z);
        r10.z = 1 + -r10.z;
        r12.xyz = -r14.xyz + abs(r12.xyz);
        r12.xyz = saturate(g_lightInfoLocalIBL[r9.w].influenceFadeNormal.xyz + r12.xyz);
        r14.xyz = r6.xyz * r2.xxx + -g_lightInfoLocalIBL[r9.w].pos.xyz;
        r10.w = dot(r14.xyz, r14.xyz);
        r10.w = rsqrt(r10.w);
        r14.xyz = r14.xyz * r10.www;
        r10.w = dot(r7.xyz, r14.xyz);
        r10.w = saturate(r10.w * -2.5 + 1.5);
        r11.y = dot(r12.xyz, float3(1,1,1));
        r11.y = cmp(0 < r11.y);
        r10.w = r11.y ? r10.w : 1;
        r10.z = r10.z * r10.w;
        r10.w = dot(r13.xyz, r13.xyz);
        r10.w = rsqrt(r10.w);
        r12.xyz = r13.xyz * r10.www;
        r13.xyz = r12.xyz * float3(6,6,6) + float3(-2,-2,-2);
        r13.xyz = saturate(g_lightInfoLocalIBL[r9.w].sideFadePositive.xyz * r13.xyz);
        r12.xyz = r12.xyz * float3(-6,-6,-6) + float3(-2,-2,-2);
        r12.xyz = saturate(g_lightInfoLocalIBL[r9.w].sideFadeNegative.xyz * r12.xyz);
        r12.xyz = r13.xyz + r12.xyz;
        r9.w = r12.x + r12.y;
        r9.w = r9.w + r12.z;
        r9.w = 1 + -r9.w;
        r9.w = max(0, r9.w);
        r9.w = r10.z * r9.w;
        r10.z = r9.w * r9.w;
        r9.w = -r9.w * 2 + 3;
        r9.w = r10.z * r9.w;
        r10.x = r10.y * r9.w;
      } else {
        r11.xzw = float3(0,0,0);
        r10.x = 0;
      }
    }
    r9.w = saturate(r10.x + -r6.w);
    r9.xyz = r11.xzw * r9.www + r9.xyz;
    r9.w = r9.w + r6.w;
    r6.w = min(1, r9.w);
    r7.w = (int)r7.w + 1;
  }
  r1.w = 1 + -r6.w;
  r2.xyz = g_exposureMultipliers.zzz * r9.xyz;
  r1.xyz = min(float3(65504,65504,65504), r2.xyz);
// No code for instruction (needs manual fix):
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
  return;
}