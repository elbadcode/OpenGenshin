// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:23 2019

cbuffer cbPunctualLightInfo : register(b1)
{

  struct
  {

    struct
    {
      float3 pos;
      float invSqrAttenuationRadius;
      float3 color;
      float attenuationOffset;
      float3 matrixForward;
      float diffuseScale;
      float3 matrixUp;
      float specularScale;
      float3 matrixLeft;
      float shadowDimmer;
      float angleScale;
      float angleOffset;
      float2 unused;
    } baseLight;


    struct
    {
      float enable;
      float volumeShadowMapIndex;
      float invAttenuationRadius;
      float tanAngle;
    } vShadow;

  } g_lightInfoPunctual[128] : packoffset(c0);

}

cbuffer cb0 : register(b0)
{
  float4x4 invViewProjectionMatrix : packoffset(c0);
  float4 g_exposureMultipliers : packoffset(c4);
  float localIblMipmapBias : packoffset(c5);
  float screenAspectRatio : packoffset(c5.y);
  float2 invResolution : packoffset(c5.z);
  float4 shadowMapSizeAndInvSize : packoffset(c6);
  uint forceSplitLighting : packoffset(c7);
  uint sssScatteringEnables : packoffset(c7.y);
  float volumetricShadowmapHalfTexelOffset : packoffset(c7.z);
  float volumetricShadowmapOneMinusHalfTexelOffset : packoffset(c7.w);
  float volumetricShadowmapInvMaxCount : packoffset(c8);
  float dynamicAOFactor : packoffset(c8.y);
  uint tileCountX : packoffset(c8.z);
  uint pad1 : packoffset(c8.w);
  float4x3 g_normalBasisTransforms[6] : packoffset(c9);
}

SamplerState g_linearSampler_s_s : register(s0);
Texture2D<float4> g_gbufferTexture0 : register(t0);
Texture2D<float4> g_gbufferTexture1 : register(t1);
Texture2D<float4> g_gbufferTexture2 : register(t2);
Texture2D<float> g_depthTexture : register(t6);
Texture2D<float> g_diffuseOcclusionTexture : register(t10);
StructuredBuffer<uint4> g_lightCullInput : register(t19);
StructuredBuffer<uint> g_lightIndexInput : register(t20);
StructuredBuffer<uint> g_compactTileGridBuffer : register(t24);
RWTexture2D<float4> g_outputTexture0 : register(u0);


// 3Dmigoto declarations
#define cmp -


void main)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g0, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g1, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_thread_group 16, 16, 1
  r0.x = g_compactTileGridBuffer[vThreadGroupID.x].x;
  r1.x = (uint)r0.x >> 16;
  r1.yzw = (int3)r0.xxx & int3(0xffff,0xffff,0xffff);
  r0.xyzw = mad((int4)r1.xyzw, int4(16,16,16,16), (int4)vThreadIDInGroup.xyyy);
  if (vThreadIDInGroupFlattened.x == 0) {
    r1.x = mad((int)r1.w, tileCountX, (int)r1.x);
    r1.xy = g_lightCullInput[r1.x].xy;
    r1.y = (int)r1.y & 0x0000ffff;
  // No code for instruction (needs manual fix):
    store_raw g0.x, l(0), r1.x
  // No code for instruction (needs manual fix):
    store_raw g1.x, l(0), r1.y
  }
  GroupMemoryBarrierWithGroupSync();
  r1.xy = (uint2)r0.xw;
  r1.zw = float2(0.5,0.5) + r1.xy;
  r1.zw = invResolution.xy * r1.zw;
  r2.xy = (int2)r1.xy;
  r2.zw = float2(0,0);
  r3.xyzw = g_gbufferTexture0.Load(r2.xyw).xyzw;
  r4.xyzw = g_gbufferTexture1.Load(r2.xyw).xyzw;
  r1.xy = g_gbufferTexture2.Load(r2.xyw).yz;
  r2.z = g_depthTexture.Load(r2.xyz).x;
  r4.w = 6 * r4.w;
  r4.w = round(r4.w);
  r4.w = (uint)r4.w;
  r5.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r3.x = dot(r5.xy, r5.xy);
  r3.x = min(1, r3.x);
  r3.x = 1 + -r3.x;
  r5.z = sqrt(r3.x);
  r3.x = (int)r4.w * 3;
  r6.x = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m00_m10_m20);
  r6.y = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m01_m11_m21);
  r6.z = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m02_m12_m22);
  r3.x = 1 + -r3.z;
  r3.y = 3 * r3.w;
  r3.y = round(r3.y);
  r3.y = (int)r3.y;
  r3.y = cmp((int)r3.y == 1);
  r1.x = r3.y ? 0 : r1.x;
  r3.y = 1 + -r1.x;
  r3.yzw = r4.xyz * r3.yyy;
  r1.y = r1.y * r1.y;
  r4.w = 0.159999996 * r1.y;
  r4.xyz = -r1.yyy * float3(0.159999996,0.159999996,0.159999996) + r4.xyz;
  r4.xyz = r1.xxx * r4.xyz + r4.www;
  r1.x = dot(r4.xyz, float3(0.330000013,0.330000013,0.330000013));
  r1.x = saturate(50 * r1.x);
  r1.y = r3.x * r3.x;
  r5.xy = r1.zw * float2(2,2) + float2(-1,-1);
  r2.xy = float2(1,-1) * r5.xy;
  r2.w = 1;
  r5.x = dot(r2.xyzw, invViewProjectionMatrix._m00_m10_m20_m30);
  r5.y = dot(r2.xyzw, invViewProjectionMatrix._m01_m11_m21_m31);
  r5.z = dot(r2.xyzw, invViewProjectionMatrix._m02_m12_m22_m32);
  r2.x = dot(r2.xyzw, invViewProjectionMatrix._m03_m13_m23_m33);
  r2.x = 1 / r2.x;
  r2.yzw = r5.xyz * r2.xxx;
  r4.w = dot(-r2.yzw, -r2.yzw);
  r4.w = rsqrt(r4.w);
  r7.xyz = r4.www * -r2.yzw;
  r5.w = dot(r6.xyz, r7.xyz);
  r6.w = saturate(r5.w);
  r1.z = g_diffuseOcclusionTexture.SampleLevel(g_linearSampler_s_s, r1.zw, 0).x;
// No code for instruction (needs manual fix):
ld_raw r1.w, l(0), g0.xxxx
// No code for instruction (needs manual fix):
ld_raw r7.x, l(0), g1.xxxx
  r7.x = (int)r1.w + (int)r7.x;
  r5.w = 9.99999975e-06 + abs(r5.w);
  r7.yzw = r1.xxx + -r4.xyz;
  r1.x = max(0.00200000009, r1.y);
  r1.x = r1.x * r1.x;
  r8.x = -r5.w * r1.x + r5.w;
  r8.x = r8.x * r5.w + r1.x;
  r8.x = sqrt(r8.x);
  r8.y = r3.x * -0.337748349 + 1;
  r8.z = 1 + -r5.w;
  r8.w = r8.z * r8.z;
  r8.w = r8.w * r8.w;
  r8.z = r8.w * r8.z;
  r9.xyz = float3(0,0,0);
  r10.xyz = float3(0,0,0);
  r8.w = r1.w;
  while (true) {
    r9.w = cmp((uint)r8.w >= (uint)r7.x);
    if (r9.w != 0) break;
    r9.w = g_lightIndexInput[r8.w].x;
    r9.w = (int)r9.w * 7;
    r11.xyz = -r5.xyz * r2.xxx + g_lightInfoPunctual[r9.w].baseLight.pos.xyz;
    r10.w = dot(r11.xyz, r11.xyz);
    r11.w = rsqrt(r10.w);
    r11.xyz = r11.xyz * r11.www;
    r11.w = g_lightInfoPunctual[r9.w].baseLight.attenuationOffset + r10.w;
    r11.w = max(9.99999975e-05, r11.w);
    r11.w = 1 / r11.w;
    r10.w = g_lightInfoPunctual[r9.w].baseLight.invSqrAttenuationRadius * r10.w;
    r10.w = -r10.w * r10.w + 1;
    r10.w = max(0, r10.w);
    r10.w = r10.w * r10.w;
    r10.w = r11.w * r10.w;
    r11.w = dot(g_lightInfoPunctual[r9.w].baseLight.matrixForward.xyz, r11.xyz);
    r11.w = saturate(r11.w * g_lightInfoPunctual[r9.w].baseLight.angleScale + g_lightInfoPunctual[r9.w].baseLight.angleOffset);
    r11.w = r11.w * r11.w;
    r10.w = r11.w * r10.w;
    r11.w = saturate(dot(r6.xyz, r11.xyz));
    r10.w = r11.w * r10.w;
    r12.x = cmp(0 < r10.w);
    if (r12.x != 0) {
      r12.xyz = -r2.yzw * r4.www + r11.xyz;
      r12.w = dot(r12.xyz, r12.xyz);
      r12.w = rsqrt(r12.w);
      r12.xyz = r12.xyz * r12.www;
      r11.x = saturate(dot(r11.xyz, r12.xyz));
      r11.y = saturate(dot(r6.xyz, r12.xyz));
      r11.z = 1 + -r11.x;
      r12.x = r11.z * r11.z;
      r12.x = r12.x * r12.x;
      r11.z = r12.x * r11.z;
      r12.xyz = r7.yzw * r11.zzz + r4.xyz;
      r11.z = -r11.w * r1.x + r11.w;
      r11.z = r11.z * r11.w + r1.x;
      r11.z = sqrt(r11.z);
      r11.z = r11.z * r5.w;
      r11.z = r11.w * r8.x + r11.z;
      r11.z = 0.5 / r11.z;
      r12.w = r11.y * r1.x + -r11.y;
      r11.y = r12.w * r11.y + 1;
      r11.y = r11.y * r11.y;
      r11.y = r1.x / r11.y;
      r11.y = r11.z * r11.y;
      r12.xyz = r12.xyz * r11.yyy;
      r11.x = r11.x * r11.x;
      r11.x = dot(r11.xx, r3.xx);
      r11.x = r3.x * 0.5 + r11.x;
      r11.y = 1 + -r11.w;
      r11.z = r11.y * r11.y;
      r11.z = r11.z * r11.z;
      r11.y = r11.z * r11.y;
      r11.x = -1 + r11.x;
      r11.y = r11.x * r11.y + 1;
      r11.x = r11.x * r8.z + 1;
      r11.x = r11.y * r11.x;
      r11.x = r11.x * r8.y;
      r11.y = g_lightInfoPunctual[r9.w].baseLight.diffuseScale * r10.w;
      r11.yzw = g_lightInfoPunctual[r9.w].baseLight.color.xyz * r11.yyy;
      r11.xyz = r11.xxx * r11.yzw;
      r10.w = g_lightInfoPunctual[r9.w].baseLight.specularScale * r10.w;
      r13.xyz = g_lightInfoPunctual[r9.w].baseLight.color.xyz * r10.www;
      r12.xyz = r13.xyz * r12.xyz;
    } else {
      r11.xyz = float3(0,0,0);
      r12.xyz = float3(0,0,0);
    }
    r10.xyz = r11.xyz + r10.xyz;
    r9.xyz = r12.xyz + r9.xyz;
    r8.w = (int)r8.w + 1;
  }
  r1.x = -1 + r1.z;
  r1.x = dynamicAOFactor * r1.x + 1;
  r2.xyz = r10.xyz * r1.xxx;
  r1.x = r6.w + r1.z;
  r1.y = r1.y * -16 + -1;
  r1.y = exp2(r1.y);
  r1.x = log2(r1.x);
  r1.x = r1.y * r1.x;
  r1.x = exp2(r1.x);
  r1.x = r1.x + r1.z;
  r1.x = saturate(-1 + r1.x);
  r1.xyz = r9.xyz * r1.xxx;
  r2.xyz = r3.yzw * r2.xyz;
  r1.xyz = float3(0.318309873,0.318309873,0.318309873) * r1.xyz;
  r1.xyz = r2.xyz * float3(0.318309873,0.318309873,0.318309873) + r1.xyz;
  r1.xyz = g_exposureMultipliers.zzz * r1.xyz;
  r1.xyz = min(float3(65504,65504,65504), r1.xyz);
  r1.w = 0;
// No code for instruction (needs manual fix):
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
  return;
}