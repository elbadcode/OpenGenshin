// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:18 2019

struct g_lightCullInput_res
{
    uint4 g_lightCullInput_uint4;  // Offset:    0
};

struct g_lightIndexInput_res
{
    uint g_lightIndexInput_uint;   // Offset:    0
};

struct g_compactTileGridBuffer_res
{
    uint g_compactTileGridBuffer_uint;// Offset:    0
};

cbuffer cbPunctualLightInfo : register(b1)
{

  struct
  {

    struct
    {
      float3 pos;
      float invSqrAttenuationRadius;
      float3 color;
      float attenuationOffset;
      float3 matrixForward;
      float diffuseScale;
      float3 matrixUp;
      float specularScale;
      float3 matrixLeft;
      float shadowDimmer;
      float angleScale;
      float angleOffset;
      float2 unused;
    } baseLight;


    struct
    {
      float enable;
      float volumeShadowMapIndex;
      float invAttenuationRadius;
      float tanAngle;
    } vShadow;

  } g_lightInfoPunctual[128] : packoffset(c0);

}

cbuffer cbPunctualShadowLightInfo : register(b2)
{

  struct
  {

    struct
    {
      float3 pos;
      float invSqrAttenuationRadius;
      float3 color;
      float attenuationOffset;
      float3 matrixForward;
      float diffuseScale;
      float3 matrixUp;
      float specularScale;
      float3 matrixLeft;
      float shadowDimmer;
      float angleScale;
      float angleOffset;
      float2 unused;
    } baseLight;


    struct
    {
      float enable;
      float textureIndex;
      float2 unused;
    } iesShadow;


    struct
    {
      float4 shadowMatrix1;
      float4 shadowMatrix2;
      float4 shadowMatrix3;
      float4 shadowMatrix4;
      float4 shadowMapAtlasParam[6];
      float4 shadowMapIndex[2];
      float shadowType;
      float quality;
      float shadowAngleScale;
      float shadowAngleOffset;
    } shadow;


    struct
    {
      float enable;
      float volumeShadowMapIndex;
      float invAttenuationRadius;
      float tanAngle;
    } vShadow;

  } g_lightInfoPunctualShadow[128] : packoffset(c0);

}

cbuffer cbAreaLightInfo : register(b3)
{

  struct
  {

    struct
    {
      float3 pos;
      float invSqrAttenuationRadius;
      float3 color;
      float attenuationOffset;
      float3 matrixForward;
      float diffuseScale;
      float3 matrixUp;
      float specularScale;
      float3 matrixLeft;
      float shadowDimmer;
      float angleScale;
      float angleOffset;
      float2 unused;
    } baseLight;


    struct
    {
      float3 virtualPos;
      float occluderHeight;
      float areaLightType;
      float lightRadius0;
      float lightRadius1;
      float unused;
    } areaLight;


    struct
    {
      float enable;
      float volumeShadowMapIndex;
      float invAttenuationRadius;
      float tanAngle;
    } vShadow;

  } g_lightInfoArea[128] : packoffset(c0);

}

cbuffer cbAreaShadowLightInfo : register(b4)
{

  struct
  {

    struct
    {
      float3 pos;
      float invSqrAttenuationRadius;
      float3 color;
      float attenuationOffset;
      float3 matrixForward;
      float diffuseScale;
      float3 matrixUp;
      float specularScale;
      float3 matrixLeft;
      float shadowDimmer;
      float angleScale;
      float angleOffset;
      float2 unused;
    } baseLight;


    struct
    {
      float3 virtualPos;
      float occluderHeight;
      float areaLightType;
      float lightRadius0;
      float lightRadius1;
      float unused;
    } areaLight;


    struct
    {
      float enable;
      float textureIndex;
      float2 unused;
    } iesShadow;


    struct
    {
      float4 shadowMatrix1;
      float4 shadowMatrix2;
      float4 shadowMatrix3;
      float4 shadowMatrix4;
      float4 shadowMapAtlasParam[6];
      float4 shadowMapIndex[2];
      float shadowType;
      float quality;
      float shadowAngleScale;
      float shadowAngleOffset;
    } shadow;


    struct
    {
      float enable;
      float volumeShadowMapIndex;
      float invAttenuationRadius;
      float tanAngle;
    } vShadow;

  } g_lightInfoAreaShadow[128] : packoffset(c0);

}

cbuffer cb0 : register(b0)
{
  float4x4 invViewProjectionMatrix : packoffset(c0);
  float4 g_exposureMultipliers : packoffset(c4);
  float localIblMipmapBias : packoffset(c5);
  float screenAspectRatio : packoffset(c5.y);
  float2 invResolution : packoffset(c5.z);
  float4 shadowMapSizeAndInvSize : packoffset(c6);
  uint forceSplitLighting : packoffset(c7);
  uint sssScatteringEnables : packoffset(c7.y);
  float volumetricShadowmapHalfTexelOffset : packoffset(c7.z);
  float volumetricShadowmapOneMinusHalfTexelOffset : packoffset(c7.w);
  float volumetricShadowmapInvMaxCount : packoffset(c8);
  float dynamicAOFactor : packoffset(c8.y);
  uint tileCountX : packoffset(c8.z);
  uint pad1 : packoffset(c8.w);
  float4x3 g_normalBasisTransforms[6] : packoffset(c9);
}

SamplerState g_linearSampler_s_s : register(s0);
SamplerState g_linearLongitudeWrapSampler_s_s : register(s2);
SamplerComparisonState g_shadowmapSampler_s_s : register(s3);
Texture2D<float4> g_gbufferTexture0 : register(t0);
Texture2D<float4> g_gbufferTexture1 : register(t1);
Texture2D<float4> g_gbufferTexture2 : register(t2);
Texture2D<float> g_depthTexture : register(t6);
Texture2DArray<float> g_iesTextureArray : register(t9);
Texture2D<float> g_diffuseOcclusionTexture : register(t10);
StructuredBuffer<g_lightCullInput_res> g_lightCullInput : register(t19);
StructuredBuffer<g_lightIndexInput_res> g_lightIndexInput : register(t20);
Texture2DArray<float4> g_shadowmapTexture : register(t21);
StructuredBuffer<g_compactTileGridBuffer_res> g_compactTileGridBuffer : register(t24);
RWTexture2D<float4> g_outputTexture0 : register(u0);


// 3Dmigoto declarations
#define cmp -


void main)
{
  const float4 icb[] = { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000} };
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32,r33,r34,r35,r36;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g0, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g1, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g2, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g3, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g4, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_thread_group 16, 16, 1
  r0.x = g_compactTileGridBuffer[vThreadGroupID.x].g_compactTileGridBuffer_uint;
  r1.x = (uint)r0.x >> 16;
  r1.yzw = (int3)r0.xxx & int3(0xffff,0xffff,0xffff);
  r0.xyzw = mad((int4)r1.xyzw, int4(16,16,16,16), (int4)vThreadIDInGroup.xyyy);
  if (vThreadIDInGroupFlattened.x == 0) {
    r1.x = mad((int)r1.w, tileCountX, (int)r1.x);
    r1.x = g_lightCullInput[r1.x].g_lightCullInput_uint4.x;
    r1.y = g_lightCullInput[r1.x].g_lightCullInput_uint4.y;
    r1.z = g_lightCullInput[r1.x].g_lightCullInput_uint4.z;
    r2.xy = (uint2)r1.yz >> int2(16,16);
    r1.yz = (int2)r1.yz & int2(0xffff,0xffff);
  // No code for instruction (needs manual fix):
    store_raw g0.x, l(0), r1.x
  // No code for instruction (needs manual fix):
    store_raw g1.x, l(0), r1.y
  // No code for instruction (needs manual fix):
    store_raw g2.x, l(0), r2.x
  // No code for instruction (needs manual fix):
    store_raw g3.x, l(0), r1.z
  // No code for instruction (needs manual fix):
    store_raw g4.x, l(0), r2.y
  }
  GroupMemoryBarrierWithGroupSync();
  r1.xy = (uint2)r0.xw;
  r1.zw = float2(0.5,0.5) + r1.xy;
  r1.zw = invResolution.xy * r1.zw;
  r2.xy = (int2)r1.xy;
  r2.zw = float2(0,0);
  r3.xyzw = g_gbufferTexture0.Load(r2.xyw).xyzw;
  r4.xyzw = g_gbufferTexture1.Load(r2.xyw).xyzw;
  r1.xy = g_gbufferTexture2.Load(r2.xyw).yz;
  r2.z = g_depthTexture.Load(r2.xyz).x;
  r4.w = 6 * r4.w;
  r4.w = round(r4.w);
  r4.w = (uint)r4.w;
  r5.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r3.x = dot(r5.xy, r5.xy);
  r3.x = min(1, r3.x);
  r3.x = 1 + -r3.x;
  r5.z = sqrt(r3.x);
  r3.x = (int)r4.w * 3;
  r6.x = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m00_m10_m20);
  r6.y = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m01_m11_m21);
  r6.z = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m02_m12_m22);
  r3.x = 1 + -r3.z;
  r3.y = 3 * r3.w;
  r3.y = round(r3.y);
  r3.y = (int)r3.y;
  r3.y = cmp((int)r3.y == 1);
  r1.x = r3.y ? 0 : r1.x;
  r3.y = 1 + -r1.x;
  r3.yzw = r4.xyz * r3.yyy;
  r1.y = r1.y * r1.y;
  r4.w = 0.159999996 * r1.y;
  r4.xyz = -r1.yyy * float3(0.159999996,0.159999996,0.159999996) + r4.xyz;
  r4.xyz = r1.xxx * r4.xyz + r4.www;
  r1.x = dot(r4.xyz, float3(0.330000013,0.330000013,0.330000013));
  r1.x = saturate(50 * r1.x);
  r1.y = r3.x * r3.x;
  r5.xy = r1.zw * float2(2,2) + float2(-1,-1);
  r2.xy = float2(1,-1) * r5.xy;
  r2.w = 1;
  r5.x = dot(r2.xyzw, invViewProjectionMatrix._m00_m10_m20_m30);
  r5.y = dot(r2.xyzw, invViewProjectionMatrix._m01_m11_m21_m31);
  r5.z = dot(r2.xyzw, invViewProjectionMatrix._m02_m12_m22_m32);
  r2.x = dot(r2.xyzw, invViewProjectionMatrix._m03_m13_m23_m33);
  r2.x = 1 / r2.x;
  r7.xyz = r5.xyz * r2.xxx;
  r2.y = dot(-r7.xyz, -r7.xyz);
  r2.y = rsqrt(r2.y);
  r8.xyz = -r7.xyz * r2.yyy;
  r2.z = dot(-r8.xyz, r6.xyz);
  r2.z = r2.z + r2.z;
  r9.xyz = r6.xyz * -r2.zzz + -r8.xyz;
  r2.z = dot(r6.xyz, r8.xyz);
  r2.w = saturate(r2.z);
  r1.z = g_diffuseOcclusionTexture.SampleLevel(g_linearSampler_s_s, r1.zw, 0).x;
// No code for instruction (needs manual fix):
ld_raw r1.w, l(0), g0.xxxx
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g1.xxxx
  r5.w = (int)r1.w + (int)r4.w;
  r2.z = 9.99999975e-06 + abs(r2.z);
  r8.xyz = r1.xxx + -r4.xyz;
  r1.x = max(0.00200000009, r1.y);
  r6.w = r1.x * r1.x;
  r8.w = -r2.z * r6.w + r2.z;
  r8.w = r8.w * r2.z + r6.w;
  r8.w = sqrt(r8.w);
  r9.w = r3.x * -0.337748349 + 1;
  r10.x = 1 + -r2.z;
  r10.y = r10.x * r10.x;
  r10.y = r10.y * r10.y;
  r10.x = r10.y * r10.x;
  r10.yzw = float3(0,0,0);
  r11.xyz = float3(0,0,0);
  r11.w = r1.w;
  while (true) {
    r12.x = cmp((uint)r11.w >= (uint)r5.w);
    if (r12.x != 0) break;
    r12.x = g_lightIndexInput[r11.w].g_lightIndexInput_uint;
    r12.x = (int)r12.x * 7;
    r12.yzw = -r5.xyz * r2.xxx + g_lightInfoPunctual[r12.x].baseLight.pos.xyz;
    r13.x = dot(r12.yzw, r12.yzw);
    r13.y = rsqrt(r13.x);
    r12.yzw = r13.yyy * r12.yzw;
    r13.y = g_lightInfoPunctual[r12.x].baseLight.attenuationOffset + r13.x;
    r13.y = max(9.99999975e-05, r13.y);
    r13.y = 1 / r13.y;
    r13.x = g_lightInfoPunctual[r12.x].baseLight.invSqrAttenuationRadius * r13.x;
    r13.x = -r13.x * r13.x + 1;
    r13.x = max(0, r13.x);
    r13.x = r13.x * r13.x;
    r13.x = r13.y * r13.x;
    r13.y = dot(g_lightInfoPunctual[r12.x].baseLight.matrixForward.xyz, r12.yzw);
    r13.y = saturate(r13.y * g_lightInfoPunctual[r12.x].baseLight.angleScale + g_lightInfoPunctual[r12.x].baseLight.angleOffset);
    r13.y = r13.y * r13.y;
    r13.x = r13.x * r13.y;
    r13.y = saturate(dot(r6.xyz, r12.yzw));
    r13.x = r13.y * r13.x;
    r13.z = cmp(0 < r13.x);
    if (r13.z != 0) {
      r14.xyz = -r7.xyz * r2.yyy + r12.yzw;
      r13.z = dot(r14.xyz, r14.xyz);
      r13.z = rsqrt(r13.z);
      r14.xyz = r14.xyz * r13.zzz;
      r12.y = saturate(dot(r12.yzw, r14.xyz));
      r12.z = saturate(dot(r6.xyz, r14.xyz));
      r12.w = 1 + -r12.y;
      r13.z = r12.w * r12.w;
      r13.z = r13.z * r13.z;
      r12.w = r13.z * r12.w;
      r14.xyz = r8.xyz * r12.www + r4.xyz;
      r12.w = -r13.y * r6.w + r13.y;
      r12.w = r12.w * r13.y + r6.w;
      r12.w = sqrt(r12.w);
      r12.w = r12.w * r2.z;
      r12.w = r13.y * r8.w + r12.w;
      r12.w = 0.5 / r12.w;
      r13.z = r12.z * r6.w + -r12.z;
      r12.z = r13.z * r12.z + 1;
      r12.z = r12.z * r12.z;
      r12.z = r6.w / r12.z;
      r12.z = r12.w * r12.z;
      r14.xyz = r14.xyz * r12.zzz;
      r12.y = r12.y * r12.y;
      r12.y = dot(r12.yy, r3.xx);
      r12.y = r3.x * 0.5 + r12.y;
      r12.z = 1 + -r13.y;
      r12.w = r12.z * r12.z;
      r12.w = r12.w * r12.w;
      r12.z = r12.w * r12.z;
      r12.y = -1 + r12.y;
      r12.z = r12.y * r12.z + 1;
      r12.y = r12.y * r10.x + 1;
      r12.y = r12.z * r12.y;
      r12.y = r12.y * r9.w;
      r12.z = g_lightInfoPunctual[r12.x].baseLight.diffuseScale * r13.x;
      r13.yzw = g_lightInfoPunctual[r12.x].baseLight.color.xyz * r12.zzz;
      r12.yzw = r13.yzw * r12.yyy;
      r13.x = g_lightInfoPunctual[r12.x].baseLight.specularScale * r13.x;
      r13.xyz = g_lightInfoPunctual[r12.x].baseLight.color.xyz * r13.xxx;
      r13.xyz = r14.xyz * r13.xyz;
    } else {
      r12.yzw = float3(0,0,0);
      r13.xyz = float3(0,0,0);
    }
    r11.xyz = r12.yzw + r11.xyz;
    r10.yzw = r13.xyz + r10.yzw;
    r11.w = (int)r11.w + 1;
  }
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g1.xxxx
  r1.w = (int)r1.w + (int)r4.w;
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g2.xxxx
  r5.w = (int)r1.w + (int)r4.w;
  r7.w = 1;
  r12.xyz = r10.yzw;
  r13.xyz = r11.xyz;
  r11.w = r1.w;
  while (true) {
    r12.w = cmp((uint)r11.w >= (uint)r5.w);
    if (r12.w != 0) break;
    r12.w = g_lightIndexInput[r11.w].g_lightIndexInput_uint;
    r13.w = (int)r12.w * 21;
    r14.xyz = -r5.xyz * r2.xxx + g_lightInfoPunctualShadow[r13.w].baseLight.pos.xyz;
    r14.w = dot(r14.xyz, r14.xyz);
    r15.x = rsqrt(r14.w);
    r15.xyz = r15.xxx * r14.xyz;
    r15.w = g_lightInfoPunctualShadow[r13.w].baseLight.attenuationOffset + r14.w;
    r15.w = max(9.99999975e-05, r15.w);
    r15.w = 1 / r15.w;
    r14.w = g_lightInfoPunctualShadow[r13.w].baseLight.invSqrAttenuationRadius * r14.w;
    r14.w = -r14.w * r14.w + 1;
    r14.w = max(0, r14.w);
    r14.w = r14.w * r14.w;
    r14.w = r15.w * r14.w;
    r15.w = dot(g_lightInfoPunctualShadow[r13.w].baseLight.matrixForward.xyz, r15.xyz);
    r16.x = saturate(r15.w * g_lightInfoPunctualShadow[r13.w].baseLight.angleScale + g_lightInfoPunctualShadow[r13.w].baseLight.angleOffset);
    r16.x = r16.x * r16.x;
    r14.w = r16.x * r14.w;
    r16.x = saturate(dot(r6.xyz, r15.xyz));
    r14.w = r16.x * r14.w;
    r16.y = cmp(0 < r14.w);
    if (r16.y != 0) {
      r17.xyz = -r7.xyz * r2.yyy + r15.xyz;
      r16.z = dot(r17.xyz, r17.xyz);
      r16.z = rsqrt(r16.z);
      r17.xyz = r17.xyz * r16.zzz;
      r16.z = saturate(dot(r15.xyz, r17.xyz));
      r16.w = saturate(dot(r6.xyz, r17.xyz));
      r17.x = 1 + -r16.z;
      r17.y = r17.x * r17.x;
      r17.y = r17.y * r17.y;
      r17.x = r17.y * r17.x;
      r17.xyz = r8.xyz * r17.xxx + r4.xyz;
      r17.w = -r16.x * r6.w + r16.x;
      r17.w = r17.w * r16.x + r6.w;
      r17.w = sqrt(r17.w);
      r17.w = r17.w * r2.z;
      r17.w = r16.x * r8.w + r17.w;
      r17.w = 0.5 / r17.w;
      r18.x = r16.w * r6.w + -r16.w;
      r16.w = r18.x * r16.w + 1;
      r16.w = r16.w * r16.w;
      r16.w = r6.w / r16.w;
      r16.w = r17.w * r16.w;
      r17.xyz = r17.xyz * r16.www;
      r16.z = r16.z * r16.z;
      r16.z = dot(r16.zz, r3.xx);
      r16.z = r3.x * 0.5 + r16.z;
      r16.x = 1 + -r16.x;
      r16.w = r16.x * r16.x;
      r16.w = r16.w * r16.w;
      r16.x = r16.w * r16.x;
      r16.z = -1 + r16.z;
      r16.x = r16.z * r16.x + 1;
      r16.z = r16.z * r10.x + 1;
      r16.x = r16.x * r16.z;
      r16.x = r16.x * r9.w;
      r16.z = g_lightInfoPunctualShadow[r13.w].baseLight.diffuseScale * r14.w;
      r18.xyz = g_lightInfoPunctualShadow[r13.w].baseLight.color.xyz * r16.zzz;
      r16.xzw = r18.xyz * r16.xxx;
      r14.w = g_lightInfoPunctualShadow[r13.w].baseLight.specularScale * r14.w;
      r18.xyz = g_lightInfoPunctualShadow[r13.w].baseLight.color.xyz * r14.www;
      r17.xyz = r18.xyz * r17.xyz;
    } else {
      r16.xzw = float3(0,0,0);
      r17.xyz = float3(0,0,0);
    }
    r14.w = cmp(0 < g_lightInfoPunctualShadow[r13.w].iesShadow.enable);
    r14.w = r14.w ? r16.y : 0;
    if (r14.w != 0) {
      r14.w = dot(g_lightInfoPunctualShadow[r13.w].baseLight.matrixLeft.xyz, -r15.xyz);
      r17.w = dot(g_lightInfoPunctualShadow[r13.w].baseLight.matrixUp.xyz, -r15.xyz);
      r15.x = dot(g_lightInfoPunctualShadow[r13.w].baseLight.matrixForward.xyz, -r15.xyz);
      r15.y = r15.x * 0.5 + 0.5;
      r18.x = min(abs(r17.w), abs(r14.w));
      r18.y = max(abs(r17.w), abs(r14.w));
      r18.y = 1 / r18.y;
      r18.x = r18.x * r18.y;
      r18.y = r18.x * r18.x;
      r18.z = r18.y * 0.0208350997 + -0.0851330012;
      r18.z = r18.y * r18.z + 0.180141002;
      r18.z = r18.y * r18.z + -0.330299497;
      r18.y = r18.y * r18.z + 0.999866009;
      r18.z = r18.x * r18.y;
      r18.w = cmp(abs(r14.w) < abs(r17.w));
      r18.z = r18.z * -2 + 1.57079637;
      r18.z = r18.w ? r18.z : 0;
      r18.x = r18.x * r18.y + r18.z;
      r18.y = cmp(r14.w < -r14.w);
      r18.y = r18.y ? -3.141593 : 0;
      r18.x = r18.x + r18.y;
      r18.y = min(r17.w, r14.w);
      r14.w = max(r17.w, r14.w);
      r17.w = cmp(r18.y < -r18.y);
      r14.w = cmp(r14.w >= -r14.w);
      r14.w = r14.w ? r17.w : 0;
      r14.w = r14.w ? -r18.x : r18.x;
      r15.x = 0.159154937 * r14.w;
      r15.z = g_lightInfoPunctualShadow[r13.w].iesShadow.textureIndex;
      r14.w = g_iesTextureArray.SampleLevel(g_linearLongitudeWrapSampler_s_s, r15.xyz, 0).x;
    } else {
      r14.w = 1;
    }
    r15.x = cmp(0.000000 != g_lightInfoPunctualShadow[r13.w].shadow.shadowType);
    r15.x = r15.x ? r16.y : 0;
    if (r15.x != 0) {
      r15.x = saturate(r15.w * g_lightInfoPunctualShadow[r13.w].shadow.shadowAngleScale + g_lightInfoPunctualShadow[r13.w].shadow.shadowAngleOffset);
      r15.x = r15.x * r15.x;
      r15.y = cmp(0 < r15.x);
      if (r15.y != 0) {
        r15.y = cmp(2.000000 == g_lightInfoPunctualShadow[r13.w].shadow.shadowType);
        if (r15.y != 0) {
          r18.xyz = -r14.xyz;
          r15.y = max(abs(r14.x), abs(r14.y));
          r15.y = max(r15.y, abs(r14.z));
          r15.zw = cmp(abs(r14.yz) < abs(r14.xx));
          r15.z = r15.w ? r15.z : 0;
          if (r15.z != 0) {
            r15.z = cmp(0 < r18.x);
            r18.x = r15.z ? r18.z : r14.z;
            r15.z = r15.z ? 1.000000 : 0;
          } else {
            r19.xy = cmp(abs(r14.xz) < abs(r14.yy));
            r14.y = r19.y ? r19.x : 0;
            if (r14.y != 0) {
              r14.y = cmp(0 < r18.y);
              r18.w = r14.y ? r18.z : r14.z;
              r15.z = r14.y ? 3 : 2;
              r18.xy = r18.xw;
            } else {
              r14.y = cmp(0 < r18.z);
              r18.x = r14.y ? r14.x : r18.x;
              r15.z = r14.y ? 5 : 4;
            }
          }
          r14.xy = r18.xy / r15.yy;
          r14.xy = r14.xy * float2(0.5,-0.5) + float2(0.5,0.5);
          r15.w = -r15.y * g_lightInfoPunctualShadow[r13.w].shadow.shadowMatrix3.z + g_lightInfoPunctualShadow[r13.w].shadow.shadowMatrix3.w;
          r15.y = r15.w / r15.y;
          r15.w = -1;
        } else {
          r18.x = dot(r7.xyzw, g_lightInfoPunctualShadow[r13.w].shadow.shadowMatrix1.xyzw);
          r18.y = dot(r7.xyzw, g_lightInfoPunctualShadow[r13.w].shadow.shadowMatrix2.xyzw);
          r16.y = dot(r7.xyzw, g_lightInfoPunctualShadow[r13.w].shadow.shadowMatrix3.xyzw);
          r17.w = dot(r7.xyzw, g_lightInfoPunctualShadow[r13.w].shadow.shadowMatrix4.xyzw);
          r17.w = 1 / r17.w;
          r18.xy = r18.xy * r17.ww;
          r15.y = r17.w * r16.y;
          r14.xy = r18.xy * float2(0.5,-0.5) + float2(0.5,0.5);
          r16.y = -r16.y * r17.w + 1;
          r17.w = max(abs(r18.x), abs(r18.y));
          r16.y = max(r17.w, r16.y);
          r15.w = cmp(1 >= r16.y);
          r15.z = 0;
        }
        r15.z = (uint)r15.z;
        r16.y = (int)r15.z & 3;
        r15.z = (uint)r15.z >> 2;
        r12.w = mad((int)r12.w, 21, (int)r15.z);
        r12.w = dot(g_lightInfoPunctualShadow[r12.w].shadow.shadowMapIndex[0].xyzw, icb[r16.y+0].xyzw);
        r15.z = cmp(r12.w >= 0);
        r15.z = r15.w ? r15.z : 0;
        r12.w = (uint)r12.w;
        r15.w = (uint7)g_lightInfoPunctualShadow[r13.w].shadow.quality;
        r15.w = cmp((int)r15.w == 1);
        if (r15.w != 0) {
          r18.z = (uint)r12.w;
          r19.xy = shadowMapSizeAndInvSize.xx * r14.xy + float2(0.5,0.5);
          r19.zw = floor(r19.xy);
          r19.xy = r19.xy + -r19.zw;
          r18.xy = shadowMapSizeAndInvSize.zz * r19.zw;
          r20.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(-2,-2)).xyzw;
          r21.xyzw = float4(1,2,3,5) + -r19.xxxx;
          r22.xyzw = r21.xyxy * r20.wzxy;
          r19.zw = r22.xz + r22.yw;
          r22.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(0,-2)).xyzw;
          r19.zw = r22.zy * float2(2,2) + r19.zw;
          r19.zw = r22.wx * float2(2,2) + r19.zw;
          r23.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(2,-2)).xyzw;
          r24.xyzw = float4(1,4,3,2) + r19.xxxx;
          r15.w = r23.y * r19.x;
          r19.zw = r23.zy * r19.xx + r19.zw;
          r19.zw = r23.wx * r24.xx + r19.zw;
          r25.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(-2,0)).xyzw;
          r16.y = -r19.x * 2 + 2;
          r20.zw = r25.wx * r16.yy;
          r17.w = r19.x * -2 + 4;
          r20.zw = r25.zy * r17.ww + r20.zw;
          r17.w = r20.y * r21.z + r20.z;
          r17.w = r20.x * r16.y + r17.w;
          r18.w = r25.z * r21.z + r20.w;
          r18.w = r25.w * r16.y + r18.w;
          r20.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y).xyzw;
          r17.w = r20.z * r24.y + r17.w;
          r17.w = r20.w * r21.w + r17.w;
          r18.w = r20.y * r24.y + r18.w;
          r18.w = r20.x * r21.w + r18.w;
          r22.zw = float2(4,1) + -r19.xy;
          r17.w = r22.y * r24.z + r17.w;
          r17.w = r22.x * r22.z + r17.w;
          r18.w = r20.z * r24.z + r18.w;
          r18.w = r20.w * r22.z + r18.w;
          r26.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(2,0)).xyzw;
          r20.z = r19.x * 2 + 2;
          r20.w = dot(r26.zz, r19.xx);
          r17.w = r20.w + r17.w;
          r17.w = r26.w * r20.z + r17.w;
          r21.w = dot(r26.yy, r19.xx);
          r18.w = r21.w + r18.w;
          r18.w = r26.x * r20.z + r18.w;
          r15.w = r15.w * 2 + r17.w;
          r22.x = r23.x * r24.w + r15.w;
          r15.w = r20.w + r18.w;
          r22.y = r26.w * r24.w + r15.w;
          r19.zw = r22.xy + r19.zw;
          r23.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(-2,2)).xyzw;
          r27.xyzw = r23.wzxy * r21.xyxy;
          r20.zw = r27.xz + r27.yw;
          r15.w = r25.y * r21.z + r20.z;
          r15.w = r25.x * r16.y + r15.w;
          r17.w = r23.z * r21.z + r20.w;
          r16.y = r23.w * r16.y + r17.w;
          r23.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(0,2)).xyzw;
          r15.w = r23.z * 2 + r15.w;
          r15.w = r23.w * 2 + r15.w;
          r16.y = r23.y * 2 + r16.y;
          r16.y = r23.x * 2 + r16.y;
          r15.w = r20.y * r24.z + r15.w;
          r15.w = r20.x * r22.z + r15.w;
          r16.y = r23.z * r24.z + r16.y;
          r16.y = r23.w * r22.z + r16.y;
          r18.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r18.xyz, r15.y, int2(2,2)).xyzw;
          r17.w = r18.z * r19.x;
          r15.w = r18.z * r19.x + r15.w;
          r15.w = r18.w * r24.x + r15.w;
          r16.y = r18.y * r19.x + r16.y;
          r16.y = r18.x * r24.x + r16.y;
          r15.w = r21.w + r15.w;
          r18.x = r26.x * r24.w + r15.w;
          r15.w = r17.w * 2 + r16.y;
          r18.y = r18.w * r24.w + r15.w;
          r18.xy = r19.zw + r18.xy;
          r15.w = r18.y * r19.y;
          r15.w = r18.x * r22.w + r15.w;
          r15.w = saturate(0.0163934417 * r15.w);
        } else {
          r14.z = (uint)r12.w;
          r12.w = g_shadowmapTexture.SampleCmpLevelZero(g_shadowmapSampler_s_s, r14.xyz, r15.y).x;
          r14.x = cmp(r15.y < 1);
          r15.w = r14.x ? r12.w : 1;
        }
        r12.w = -1 + r15.w;
        r12.w = g_lightInfoPunctualShadow[r13.w].baseLight.shadowDimmer * r12.w;
        r12.w = r15.x * r12.w + 1;
        r12.w = r15.z ? r12.w : 1;
        r14.w = r14.w * r12.w;
      }
    }
    r13.xyz = r16.xzw * r14.www + r13.xyz;
    r12.xyz = r17.xyz * r14.www + r12.xyz;
    r11.w = (int)r11.w + 1;
  }
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g2.xxxx
  r1.w = (int)r1.w + (int)r4.w;
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g3.xxxx
  r5.w = (int)r1.w + (int)r4.w;
  r10.y = 1.5 * r1.x;
  r10.y = min(1, r10.y);
  r10.y = -r10.y * 7 + 8;
  r11.z = 0;
  r14.z = 0;
  r15.zw = float2(1,-1);
  r16.yz = float2(0,0);
  r17.yz = float2(0,0);
  r18.zw = float2(1,-1);
  r19.xz = float2(0,0);
  r20.xz = float2(0,0);
  r21.xyz = r12.xyz;
  r22.xyz = r13.xyz;
  r10.z = r1.w;
  while (true) {
    r10.w = cmp((uint)r10.z >= (uint)r5.w);
    if (r10.w != 0) break;
    r10.w = g_lightIndexInput[r10.z].g_lightIndexInput_uint;
    r10.w = (int)r10.w * 9;
    r11.w = (uint13)g_lightInfoArea[r10.w].areaLight.areaLightType;
    r12.w = cmp((int)r11.w == 2);
    if (r12.w != 0) {
      r23.xyz = g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz * float3(0.5,0.5,0.5);
      r24.xyz = -r23.xyz * g_lightInfoArea[r10.w].areaLight.lightRadius1 + g_lightInfoArea[r10.w].baseLight.pos.xyz;
      r23.xyz = r23.xyz * g_lightInfoArea[r10.w].areaLight.lightRadius1 + g_lightInfoArea[r10.w].baseLight.pos.xyz;
      r25.xyz = r23.xyz + -r24.xyz;
      r26.xyz = r5.xyz * r2.xxx + -r24.xyz;
      r12.w = dot(r26.xyz, r25.xyz);
      r13.w = dot(r25.xyz, r25.xyz);
      r12.w = r12.w / r13.w;
      r26.xyz = r12.www * r25.yzx + r24.yzx;
      r26.xyz = -r5.yzx * r2.xxx + r26.xyz;
      r13.w = dot(r26.xyz, r26.xyz);
      r13.w = rsqrt(r13.w);
      r26.xyz = r26.xyz * r13.www;
      r27.xyz = g_lightInfoArea[r10.w].baseLight.matrixLeft.zxy * r26.xyz;
      r26.xyz = g_lightInfoArea[r10.w].baseLight.matrixLeft.yzx * r26.yzx + -r27.xyz;
      r13.w = g_lightInfoArea[r10.w].areaLight.lightRadius1 * 0.5;
      r27.xyz = -g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz * r13.www + g_lightInfoArea[r10.w].baseLight.pos.xyz;
      r28.xyz = g_lightInfoArea[r10.w].areaLight.lightRadius0 * r26.xyz + r27.xyz;
      r27.xyz = -g_lightInfoArea[r10.w].areaLight.lightRadius0 * r26.xyz + r27.xyz;
      r29.xyz = g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz * r13.www + g_lightInfoArea[r10.w].baseLight.pos.xyz;
      r30.xyz = -g_lightInfoArea[r10.w].areaLight.lightRadius0 * r26.xyz + r29.xyz;
      r26.xyz = g_lightInfoArea[r10.w].areaLight.lightRadius0 * r26.xyz + r29.xyz;
      r28.xyz = -r5.xyz * r2.xxx + r28.xyz;
      r27.xyz = -r5.xyz * r2.xxx + r27.xyz;
      r29.xyz = -r5.xyz * r2.xxx + r30.xyz;
      r26.xyz = -r5.xyz * r2.xxx + r26.xyz;
      r30.xyz = r28.zxy * r27.yzx;
      r30.xyz = r28.yzx * r27.zxy + -r30.xyz;
      r13.w = dot(r30.xyz, r30.xyz);
      r13.w = rsqrt(r13.w);
      r30.xyz = r30.xyz * r13.www;
      r31.xyz = r29.yzx * r27.zxy;
      r31.xyz = r27.yzx * r29.zxy + -r31.xyz;
      r13.w = dot(r31.xyz, r31.xyz);
      r13.w = rsqrt(r13.w);
      r31.xyz = r31.xyz * r13.www;
      r32.xyz = r29.zxy * r26.yzx;
      r32.xyz = r29.yzx * r26.zxy + -r32.xyz;
      r13.w = dot(r32.xyz, r32.xyz);
      r13.w = rsqrt(r13.w);
      r32.xyz = r32.xyz * r13.www;
      r33.xyz = r26.zxy * r28.yzx;
      r33.xyz = r26.yzx * r28.zxy + -r33.xyz;
      r13.w = dot(r33.xyz, r33.xyz);
      r13.w = rsqrt(r13.w);
      r33.xyz = r33.xyz * r13.www;
      r13.w = dot(-r30.xyz, r31.xyz);
      r14.w = abs(r13.w) * abs(r13.w);
      r16.w = r14.w * abs(r13.w);
      r17.w = abs(r13.w) * -0.212114394 + 1.57072878;
      r14.w = r14.w * 0.0742610022 + r17.w;
      r14.w = r16.w * -0.0187292993 + r14.w;
      r16.w = 1 + -abs(r13.w);
      r16.w = sqrt(r16.w);
      r17.w = r16.w * r14.w;
      r13.w = cmp(r13.w >= 0);
      r14.w = -r16.w * r14.w + 3.14159274;
      r13.w = r13.w ? r17.w : r14.w;
      r14.w = dot(-r31.xyz, r32.xyz);
      r16.w = abs(r14.w) * abs(r14.w);
      r17.w = r16.w * abs(r14.w);
      r19.w = abs(r14.w) * -0.212114394 + 1.57072878;
      r16.w = r16.w * 0.0742610022 + r19.w;
      r16.w = r17.w * -0.0187292993 + r16.w;
      r17.w = 1 + -abs(r14.w);
      r17.w = sqrt(r17.w);
      r19.w = r17.w * r16.w;
      r14.w = cmp(r14.w >= 0);
      r16.w = -r17.w * r16.w + 3.14159274;
      r14.w = r14.w ? r19.w : r16.w;
      r16.w = dot(-r32.xyz, r33.xyz);
      r17.w = abs(r16.w) * abs(r16.w);
      r19.w = r17.w * abs(r16.w);
      r20.w = abs(r16.w) * -0.212114394 + 1.57072878;
      r17.w = r17.w * 0.0742610022 + r20.w;
      r17.w = r19.w * -0.0187292993 + r17.w;
      r19.w = 1 + -abs(r16.w);
      r19.w = sqrt(r19.w);
      r20.w = r19.w * r17.w;
      r16.w = cmp(r16.w >= 0);
      r17.w = -r19.w * r17.w + 3.14159274;
      r16.w = r16.w ? r20.w : r17.w;
      r17.w = dot(-r33.xyz, r30.xyz);
      r19.w = abs(r17.w) * abs(r17.w);
      r20.w = r19.w * abs(r17.w);
      r21.w = abs(r17.w) * -0.212114394 + 1.57072878;
      r19.w = r19.w * 0.0742610022 + r21.w;
      r19.w = r20.w * -0.0187292993 + r19.w;
      r20.w = 1 + -abs(r17.w);
      r20.w = sqrt(r20.w);
      r21.w = r20.w * r19.w;
      r17.w = cmp(r17.w >= 0);
      r19.w = -r20.w * r19.w + 3.14159274;
      r17.w = r17.w ? r21.w : r19.w;
      r13.w = r14.w + r13.w;
      r13.w = r13.w + r16.w;
      r13.w = r13.w + r17.w;
      r13.w = -6.28318548 + r13.w;
      r13.w = 0.200000003 * r13.w;
      r14.w = dot(r28.xyz, r28.xyz);
      r14.w = rsqrt(r14.w);
      r28.xyz = r28.xyz * r14.www;
      r14.w = saturate(dot(r28.xyz, r6.xyz));
      r16.w = dot(r27.xyz, r27.xyz);
      r16.w = rsqrt(r16.w);
      r27.xyz = r27.xyz * r16.www;
      r16.w = saturate(dot(r27.xyz, r6.xyz));
      r14.w = r16.w + r14.w;
      r16.w = dot(r29.xyz, r29.xyz);
      r16.w = rsqrt(r16.w);
      r27.xyz = r29.xyz * r16.www;
      r16.w = saturate(dot(r27.xyz, r6.xyz));
      r14.w = r16.w + r14.w;
      r16.w = dot(r26.xyz, r26.xyz);
      r16.w = rsqrt(r16.w);
      r26.xyz = r26.xyz * r16.www;
      r16.w = saturate(dot(r26.xyz, r6.xyz));
      r14.w = r16.w + r14.w;
      r26.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
      r16.w = dot(r26.xyz, r26.xyz);
      r17.w = rsqrt(r16.w);
      r26.xyz = r26.xyz * r17.www;
      r17.w = saturate(dot(r26.xyz, r6.xyz));
      r14.w = r17.w + r14.w;
      r12.w = saturate(r12.w);
      r25.xyz = r12.www * r25.xyz + r24.xyz;
      r25.xyz = -r5.xyz * r2.xxx + r25.xyz;
      r12.w = dot(r25.xyz, r25.xyz);
      r17.w = rsqrt(r12.w);
      r25.xyz = r25.xyz * r17.www;
      r17.w = g_lightInfoArea[r10.w].areaLight.lightRadius0 * g_lightInfoArea[r10.w].areaLight.lightRadius0;
      r19.w = saturate(dot(r25.xyz, r6.xyz));
      r20.w = 3.14159274 * r19.w;
      r12.w = max(r17.w, r12.w);
      r12.w = r17.w / r12.w;
      r12.w = r20.w * r12.w;
      r12.w = r13.w * r14.w + r12.w;
      r13.w = g_lightInfoArea[r10.w].baseLight.invSqrAttenuationRadius * r16.w;
      r13.w = -r13.w * r13.w + 1;
      r13.w = max(0, r13.w);
      r13.w = r13.w * r13.w;
      r12.w = r13.w * r12.w;
      r13.w = cmp(0 < r12.w);
      if (r13.w != 0) {
        r24.xyz = -r5.xyz * r2.xxx + r24.xyz;
        r23.xyz = -r5.xyz * r2.xxx + r23.xyz;
        r23.xyz = r23.xyz + -r24.xyz;
        r13.w = dot(r23.xyz, r23.xyz);
        r14.w = dot(r9.xyz, r23.xyz);
        r16.w = dot(r9.xyz, r24.xyz);
        r17.w = dot(r24.xyz, r23.xyz);
        r16.w = r16.w * r14.w + -r17.w;
        r13.w = -r14.w * r14.w + r13.w;
        r13.w = saturate(r16.w / r13.w);
        r23.xyz = r13.www * r23.xyz + r24.xyz;
        r13.w = dot(r23.xyz, r9.xyz);
        r24.xyz = r13.www * r9.xyz + -r23.xyz;
        r13.w = dot(r24.xyz, r24.xyz);
        r13.w = sqrt(r13.w);
        r13.w = saturate(g_lightInfoArea[r10.w].areaLight.lightRadius0 / r13.w);
        r23.xyz = r24.xyz * r13.www + r23.xyz;
        r13.w = dot(r23.xyz, r23.xyz);
        r14.w = sqrt(r13.w);
        r13.w = rsqrt(r13.w);
        r23.xyz = r23.xyz * r13.www;
        r13.w = r14.w + r14.w;
        r13.w = g_lightInfoArea[r10.w].areaLight.lightRadius0 / r13.w;
        r13.w = saturate(r13.w + r1.x);
        r13.w = r1.x / r13.w;
        r24.xyz = -r7.xyz * r2.yyy + r23.xyz;
        r14.w = dot(r24.xyz, r24.xyz);
        r14.w = rsqrt(r14.w);
        r24.xyz = r24.xyz * r14.www;
        r26.xyz = -r7.xyz * r2.yyy + r25.xyz;
        r14.w = dot(r26.xyz, r26.xyz);
        r14.w = rsqrt(r14.w);
        r26.xyz = r26.xyz * r14.www;
        r14.w = saturate(dot(r23.xyz, r24.xyz));
        r16.w = saturate(dot(r25.xyz, r26.xyz));
        r17.w = saturate(dot(r6.xyz, r24.xyz));
        r20.w = saturate(dot(r6.xyz, r23.xyz));
        r14.w = 1 + -r14.w;
        r21.w = r14.w * r14.w;
        r21.w = r21.w * r21.w;
        r14.w = r21.w * r14.w;
        r23.xyz = r8.xyz * r14.www + r4.xyz;
        r14.w = -r20.w * r6.w + r20.w;
        r14.w = r14.w * r20.w + r6.w;
        r14.w = sqrt(r14.w);
        r14.w = r14.w * r2.z;
        r14.w = r20.w * r8.w + r14.w;
        r14.w = 0.5 / r14.w;
        r20.w = r17.w * r6.w + -r17.w;
        r17.w = r20.w * r17.w + 1;
        r17.w = r17.w * r17.w;
        r17.w = r6.w / r17.w;
        r14.w = r17.w * r14.w;
        r13.w = r14.w * r13.w;
        r23.xyz = r23.xyz * r13.www;
        r13.w = r16.w * r16.w;
        r13.w = dot(r13.ww, r3.xx);
        r13.w = r3.x * 0.5 + r13.w;
        r14.w = 1 + -r19.w;
        r16.w = r14.w * r14.w;
        r16.w = r16.w * r16.w;
        r14.w = r16.w * r14.w;
        r13.w = -1 + r13.w;
        r14.w = r13.w * r14.w + 1;
        r13.w = r13.w * r10.x + 1;
        r13.w = r14.w * r13.w;
        r13.w = r13.w * r9.w;
        r14.w = g_lightInfoArea[r10.w].baseLight.diffuseScale * r12.w;
        r24.xyz = g_lightInfoArea[r10.w].baseLight.color.xyz * r14.www;
        r24.xyz = r24.xyz * r13.www;
        r12.w = g_lightInfoArea[r10.w].baseLight.specularScale * r12.w;
        r25.xyz = g_lightInfoArea[r10.w].baseLight.color.xyz * r12.www;
        r23.xyz = r25.xyz * r23.xyz;
      } else {
        r24.xyz = float3(0,0,0);
        r23.xyz = float3(0,0,0);
      }
    } else {
      r12.w = cmp((int)r11.w == 5);
      if (r12.w != 0) {
        r25.xyz = r5.xyz * r2.xxx + -g_lightInfoArea[r10.w].baseLight.pos.xyz;
        r12.w = dot(r25.xyz, -g_lightInfoArea[r10.w].baseLight.matrixForward.xyz);
        r12.w = cmp(0 < r12.w);
        if (r12.w != 0) {
          r25.xy = g_lightInfoArea[r10.w].areaLight.lightRadius0 * float2(0.5,0.5);
          r26.xyz = g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz * -r25.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
          r27.xyz = g_lightInfoArea[r10.w].baseLight.matrixUp.xyz * r25.yyy + r26.xyz;
          r26.xyz = g_lightInfoArea[r10.w].baseLight.matrixUp.xyz * -r25.yyy + r26.xyz;
          r28.xyz = g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz * r25.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
          r29.xyz = g_lightInfoArea[r10.w].baseLight.matrixUp.xyz * -r25.yyy + r28.xyz;
          r28.xyz = g_lightInfoArea[r10.w].baseLight.matrixUp.xyz * r25.yyy + r28.xyz;
          r27.xyz = -r5.xyz * r2.xxx + r27.xyz;
          r26.xyz = -r5.xyz * r2.xxx + r26.xyz;
          r29.xyz = -r5.xyz * r2.xxx + r29.xyz;
          r28.xyz = -r5.xyz * r2.xxx + r28.xyz;
          r30.xyz = r27.zxy * r26.yzx;
          r30.xyz = r27.yzx * r26.zxy + -r30.xyz;
          r12.w = dot(r30.xyz, r30.xyz);
          r12.w = rsqrt(r12.w);
          r30.xyz = r30.xyz * r12.www;
          r31.xyz = r29.yzx * r26.zxy;
          r31.xyz = r26.yzx * r29.zxy + -r31.xyz;
          r12.w = dot(r31.xyz, r31.xyz);
          r12.w = rsqrt(r12.w);
          r31.xyz = r31.xyz * r12.www;
          r32.xyz = r29.zxy * r28.yzx;
          r32.xyz = r29.yzx * r28.zxy + -r32.xyz;
          r12.w = dot(r32.xyz, r32.xyz);
          r12.w = rsqrt(r12.w);
          r32.xyz = r32.xyz * r12.www;
          r33.xyz = r28.zxy * r27.yzx;
          r33.xyz = r28.yzx * r27.zxy + -r33.xyz;
          r12.w = dot(r33.xyz, r33.xyz);
          r12.w = rsqrt(r12.w);
          r33.xyz = r33.xyz * r12.www;
          r12.w = dot(-r30.xyz, r31.xyz);
          r13.w = abs(r12.w) * abs(r12.w);
          r14.w = r13.w * abs(r12.w);
          r16.w = abs(r12.w) * -0.212114394 + 1.57072878;
          r13.w = r13.w * 0.0742610022 + r16.w;
          r13.w = r14.w * -0.0187292993 + r13.w;
          r14.w = 1 + -abs(r12.w);
          r14.w = sqrt(r14.w);
          r16.w = r14.w * r13.w;
          r12.w = cmp(r12.w >= 0);
          r13.w = -r14.w * r13.w + 3.14159274;
          r12.w = r12.w ? r16.w : r13.w;
          r13.w = dot(-r31.xyz, r32.xyz);
          r14.w = abs(r13.w) * abs(r13.w);
          r16.w = r14.w * abs(r13.w);
          r17.w = abs(r13.w) * -0.212114394 + 1.57072878;
          r14.w = r14.w * 0.0742610022 + r17.w;
          r14.w = r16.w * -0.0187292993 + r14.w;
          r16.w = 1 + -abs(r13.w);
          r16.w = sqrt(r16.w);
          r17.w = r16.w * r14.w;
          r13.w = cmp(r13.w >= 0);
          r14.w = -r16.w * r14.w + 3.14159274;
          r13.w = r13.w ? r17.w : r14.w;
          r14.w = dot(-r32.xyz, r33.xyz);
          r16.w = abs(r14.w) * abs(r14.w);
          r17.w = r16.w * abs(r14.w);
          r19.w = abs(r14.w) * -0.212114394 + 1.57072878;
          r16.w = r16.w * 0.0742610022 + r19.w;
          r16.w = r17.w * -0.0187292993 + r16.w;
          r17.w = 1 + -abs(r14.w);
          r17.w = sqrt(r17.w);
          r19.w = r17.w * r16.w;
          r14.w = cmp(r14.w >= 0);
          r16.w = -r17.w * r16.w + 3.14159274;
          r14.w = r14.w ? r19.w : r16.w;
          r16.w = dot(-r33.xyz, r30.xyz);
          r17.w = abs(r16.w) * abs(r16.w);
          r19.w = r17.w * abs(r16.w);
          r20.w = abs(r16.w) * -0.212114394 + 1.57072878;
          r17.w = r17.w * 0.0742610022 + r20.w;
          r17.w = r19.w * -0.0187292993 + r17.w;
          r19.w = 1 + -abs(r16.w);
          r19.w = sqrt(r19.w);
          r20.w = r19.w * r17.w;
          r16.w = cmp(r16.w >= 0);
          r17.w = -r19.w * r17.w + 3.14159274;
          r16.w = r16.w ? r20.w : r17.w;
          r12.w = r13.w + r12.w;
          r12.w = r12.w + r14.w;
          r12.w = r12.w + r16.w;
          r12.w = -6.28318548 + r12.w;
          r12.w = 0.200000003 * r12.w;
          r13.w = dot(r27.xyz, r27.xyz);
          r13.w = rsqrt(r13.w);
          r27.xyz = r27.xyz * r13.www;
          r13.w = saturate(dot(r27.xyz, r6.xyz));
          r14.w = dot(r26.xyz, r26.xyz);
          r14.w = rsqrt(r14.w);
          r26.xyz = r26.xyz * r14.www;
          r14.w = saturate(dot(r26.xyz, r6.xyz));
          r13.w = r14.w + r13.w;
          r14.w = dot(r29.xyz, r29.xyz);
          r14.w = rsqrt(r14.w);
          r26.xyz = r29.xyz * r14.www;
          r14.w = saturate(dot(r26.xyz, r6.xyz));
          r13.w = r14.w + r13.w;
          r14.w = dot(r28.xyz, r28.xyz);
          r14.w = rsqrt(r14.w);
          r26.xyz = r28.xyz * r14.www;
          r14.w = saturate(dot(r26.xyz, r6.xyz));
          r13.w = r14.w + r13.w;
          r26.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
          r14.w = dot(r26.xyz, r26.xyz);
          r14.w = rsqrt(r14.w);
          r27.xyz = r26.xyz * r14.www;
          r14.w = saturate(dot(r27.xyz, r6.xyz));
          r13.w = r14.w + r13.w;
          r12.w = r13.w * r12.w;
          r13.w = saturate(dot(r6.xyz, g_lightInfoArea[r10.w].baseLight.matrixForward.xyz));
          r13.w = 9.99999975e-06 + r13.w;
          r27.xyz = r6.xyz * r13.www + g_lightInfoArea[r10.w].baseLight.matrixForward.xyz;
          r14.w = dot(r27.xyz, r27.xyz);
          r14.w = rsqrt(r14.w);
          r28.xyz = g_lightInfoArea[r10.w].baseLight.matrixForward.xyz * r13.www + r6.xyz;
          r13.w = dot(r28.xyz, r28.xyz);
          r13.w = rsqrt(r13.w);
          r28.xyz = r28.xyz * r13.www;
          r27.xyz = r27.xyz * r14.www + r28.xyz;
          r27.xyz = float3(0.5,0.5,0.5) * r27.xyz;
          r13.w = dot(-g_lightInfoArea[r10.w].baseLight.matrixForward.xyz, r26.xyz);
          r14.w = dot(-g_lightInfoArea[r10.w].baseLight.matrixForward.xyz, r27.xyz);
          r13.w = r13.w / r14.w;
          r26.xyz = r27.xyz * r13.www + r7.xyz;
          r26.xyz = -g_lightInfoArea[r10.w].baseLight.pos.xyz + r26.xyz;
          r27.x = dot(r26.xyz, g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz);
          r27.y = dot(r26.xyz, g_lightInfoArea[r10.w].baseLight.matrixUp.xyz);
          r25.zw = max(r27.xy, -r25.xy);
          r25.xy = min(r25.zw, r25.xy);
          r25.xzw = r25.xxx * g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz + g_lightInfoArea[r10.w].baseLight.pos.xyz;
          r25.xyz = r25.yyy * g_lightInfoArea[r10.w].baseLight.matrixUp.xyz + r25.xzw;
          r25.xyz = -r5.xyz * r2.xxx + r25.xyz;
          r13.w = dot(r25.xyz, r25.xyz);
          r13.w = rsqrt(r13.w);
          r25.xyz = r25.xyz * r13.www;
        } else {
          r25.xyz = float3(1,0,0);
          r12.w = 0;
        }
        r26.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
        r13.w = dot(r26.xyz, r26.xyz);
        r13.w = g_lightInfoArea[r10.w].baseLight.invSqrAttenuationRadius * r13.w;
        r13.w = -r13.w * r13.w + 1;
        r13.w = max(0, r13.w);
        r13.w = r13.w * r13.w;
        r12.w = r13.w * r12.w;
        r13.w = cmp(0 < r12.w);
        if (r13.w != 0) {
          r27.xy = g_lightInfoArea[r10.w].areaLight.lightRadius0 * float2(0.5,0.5);
          r28.x = dot(r9.xyz, g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz);
          r28.y = dot(r9.xyz, g_lightInfoArea[r10.w].baseLight.matrixUp.xyz);
          r28.z = dot(r9.xyz, -g_lightInfoArea[r10.w].baseLight.matrixForward.xyz);
          r29.x = dot(r26.xyz, g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz);
          r29.y = dot(r26.xyz, g_lightInfoArea[r10.w].baseLight.matrixUp.xyz);
          r29.z = dot(r26.xyz, -g_lightInfoArea[r10.w].baseLight.matrixForward.xyz);
          r13.w = r29.z / r28.z;
          r30.xyz = r28.xyz * r13.www;
          r27.zw = r28.xy * r13.ww + -r29.xy;
          r13.w = cmp(0 < r13.w);
          r27.yz = cmp(r27.xy >= abs(r27.zw));
          r13.w = r13.w ? r27.y : 0;
          r13.w = r27.z ? r13.w : 0;
          if (r13.w == 0) {
            r11.xy = g_lightInfoArea[r10.w].areaLight.lightRadius0 * float2(-0.5,-0.5);
            r31.xyz = r29.xyz + r11.xyz;
            r14.xy = g_lightInfoArea[r10.w].areaLight.lightRadius0 * float2(0.5,0.5);
            r32.xyz = r29.xyz + r14.xyz;
            r31.w = r32.x;
            r11.xy = r31.xw * r28.xx;
            r32.w = r31.y;
            r14.xy = r32.wy * r28.yy;
            r27.yz = r29.zz * r28.zz;
            r33.xy = r31.xw * r31.xw;
            r33.zw = r29.zz * r29.zz;
            r34.xy = r32.wy * r32.wy + r33.zw;
            r34.zw = r34.xy * r28.xx;
            r14.xy = -r14.xy * r31.xw + r34.zw;
            r14.xy = -r27.yz * r31.xw + r14.xy;
            r34.zw = r28.yy * r32.wy + r27.yz;
            r27.xw = r34.zw * r27.xx;
            r27.xw = r27.xw + r27.xw;
            r35.xy = r14.xy / r27.xw;
            r35.z = -r35.y;
            r15.xy = saturate(r35.xz);
            r14.xy = g_lightInfoArea[r10.w].areaLight.lightRadius0 * r15.zy;
            r14.xy = r14.xy * r15.xw + r31.xw;
            r27.xw = r28.xx * r14.xy + r34.zw;
            r14.xy = r14.xy * r14.xy + r34.xy;
            r14.xy = sqrt(r14.xy);
            r14.xy = r27.xw / r14.xy;
            r13.w = cmp(r14.x < r14.y);
            if (r13.w != 0) {
              r16.x = g_lightInfoArea[r10.w].areaLight.lightRadius0;
              r30.xyz = -r16.xyz * r15.yyy + r32.xyz;
              r14.x = r14.y;
            } else {
              r17.x = g_lightInfoArea[r10.w].areaLight.lightRadius0;
              r30.xyz = r17.xyz * r15.xxx + r31.xyz;
            }
            r11.xy = r11.xy * r32.wy;
            r11.xy = r28.yy * r33.xy + -r11.xy;
            r11.xy = -r27.yz * r32.wy + r11.xy;
            r11.xy = r28.yy * r33.zw + r11.xy;
            r14.yw = r28.xx * r31.xw + r27.yz;
            r15.xy = g_lightInfoArea[r10.w].areaLight.lightRadius1 * r14.yw;
            r27.xy = r11.xy / r15.xy;
            r27.z = -r27.y;
            r18.xy = saturate(r27.xz);
            r11.xy = g_lightInfoArea[r10.w].areaLight.lightRadius1 * r18.zy;
            r11.xy = r11.xy * r18.xw + r32.wy;
            r14.yw = r28.yy * r11.xy + r14.yw;
            r15.xy = r31.xw * r31.xw + r33.zw;
            r11.xy = r11.xy * r11.xy + r15.xy;
            r11.xy = sqrt(r11.xy);
            r11.xy = r14.yw / r11.xy;
            r11.x = cmp(r14.x < r11.x);
            if (r11.x != 0) {
              r19.y = g_lightInfoArea[r10.w].areaLight.lightRadius1;
              r30.xyz = r19.xyz * r18.xxx + r31.xyz;
            } else {
              r11.x = cmp(r14.x < r11.y);
              if (r11.x != 0) {
                r20.y = g_lightInfoArea[r10.w].areaLight.lightRadius1;
                r30.xyz = -r20.xyz * r18.yyy + r32.xyz;
              }
            }
          }
          r11.x = dot(r30.xyz, r30.xyz);
          r11.x = rsqrt(r11.x);
          r14.xyw = r30.xyz * r11.xxx;
          r11.x = dot(r28.xyz, r28.xyz);
          r11.x = rsqrt(r11.x);
          r27.xyz = r28.xyz * r11.xxx;
          r11.x = dot(r14.xyw, r27.xyz);
          r11.x = saturate(r11.x * 1.66600001 + -0.5);
          r14.xyw = r30.xyz + -r29.xyz;
          r26.xyz = r14.xxx * g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz + r26.xyz;
          r26.xyz = r14.yyy * g_lightInfoArea[r10.w].baseLight.matrixUp.xyz + r26.xyz;
          r14.xyw = r14.www * -g_lightInfoArea[r10.w].baseLight.matrixForward.xyz + r26.xyz;
          r14.xyw = r14.xyw + -r25.xyz;
          r14.xyw = r11.xxx * r14.xyw + r25.xyz;
          r11.x = dot(r14.xyw, r14.xyw);
          r11.y = sqrt(r11.x);
          r11.y = 1 / r11.y;
          r11.x = rsqrt(r11.x);
          r14.xyw = r14.xyw * r11.xxx;
          r11.x = g_lightInfoArea[r10.w].areaLight.lightRadius0 + g_lightInfoArea[r10.w].areaLight.lightRadius1;
          r11.x = saturate(r11.x * r11.y + r1.x);
          r11.x = r1.x / r11.x;
          r11.x = r11.x * r11.x;
          r11.x = r11.x * r10.y;
          r26.xyz = -r7.xyz * r2.yyy + r14.xyw;
          r11.y = dot(r26.xyz, r26.xyz);
          r11.y = rsqrt(r11.y);
          r26.xyz = r26.xyz * r11.yyy;
          r27.xyz = -r7.xyz * r2.yyy + r25.xyz;
          r11.y = dot(r27.xyz, r27.xyz);
          r11.y = rsqrt(r11.y);
          r27.xyz = r27.xyz * r11.yyy;
          r11.y = saturate(dot(r14.xyw, r26.xyz));
          r13.w = saturate(dot(r25.xyz, r27.xyz));
          r15.x = saturate(dot(r6.xyz, r26.xyz));
          r14.x = saturate(dot(r6.xyz, r14.xyw));
          r14.y = saturate(dot(r6.xyz, r25.xyz));
          r11.y = 1 + -r11.y;
          r14.w = r11.y * r11.y;
          r14.w = r14.w * r14.w;
          r11.y = r14.w * r11.y;
          r25.xyz = r8.xyz * r11.yyy + r4.xyz;
          r11.y = -r14.x * r6.w + r14.x;
          r11.y = r11.y * r14.x + r6.w;
          r11.y = sqrt(r11.y);
          r11.y = r11.y * r2.z;
          r11.y = r14.x * r8.w + r11.y;
          r11.y = 0.5 / r11.y;
          r14.x = r15.x * r6.w + -r15.x;
          r14.x = r14.x * r15.x + 1;
          r14.x = r14.x * r14.x;
          r14.x = r6.w / r14.x;
          r11.y = r14.x * r11.y;
          r11.x = r11.y * r11.x;
          r25.xyz = r25.xyz * r11.xxx;
          r11.x = r13.w * r13.w;
          r11.x = dot(r11.xx, r3.xx);
          r11.x = r3.x * 0.5 + r11.x;
          r11.y = 1 + -r14.y;
          r13.w = r11.y * r11.y;
          r13.w = r13.w * r13.w;
          r11.y = r13.w * r11.y;
          r11.x = -1 + r11.x;
          r11.y = r11.x * r11.y + 1;
          r11.x = r11.x * r10.x + 1;
          r11.x = r11.y * r11.x;
          r11.x = r11.x * r9.w;
          r11.y = g_lightInfoArea[r10.w].baseLight.diffuseScale * r12.w;
          r14.xyw = g_lightInfoArea[r10.w].baseLight.color.xyz * r11.yyy;
          r24.xyz = r14.xyw * r11.xxx;
          r11.x = g_lightInfoArea[r10.w].baseLight.specularScale * r12.w;
          r14.xyw = g_lightInfoArea[r10.w].baseLight.color.xyz * r11.xxx;
          r23.xyz = r25.xyz * r14.xyw;
        } else {
          r24.xyz = float3(0,0,0);
          r23.xyz = float3(0,0,0);
        }
      } else {
        r11.x = cmp((int)r11.w == 4);
        if (r11.x != 0) {
          r11.xyw = -r5.xyz * r2.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
          r12.w = dot(r11.xyw, r11.xyw);
          r13.w = rsqrt(r12.w);
          r14.xyw = r13.www * r11.xyw;
          r13.w = dot(r6.xyz, r14.xyw);
          r15.x = g_lightInfoArea[r10.w].areaLight.lightRadius0 * g_lightInfoArea[r10.w].areaLight.lightRadius0;
          r15.y = max(r15.x, r12.w);
          r15.y = g_lightInfoArea[r10.w].areaLight.lightRadius0 * g_lightInfoArea[r10.w].areaLight.lightRadius0 + r15.y;
          r15.x = r15.x / r15.y;
          r16.xw = r15.xx * float2(-0.690576434,-10.4827538) + float2(0.559636116,18.2588902);
          r15.y = r16.w * r15.x + -11.7109194;
          r15.y = r15.y * r15.x + 4.99786425;
          r16.w = r13.w * 0.5 + 0.5;
          r17.x = log2(r16.w);
          r15.y = r17.x * r15.y;
          r15.y = exp2(r15.y);
          r17.x = saturate(r13.w);
          r13.w = r16.x * r13.w;
          r16.x = r16.w + -r15.y;
          r13.w = r13.w * r16.x + r15.y;
          r13.w = max(r17.x, r13.w);
          r13.w = r13.w * r15.x;
          r13.w = 3.14159274 * r13.w;
          r15.x = saturate(dot(-g_lightInfoArea[r10.w].baseLight.matrixForward.xyz, -r14.xyw));
          r13.w = r15.x * r13.w;
          r25.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r10.w].areaLight.virtualPos.xyz;
          r15.x = dot(r25.xyz, r25.xyz);
          r15.x = rsqrt(r15.x);
          r25.xyz = r25.xyz * r15.xxx;
          r15.x = dot(g_lightInfoArea[r10.w].baseLight.matrixForward.xyz, r25.xyz);
          r15.x = saturate(r15.x * g_lightInfoArea[r10.w].baseLight.angleScale + g_lightInfoArea[r10.w].baseLight.angleOffset);
          r15.x = r15.x * r15.x;
          r13.w = r15.x * r13.w;
          r12.w = g_lightInfoArea[r10.w].baseLight.invSqrAttenuationRadius * r12.w;
          r12.w = -r12.w * r12.w + 1;
          r12.w = max(0, r12.w);
          r12.w = r12.w * r12.w;
          r12.w = r13.w * r12.w;
          r13.w = cmp(0 < r12.w);
          if (r13.w != 0) {
            r13.w = saturate(dot(r9.xyz, -g_lightInfoArea[r10.w].baseLight.matrixForward.xyz));
            r13.w = 9.99999975e-06 + r13.w;
            r25.xyz = g_lightInfoArea[r10.w].baseLight.matrixForward.xyz * r13.www + r9.xyz;
            r13.w = dot(r25.xyz, r25.xyz);
            r13.w = rsqrt(r13.w);
            r25.xyz = r25.xyz * r13.www;
            r11.x = dot(-g_lightInfoArea[r10.w].baseLight.matrixForward.xyz, r11.xyw);
            r11.y = dot(-g_lightInfoArea[r10.w].baseLight.matrixForward.xyz, r25.xyz);
            r11.x = r11.x / r11.y;
            r11.xyw = r25.xyz * r11.xxx + r7.xyz;
            r11.xyw = -g_lightInfoArea[r10.w].baseLight.pos.xyz + r11.xyw;
            r15.x = dot(r11.xyw, g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz);
            r15.y = dot(r11.xyw, g_lightInfoArea[r10.w].baseLight.matrixUp.xyz);
            r11.x = dot(r15.xy, r15.xy);
            r11.x = sqrt(r11.x);
            r11.yw = r15.xy / r11.xx;
            r11.yw = g_lightInfoArea[r10.w].areaLight.lightRadius0 * r11.yw;
            r11.x = cmp(r11.x < g_lightInfoArea[r10.w].areaLight.lightRadius0);
            r11.xy = r11.xx ? r15.xy : r11.yw;
            r25.xyz = r11.xxx * g_lightInfoArea[r10.w].baseLight.matrixLeft.xyz + g_lightInfoArea[r10.w].baseLight.pos.xyz;
            r11.xyw = r11.yyy * g_lightInfoArea[r10.w].baseLight.matrixUp.xyz + r25.xyz;
            r11.xyw = -r5.xyz * r2.xxx + r11.xyw;
            r13.w = dot(r11.xyw, r11.xyw);
            r13.w = sqrt(r13.w);
            r11.xyw = r11.xyw / r13.www;
            r13.w = r13.w + r13.w;
            r13.w = g_lightInfoArea[r10.w].areaLight.lightRadius0 / r13.w;
            r13.w = saturate(r13.w + r1.x);
            r13.w = r1.x / r13.w;
            r13.w = r13.w * r13.w;
            r25.xyz = -r7.xyz * r2.yyy + r11.xyw;
            r15.x = dot(r25.xyz, r25.xyz);
            r15.x = rsqrt(r15.x);
            r25.xyz = r25.xyz * r15.xxx;
            r26.xyz = -r7.xyz * r2.yyy + r14.xyw;
            r15.x = dot(r26.xyz, r26.xyz);
            r15.x = rsqrt(r15.x);
            r26.xyz = r26.xyz * r15.xxx;
            r15.x = saturate(dot(r11.xyw, r25.xyz));
            r14.x = saturate(dot(r14.xyw, r26.xyz));
            r14.y = saturate(dot(r6.xyz, r25.xyz));
            r11.x = saturate(dot(r6.xyz, r11.xyw));
            r11.y = 1 + -r15.x;
            r11.w = r11.y * r11.y;
            r11.w = r11.w * r11.w;
            r11.y = r11.w * r11.y;
            r25.xyz = r8.xyz * r11.yyy + r4.xyz;
            r11.y = -r11.x * r6.w + r11.x;
            r11.y = r11.y * r11.x + r6.w;
            r11.y = sqrt(r11.y);
            r11.y = r11.y * r2.z;
            r11.x = r11.x * r8.w + r11.y;
            r11.x = 0.5 / r11.x;
            r11.y = r14.y * r6.w + -r14.y;
            r11.y = r11.y * r14.y + 1;
            r11.y = r11.y * r11.y;
            r11.y = r6.w / r11.y;
            r11.x = r11.x * r11.y;
            r11.x = r11.x * r13.w;
            r11.xyw = r25.xyz * r11.xxx;
            r13.w = r14.x * r14.x;
            r13.w = dot(r13.ww, r3.xx);
            r13.w = r3.x * 0.5 + r13.w;
            r14.x = 1 + -r17.x;
            r14.y = r14.x * r14.x;
            r14.y = r14.y * r14.y;
            r14.x = r14.y * r14.x;
            r13.w = -1 + r13.w;
            r14.x = r13.w * r14.x + 1;
            r13.w = r13.w * r10.x + 1;
            r13.w = r14.x * r13.w;
            r13.w = r13.w * r9.w;
            r14.x = g_lightInfoArea[r10.w].baseLight.diffuseScale * r12.w;
            r14.xyw = g_lightInfoArea[r10.w].baseLight.color.xyz * r14.xxx;
            r24.xyz = r14.xyw * r13.www;
            r12.w = g_lightInfoArea[r10.w].baseLight.specularScale * r12.w;
            r14.xyw = g_lightInfoArea[r10.w].baseLight.color.xyz * r12.www;
            r23.xyz = r14.xyw * r11.xyw;
          } else {
            r24.xyz = float3(0,0,0);
            r23.xyz = float3(0,0,0);
          }
        } else {
          r11.xyw = -r5.xyz * r2.xxx + g_lightInfoArea[r10.w].baseLight.pos.xyz;
          r12.w = dot(r11.xyw, r11.xyw);
          r13.w = rsqrt(r12.w);
          r14.xyw = r13.www * r11.xyw;
          r13.w = dot(r6.xyz, r14.xyw);
          r15.x = g_lightInfoArea[r10.w].areaLight.lightRadius0 * g_lightInfoArea[r10.w].areaLight.lightRadius0;
          r15.y = max(r15.x, r12.w);
          r15.x = r15.x / r15.y;
          r16.xw = r15.xx * float2(-0.690576434,-10.4827538) + float2(0.559636116,18.2588902);
          r15.y = r16.w * r15.x + -11.7109194;
          r15.y = r15.y * r15.x + 4.99786425;
          r16.w = r13.w * 0.5 + 0.5;
          r17.x = log2(r16.w);
          r15.y = r17.x * r15.y;
          r15.y = exp2(r15.y);
          r17.x = saturate(r13.w);
          r13.w = r16.x * r13.w;
          r16.x = r16.w + -r15.y;
          r13.w = r13.w * r16.x + r15.y;
          r13.w = max(r17.x, r13.w);
          r13.w = r13.w * r15.x;
          r13.w = 3.14159274 * r13.w;
          r12.w = g_lightInfoArea[r10.w].baseLight.invSqrAttenuationRadius * r12.w;
          r12.w = -r12.w * r12.w + 1;
          r12.w = max(0, r12.w);
          r12.w = r12.w * r12.w;
          r12.w = r13.w * r12.w;
          r13.w = cmp(0 < r12.w);
          if (r13.w != 0) {
            r13.w = dot(r11.xyw, r9.xyz);
            r25.xyz = r13.www * r9.xyz + -r11.xyw;
            r13.w = dot(r25.xyz, r25.xyz);
            r13.w = sqrt(r13.w);
            r13.w = saturate(g_lightInfoArea[r10.w].areaLight.lightRadius0 / r13.w);
            r11.xyw = r25.xyz * r13.www + r11.xyw;
            r13.w = dot(r11.xyw, r11.xyw);
            r13.w = sqrt(r13.w);
            r11.xyw = r11.xyw / r13.www;
            r13.w = r13.w + r13.w;
            r13.w = g_lightInfoArea[r10.w].areaLight.lightRadius0 / r13.w;
            r13.w = saturate(r13.w + r1.x);
            r13.w = r1.x / r13.w;
            r13.w = r13.w * r13.w;
            r25.xyz = -r7.xyz * r2.yyy + r11.xyw;
            r15.x = dot(r25.xyz, r25.xyz);
            r15.x = rsqrt(r15.x);
            r25.xyz = r25.xyz * r15.xxx;
            r26.xyz = -r7.xyz * r2.yyy + r14.xyw;
            r15.x = dot(r26.xyz, r26.xyz);
            r15.x = rsqrt(r15.x);
            r26.xyz = r26.xyz * r15.xxx;
            r15.x = saturate(dot(r11.xyw, r25.xyz));
            r14.x = saturate(dot(r14.xyw, r26.xyz));
            r14.y = saturate(dot(r6.xyz, r25.xyz));
            r11.x = saturate(dot(r6.xyz, r11.xyw));
            r11.y = 1 + -r15.x;
            r11.w = r11.y * r11.y;
            r11.w = r11.w * r11.w;
            r11.y = r11.w * r11.y;
            r25.xyz = r8.xyz * r11.yyy + r4.xyz;
            r11.y = -r11.x * r6.w + r11.x;
            r11.y = r11.y * r11.x + r6.w;
            r11.y = sqrt(r11.y);
            r11.y = r11.y * r2.z;
            r11.x = r11.x * r8.w + r11.y;
            r11.x = 0.5 / r11.x;
            r11.y = r14.y * r6.w + -r14.y;
            r11.y = r11.y * r14.y + 1;
            r11.y = r11.y * r11.y;
            r11.y = r6.w / r11.y;
            r11.x = r11.x * r11.y;
            r11.x = r11.x * r13.w;
            r11.xyw = r25.xyz * r11.xxx;
            r13.w = r14.x * r14.x;
            r13.w = dot(r13.ww, r3.xx);
            r13.w = r3.x * 0.5 + r13.w;
            r14.x = 1 + -r17.x;
            r14.y = r14.x * r14.x;
            r14.y = r14.y * r14.y;
            r14.x = r14.y * r14.x;
            r13.w = -1 + r13.w;
            r14.x = r13.w * r14.x + 1;
            r13.w = r13.w * r10.x + 1;
            r13.w = r14.x * r13.w;
            r13.w = r13.w * r9.w;
            r14.x = g_lightInfoArea[r10.w].baseLight.diffuseScale * r12.w;
            r14.xyw = g_lightInfoArea[r10.w].baseLight.color.xyz * r14.xxx;
            r24.xyz = r14.xyw * r13.www;
            r12.w = g_lightInfoArea[r10.w].baseLight.specularScale * r12.w;
            r14.xyw = g_lightInfoArea[r10.w].baseLight.color.xyz * r12.www;
            r23.xyz = r14.xyw * r11.xyw;
          } else {
            r24.xyz = float3(0,0,0);
            r23.xyz = float3(0,0,0);
          }
        }
      }
    }
    r22.xyz = r24.xyz + r22.xyz;
    r21.xyz = r23.xyz + r21.xyz;
    r10.z = (int)r10.z + 1;
  }
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g3.xxxx
  r1.w = (int)r1.w + (int)r4.w;
// No code for instruction (needs manual fix):
ld_raw r4.w, l(0), g4.xxxx
  r4.w = (int)r1.w + (int)r4.w;
  r11.z = 0;
  r12.z = 0;
  r13.zw = float2(1,-1);
  r14.yz = float2(0,0);
  r15.yz = float2(0,0);
  r16.zw = float2(1,-1);
  r7.w = 1;
  r17.xz = float2(0,0);
  r18.xz = float2(0,0);
  r19.xyz = r21.xyz;
  r20.xyz = r22.xyz;
  r5.w = r1.w;
  while (true) {
    r10.z = cmp((uint)r5.w >= (uint)r4.w);
    if (r10.z != 0) break;
    r10.z = g_lightIndexInput[r5.w].g_lightIndexInput_uint;
    r10.w = (int)r10.z * 23;
    r11.w = (uint13)g_lightInfoAreaShadow[r10.w].areaLight.areaLightType;
    r12.w = cmp((int)r11.w == 2);
    if (r12.w != 0) {
      r23.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz * float3(0.5,0.5,0.5);
      r24.xyz = -r23.xyz * g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1 + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
      r23.xyz = r23.xyz * g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1 + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
      r25.xyz = r23.xyz + -r24.xyz;
      r26.xyz = r5.xyz * r2.xxx + -r24.xyz;
      r12.w = dot(r26.xyz, r25.xyz);
      r14.w = dot(r25.xyz, r25.xyz);
      r12.w = r12.w / r14.w;
      r26.xyz = r12.www * r25.yzx + r24.yzx;
      r26.xyz = -r5.yzx * r2.xxx + r26.xyz;
      r14.w = dot(r26.xyz, r26.xyz);
      r14.w = rsqrt(r14.w);
      r26.xyz = r26.xyz * r14.www;
      r27.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.zxy * r26.xyz;
      r26.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.yzx * r26.yzx + -r27.xyz;
      r14.w = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1 * 0.5;
      r27.xyz = -g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz * r14.www + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
      r28.xyz = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * r26.xyz + r27.xyz;
      r27.xyz = -g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * r26.xyz + r27.xyz;
      r29.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz * r14.www + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
      r30.xyz = -g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * r26.xyz + r29.xyz;
      r26.xyz = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * r26.xyz + r29.xyz;
      r28.xyz = -r5.xyz * r2.xxx + r28.xyz;
      r27.xyz = -r5.xyz * r2.xxx + r27.xyz;
      r29.xyz = -r5.xyz * r2.xxx + r30.xyz;
      r26.xyz = -r5.xyz * r2.xxx + r26.xyz;
      r30.xyz = r28.zxy * r27.yzx;
      r30.xyz = r28.yzx * r27.zxy + -r30.xyz;
      r14.w = dot(r30.xyz, r30.xyz);
      r14.w = rsqrt(r14.w);
      r30.xyz = r30.xyz * r14.www;
      r31.xyz = r29.yzx * r27.zxy;
      r31.xyz = r27.yzx * r29.zxy + -r31.xyz;
      r14.w = dot(r31.xyz, r31.xyz);
      r14.w = rsqrt(r14.w);
      r31.xyz = r31.xyz * r14.www;
      r32.xyz = r29.zxy * r26.yzx;
      r32.xyz = r29.yzx * r26.zxy + -r32.xyz;
      r14.w = dot(r32.xyz, r32.xyz);
      r14.w = rsqrt(r14.w);
      r32.xyz = r32.xyz * r14.www;
      r33.xyz = r26.zxy * r28.yzx;
      r33.xyz = r26.yzx * r28.zxy + -r33.xyz;
      r14.w = dot(r33.xyz, r33.xyz);
      r14.w = rsqrt(r14.w);
      r33.xyz = r33.xyz * r14.www;
      r14.w = dot(-r30.xyz, r31.xyz);
      r15.w = abs(r14.w) * abs(r14.w);
      r17.w = r15.w * abs(r14.w);
      r18.w = abs(r14.w) * -0.212114394 + 1.57072878;
      r15.w = r15.w * 0.0742610022 + r18.w;
      r15.w = r17.w * -0.0187292993 + r15.w;
      r17.w = 1 + -abs(r14.w);
      r17.w = sqrt(r17.w);
      r18.w = r17.w * r15.w;
      r14.w = cmp(r14.w >= 0);
      r15.w = -r17.w * r15.w + 3.14159274;
      r14.w = r14.w ? r18.w : r15.w;
      r15.w = dot(-r31.xyz, r32.xyz);
      r17.w = abs(r15.w) * abs(r15.w);
      r18.w = r17.w * abs(r15.w);
      r19.w = abs(r15.w) * -0.212114394 + 1.57072878;
      r17.w = r17.w * 0.0742610022 + r19.w;
      r17.w = r18.w * -0.0187292993 + r17.w;
      r18.w = 1 + -abs(r15.w);
      r18.w = sqrt(r18.w);
      r19.w = r18.w * r17.w;
      r15.w = cmp(r15.w >= 0);
      r17.w = -r18.w * r17.w + 3.14159274;
      r15.w = r15.w ? r19.w : r17.w;
      r17.w = dot(-r32.xyz, r33.xyz);
      r18.w = abs(r17.w) * abs(r17.w);
      r19.w = r18.w * abs(r17.w);
      r20.w = abs(r17.w) * -0.212114394 + 1.57072878;
      r18.w = r18.w * 0.0742610022 + r20.w;
      r18.w = r19.w * -0.0187292993 + r18.w;
      r19.w = 1 + -abs(r17.w);
      r19.w = sqrt(r19.w);
      r20.w = r19.w * r18.w;
      r17.w = cmp(r17.w >= 0);
      r18.w = -r19.w * r18.w + 3.14159274;
      r17.w = r17.w ? r20.w : r18.w;
      r18.w = dot(-r33.xyz, r30.xyz);
      r19.w = abs(r18.w) * abs(r18.w);
      r20.w = r19.w * abs(r18.w);
      r21.w = abs(r18.w) * -0.212114394 + 1.57072878;
      r19.w = r19.w * 0.0742610022 + r21.w;
      r19.w = r20.w * -0.0187292993 + r19.w;
      r20.w = 1 + -abs(r18.w);
      r20.w = sqrt(r20.w);
      r21.w = r20.w * r19.w;
      r18.w = cmp(r18.w >= 0);
      r19.w = -r20.w * r19.w + 3.14159274;
      r18.w = r18.w ? r21.w : r19.w;
      r14.w = r15.w + r14.w;
      r14.w = r14.w + r17.w;
      r14.w = r14.w + r18.w;
      r14.w = -6.28318548 + r14.w;
      r14.w = 0.200000003 * r14.w;
      r15.w = dot(r28.xyz, r28.xyz);
      r15.w = rsqrt(r15.w);
      r28.xyz = r28.xyz * r15.www;
      r15.w = saturate(dot(r28.xyz, r6.xyz));
      r17.w = dot(r27.xyz, r27.xyz);
      r17.w = rsqrt(r17.w);
      r27.xyz = r27.xyz * r17.www;
      r17.w = saturate(dot(r27.xyz, r6.xyz));
      r15.w = r17.w + r15.w;
      r17.w = dot(r29.xyz, r29.xyz);
      r17.w = rsqrt(r17.w);
      r27.xyz = r29.xyz * r17.www;
      r17.w = saturate(dot(r27.xyz, r6.xyz));
      r15.w = r17.w + r15.w;
      r17.w = dot(r26.xyz, r26.xyz);
      r17.w = rsqrt(r17.w);
      r26.xyz = r26.xyz * r17.www;
      r17.w = saturate(dot(r26.xyz, r6.xyz));
      r15.w = r17.w + r15.w;
      r26.xyz = -r5.xyz * r2.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
      r17.w = dot(r26.xyz, r26.xyz);
      r18.w = rsqrt(r17.w);
      r26.xyz = r26.xyz * r18.www;
      r18.w = saturate(dot(r26.xyz, r6.xyz));
      r15.w = r18.w + r15.w;
      r12.w = saturate(r12.w);
      r25.xyz = r12.www * r25.xyz + r24.xyz;
      r25.xyz = -r5.xyz * r2.xxx + r25.xyz;
      r12.w = dot(r25.xyz, r25.xyz);
      r18.w = rsqrt(r12.w);
      r25.xyz = r25.xyz * r18.www;
      r18.w = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0;
      r19.w = saturate(dot(r25.xyz, r6.xyz));
      r20.w = 3.14159274 * r19.w;
      r12.w = max(r18.w, r12.w);
      r12.w = r18.w / r12.w;
      r12.w = r20.w * r12.w;
      r12.w = r14.w * r15.w + r12.w;
      r14.w = g_lightInfoAreaShadow[r10.w].baseLight.invSqrAttenuationRadius * r17.w;
      r14.w = -r14.w * r14.w + 1;
      r14.w = max(0, r14.w);
      r14.w = r14.w * r14.w;
      r12.w = r14.w * r12.w;
      r14.w = cmp(0 < r12.w);
      if (r14.w != 0) {
        r24.xyz = -r5.xyz * r2.xxx + r24.xyz;
        r23.xyz = -r5.xyz * r2.xxx + r23.xyz;
        r23.xyz = r23.xyz + -r24.xyz;
        r15.w = dot(r23.xyz, r23.xyz);
        r17.w = dot(r9.xyz, r23.xyz);
        r18.w = dot(r9.xyz, r24.xyz);
        r20.w = dot(r24.xyz, r23.xyz);
        r18.w = r18.w * r17.w + -r20.w;
        r15.w = -r17.w * r17.w + r15.w;
        r15.w = saturate(r18.w / r15.w);
        r23.xyz = r15.www * r23.xyz + r24.xyz;
        r15.w = dot(r23.xyz, r9.xyz);
        r24.xyz = r15.www * r9.xyz + -r23.xyz;
        r15.w = dot(r24.xyz, r24.xyz);
        r15.w = sqrt(r15.w);
        r15.w = saturate(g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 / r15.w);
        r23.xyz = r24.xyz * r15.www + r23.xyz;
        r15.w = dot(r23.xyz, r23.xyz);
        r17.w = sqrt(r15.w);
        r15.w = rsqrt(r15.w);
        r24.xyz = r23.xyz * r15.www;
        r15.w = r17.w + r17.w;
        r15.w = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 / r15.w;
        r15.w = saturate(r15.w + r1.x);
        r15.w = r1.x / r15.w;
        r26.xyz = -r7.xyz * r2.yyy + r24.xyz;
        r17.w = dot(r26.xyz, r26.xyz);
        r17.w = rsqrt(r17.w);
        r26.xyz = r26.xyz * r17.www;
        r27.xyz = -r7.xyz * r2.yyy + r25.xyz;
        r17.w = dot(r27.xyz, r27.xyz);
        r17.w = rsqrt(r17.w);
        r27.xyz = r27.xyz * r17.www;
        r17.w = saturate(dot(r24.xyz, r26.xyz));
        r18.w = saturate(dot(r25.xyz, r27.xyz));
        r20.w = saturate(dot(r6.xyz, r26.xyz));
        r21.w = saturate(dot(r6.xyz, r24.xyz));
        r17.w = 1 + -r17.w;
        r22.w = r17.w * r17.w;
        r22.w = r22.w * r22.w;
        r17.w = r22.w * r17.w;
        r25.xyz = r8.xyz * r17.www + r4.xyz;
        r17.w = -r21.w * r6.w + r21.w;
        r17.w = r17.w * r21.w + r6.w;
        r17.w = sqrt(r17.w);
        r17.w = r17.w * r2.z;
        r17.w = r21.w * r8.w + r17.w;
        r17.w = 0.5 / r17.w;
        r21.w = r20.w * r6.w + -r20.w;
        r20.w = r21.w * r20.w + 1;
        r20.w = r20.w * r20.w;
        r20.w = r6.w / r20.w;
        r17.w = r20.w * r17.w;
        r15.w = r17.w * r15.w;
        r25.xyz = r25.xyz * r15.www;
        r15.w = r18.w * r18.w;
        r15.w = dot(r15.ww, r3.xx);
        r15.w = r3.x * 0.5 + r15.w;
        r17.w = 1 + -r19.w;
        r18.w = r17.w * r17.w;
        r18.w = r18.w * r18.w;
        r17.w = r18.w * r17.w;
        r15.w = -1 + r15.w;
        r17.w = r15.w * r17.w + 1;
        r15.w = r15.w * r10.x + 1;
        r15.w = r17.w * r15.w;
        r15.w = r15.w * r9.w;
        r17.w = g_lightInfoAreaShadow[r10.w].baseLight.diffuseScale * r12.w;
        r26.xyz = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r17.www;
        r26.xyz = r26.xyz * r15.www;
        r12.w = g_lightInfoAreaShadow[r10.w].baseLight.specularScale * r12.w;
        r27.xyz = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r12.www;
        r25.xyz = r27.xyz * r25.xyz;
      } else {
        r23.xyz = float3(1,0,0);
        r24.xyz = float3(1,0,0);
        r26.xyz = float3(0,0,0);
        r25.xyz = float3(0,0,0);
      }
    } else {
      r12.w = cmp((int)r11.w == 5);
      if (r12.w != 0) {
        r27.xyz = r5.xyz * r2.xxx + -g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
        r12.w = dot(r27.xyz, -g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz);
        r12.w = cmp(0 < r12.w);
        if (r12.w != 0) {
          r27.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * float2(0.5,0.5);
          r28.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz * -r27.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
          r29.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz * r27.yyy + r28.xyz;
          r28.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz * -r27.yyy + r28.xyz;
          r30.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz * r27.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
          r31.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz * -r27.yyy + r30.xyz;
          r30.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz * r27.yyy + r30.xyz;
          r29.xyz = -r5.xyz * r2.xxx + r29.xyz;
          r28.xyz = -r5.xyz * r2.xxx + r28.xyz;
          r31.xyz = -r5.xyz * r2.xxx + r31.xyz;
          r30.xyz = -r5.xyz * r2.xxx + r30.xyz;
          r32.xyz = r29.zxy * r28.yzx;
          r32.xyz = r29.yzx * r28.zxy + -r32.xyz;
          r12.w = dot(r32.xyz, r32.xyz);
          r12.w = rsqrt(r12.w);
          r32.xyz = r32.xyz * r12.www;
          r33.xyz = r31.yzx * r28.zxy;
          r33.xyz = r28.yzx * r31.zxy + -r33.xyz;
          r12.w = dot(r33.xyz, r33.xyz);
          r12.w = rsqrt(r12.w);
          r33.xyz = r33.xyz * r12.www;
          r34.xyz = r31.zxy * r30.yzx;
          r34.xyz = r31.yzx * r30.zxy + -r34.xyz;
          r12.w = dot(r34.xyz, r34.xyz);
          r12.w = rsqrt(r12.w);
          r34.xyz = r34.xyz * r12.www;
          r35.xyz = r30.zxy * r29.yzx;
          r35.xyz = r30.yzx * r29.zxy + -r35.xyz;
          r12.w = dot(r35.xyz, r35.xyz);
          r12.w = rsqrt(r12.w);
          r35.xyz = r35.xyz * r12.www;
          r12.w = dot(-r32.xyz, r33.xyz);
          r15.w = abs(r12.w) * abs(r12.w);
          r17.w = r15.w * abs(r12.w);
          r18.w = abs(r12.w) * -0.212114394 + 1.57072878;
          r15.w = r15.w * 0.0742610022 + r18.w;
          r15.w = r17.w * -0.0187292993 + r15.w;
          r17.w = 1 + -abs(r12.w);
          r17.w = sqrt(r17.w);
          r18.w = r17.w * r15.w;
          r12.w = cmp(r12.w >= 0);
          r15.w = -r17.w * r15.w + 3.14159274;
          r12.w = r12.w ? r18.w : r15.w;
          r15.w = dot(-r33.xyz, r34.xyz);
          r17.w = abs(r15.w) * abs(r15.w);
          r18.w = r17.w * abs(r15.w);
          r19.w = abs(r15.w) * -0.212114394 + 1.57072878;
          r17.w = r17.w * 0.0742610022 + r19.w;
          r17.w = r18.w * -0.0187292993 + r17.w;
          r18.w = 1 + -abs(r15.w);
          r18.w = sqrt(r18.w);
          r19.w = r18.w * r17.w;
          r15.w = cmp(r15.w >= 0);
          r17.w = -r18.w * r17.w + 3.14159274;
          r15.w = r15.w ? r19.w : r17.w;
          r17.w = dot(-r34.xyz, r35.xyz);
          r18.w = abs(r17.w) * abs(r17.w);
          r19.w = r18.w * abs(r17.w);
          r20.w = abs(r17.w) * -0.212114394 + 1.57072878;
          r18.w = r18.w * 0.0742610022 + r20.w;
          r18.w = r19.w * -0.0187292993 + r18.w;
          r19.w = 1 + -abs(r17.w);
          r19.w = sqrt(r19.w);
          r20.w = r19.w * r18.w;
          r17.w = cmp(r17.w >= 0);
          r18.w = -r19.w * r18.w + 3.14159274;
          r17.w = r17.w ? r20.w : r18.w;
          r18.w = dot(-r35.xyz, r32.xyz);
          r19.w = abs(r18.w) * abs(r18.w);
          r20.w = r19.w * abs(r18.w);
          r21.w = abs(r18.w) * -0.212114394 + 1.57072878;
          r19.w = r19.w * 0.0742610022 + r21.w;
          r19.w = r20.w * -0.0187292993 + r19.w;
          r20.w = 1 + -abs(r18.w);
          r20.w = sqrt(r20.w);
          r21.w = r20.w * r19.w;
          r18.w = cmp(r18.w >= 0);
          r19.w = -r20.w * r19.w + 3.14159274;
          r18.w = r18.w ? r21.w : r19.w;
          r12.w = r15.w + r12.w;
          r12.w = r12.w + r17.w;
          r12.w = r12.w + r18.w;
          r12.w = -6.28318548 + r12.w;
          r12.w = 0.200000003 * r12.w;
          r15.w = dot(r29.xyz, r29.xyz);
          r15.w = rsqrt(r15.w);
          r29.xyz = r29.xyz * r15.www;
          r15.w = saturate(dot(r29.xyz, r6.xyz));
          r17.w = dot(r28.xyz, r28.xyz);
          r17.w = rsqrt(r17.w);
          r28.xyz = r28.xyz * r17.www;
          r17.w = saturate(dot(r28.xyz, r6.xyz));
          r15.w = r17.w + r15.w;
          r17.w = dot(r31.xyz, r31.xyz);
          r17.w = rsqrt(r17.w);
          r28.xyz = r31.xyz * r17.www;
          r17.w = saturate(dot(r28.xyz, r6.xyz));
          r15.w = r17.w + r15.w;
          r17.w = dot(r30.xyz, r30.xyz);
          r17.w = rsqrt(r17.w);
          r28.xyz = r30.xyz * r17.www;
          r17.w = saturate(dot(r28.xyz, r6.xyz));
          r15.w = r17.w + r15.w;
          r28.xyz = -r5.xyz * r2.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
          r17.w = dot(r28.xyz, r28.xyz);
          r17.w = rsqrt(r17.w);
          r29.xyz = r28.xyz * r17.www;
          r17.w = saturate(dot(r29.xyz, r6.xyz));
          r15.w = r17.w + r15.w;
          r12.w = r15.w * r12.w;
          r15.w = saturate(dot(r6.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz));
          r15.w = 9.99999975e-06 + r15.w;
          r29.xyz = r6.xyz * r15.www + g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz;
          r17.w = dot(r29.xyz, r29.xyz);
          r17.w = rsqrt(r17.w);
          r30.xyz = g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz * r15.www + r6.xyz;
          r15.w = dot(r30.xyz, r30.xyz);
          r15.w = rsqrt(r15.w);
          r30.xyz = r30.xyz * r15.www;
          r29.xyz = r29.xyz * r17.www + r30.xyz;
          r29.xyz = float3(0.5,0.5,0.5) * r29.xyz;
          r15.w = dot(-g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, r28.xyz);
          r17.w = dot(-g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, r29.xyz);
          r15.w = r15.w / r17.w;
          r28.xyz = r29.xyz * r15.www + r7.xyz;
          r28.xyz = -g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz + r28.xyz;
          r29.x = dot(r28.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz);
          r29.y = dot(r28.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz);
          r27.zw = max(r29.xy, -r27.xy);
          r27.xy = min(r27.zw, r27.xy);
          r27.xzw = r27.xxx * g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
          r27.xyz = r27.yyy * g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz + r27.xzw;
          r23.xyz = -r5.xyz * r2.xxx + r27.xyz;
          r15.w = dot(r23.xyz, r23.xyz);
          r15.w = rsqrt(r15.w);
          r24.xyz = r23.xyz * r15.www;
        } else {
          r23.xyz = float3(1,0,0);
          r24.xyz = float3(1,0,0);
          r12.w = 0;
        }
        r27.xyz = -r5.xyz * r2.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
        r15.w = dot(r27.xyz, r27.xyz);
        r15.w = g_lightInfoAreaShadow[r10.w].baseLight.invSqrAttenuationRadius * r15.w;
        r15.w = -r15.w * r15.w + 1;
        r15.w = max(0, r15.w);
        r15.w = r15.w * r15.w;
        r12.w = r15.w * r12.w;
        r14.w = cmp(0 < r12.w);
        if (r14.w != 0) {
          r28.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * float2(0.5,0.5);
          r29.x = dot(r9.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz);
          r29.y = dot(r9.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz);
          r29.z = dot(r9.xyz, -g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz);
          r30.x = dot(r27.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz);
          r30.y = dot(r27.xyz, g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz);
          r30.z = dot(r27.xyz, -g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz);
          r15.w = r30.z / r29.z;
          r31.xyz = r29.xyz * r15.www;
          r28.zw = r29.xy * r15.ww + -r30.xy;
          r15.w = cmp(0 < r15.w);
          r28.yz = cmp(r28.xy >= abs(r28.zw));
          r15.w = r15.w ? r28.y : 0;
          r15.w = r28.z ? r15.w : 0;
          if (r15.w == 0) {
            r11.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * float2(-0.5,-0.5);
            r32.xyz = r30.xyz + r11.xyz;
            r12.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * float2(0.5,0.5);
            r33.xyz = r30.xyz + r12.xyz;
            r32.w = r33.x;
            r11.xy = r32.xw * r29.xx;
            r33.w = r32.y;
            r12.xy = r33.wy * r29.yy;
            r28.yz = r30.zz * r29.zz;
            r34.xy = r32.xw * r32.xw;
            r34.zw = r30.zz * r30.zz;
            r35.xy = r33.wy * r33.wy + r34.zw;
            r35.zw = r35.xy * r29.xx;
            r12.xy = -r12.xy * r32.xw + r35.zw;
            r12.xy = -r28.yz * r32.xw + r12.xy;
            r35.zw = r29.yy * r33.wy + r28.yz;
            r28.xw = r35.zw * r28.xx;
            r28.xw = r28.xw + r28.xw;
            r36.xy = r12.xy / r28.xw;
            r36.z = -r36.y;
            r13.xy = saturate(r36.xz);
            r12.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * r13.zy;
            r12.xy = r12.xy * r13.xw + r32.xw;
            r28.xw = r29.xx * r12.xy + r35.zw;
            r12.xy = r12.xy * r12.xy + r35.xy;
            r12.xy = sqrt(r12.xy);
            r12.xy = r28.xw / r12.xy;
            r15.w = cmp(r12.x < r12.y);
            if (r15.w != 0) {
              r14.x = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0;
              r31.xyz = -r14.xyz * r13.yyy + r33.xyz;
              r12.x = r12.y;
            } else {
              r15.x = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0;
              r31.xyz = r15.xyz * r13.xxx + r32.xyz;
            }
            r11.xy = r11.xy * r33.wy;
            r11.xy = r29.yy * r34.xy + -r11.xy;
            r11.xy = -r28.yz * r33.wy + r11.xy;
            r11.xy = r29.yy * r34.zw + r11.xy;
            r13.xy = r29.xx * r32.xw + r28.yz;
            r15.xw = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1 * r13.xy;
            r28.xy = r11.xy / r15.xw;
            r28.z = -r28.y;
            r16.xy = saturate(r28.xz);
            r11.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1 * r16.zy;
            r11.xy = r11.xy * r16.xw + r33.wy;
            r13.xy = r29.yy * r11.xy + r13.xy;
            r15.xw = r32.xw * r32.xw + r34.zw;
            r11.xy = r11.xy * r11.xy + r15.xw;
            r11.xy = sqrt(r11.xy);
            r11.xy = r13.xy / r11.xy;
            r11.x = cmp(r12.x < r11.x);
            if (r11.x != 0) {
              r17.y = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1;
              r31.xyz = r17.xyz * r16.xxx + r32.xyz;
            } else {
              r11.x = cmp(r12.x < r11.y);
              if (r11.x != 0) {
                r18.y = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1;
                r31.xyz = -r18.xyz * r16.yyy + r33.xyz;
              }
            }
          }
          r11.x = dot(r31.xyz, r31.xyz);
          r11.x = rsqrt(r11.x);
          r28.xyz = r31.xyz * r11.xxx;
          r11.x = dot(r29.xyz, r29.xyz);
          r11.x = rsqrt(r11.x);
          r29.xyz = r29.xyz * r11.xxx;
          r11.x = dot(r28.xyz, r29.xyz);
          r11.x = saturate(r11.x * 1.66600001 + -0.5);
          r28.xyz = r31.xyz + -r30.xyz;
          r27.xyz = r28.xxx * g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz + r27.xyz;
          r27.xyz = r28.yyy * g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz + r27.xyz;
          r27.xyz = r28.zzz * -g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz + r27.xyz;
          r27.xyz = r27.xyz + -r24.xyz;
          r27.xyz = r11.xxx * r27.xyz + r24.xyz;
          r11.x = dot(r27.xyz, r27.xyz);
          r11.y = sqrt(r11.x);
          r11.y = 1 / r11.y;
          r11.x = rsqrt(r11.x);
          r27.xyz = r27.xyz * r11.xxx;
          r11.x = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 + g_lightInfoAreaShadow[r10.w].areaLight.lightRadius1;
          r11.x = saturate(r11.x * r11.y + r1.x);
          r11.x = r1.x / r11.x;
          r11.x = r11.x * r11.x;
          r11.x = r11.x * r10.y;
          r28.xyz = -r7.xyz * r2.yyy + r27.xyz;
          r11.y = dot(r28.xyz, r28.xyz);
          r11.y = rsqrt(r11.y);
          r28.xyz = r28.xyz * r11.yyy;
          r29.xyz = -r7.xyz * r2.yyy + r24.xyz;
          r11.y = dot(r29.xyz, r29.xyz);
          r11.y = rsqrt(r11.y);
          r29.xyz = r29.xyz * r11.yyy;
          r11.y = saturate(dot(r27.xyz, r28.xyz));
          r12.x = saturate(dot(r24.xyz, r29.xyz));
          r12.y = saturate(dot(r6.xyz, r28.xyz));
          r13.x = saturate(dot(r6.xyz, r27.xyz));
          r13.y = saturate(dot(r6.xyz, r24.xyz));
          r11.y = 1 + -r11.y;
          r14.x = r11.y * r11.y;
          r14.x = r14.x * r14.x;
          r11.y = r14.x * r11.y;
          r27.xyz = r8.xyz * r11.yyy + r4.xyz;
          r11.y = -r13.x * r6.w + r13.x;
          r11.y = r11.y * r13.x + r6.w;
          r11.y = sqrt(r11.y);
          r11.y = r11.y * r2.z;
          r11.y = r13.x * r8.w + r11.y;
          r11.y = 0.5 / r11.y;
          r13.x = r12.y * r6.w + -r12.y;
          r12.y = r13.x * r12.y + 1;
          r12.y = r12.y * r12.y;
          r12.y = r6.w / r12.y;
          r11.y = r12.y * r11.y;
          r11.x = r11.y * r11.x;
          r27.xyz = r27.xyz * r11.xxx;
          r11.x = r12.x * r12.x;
          r11.x = dot(r11.xx, r3.xx);
          r11.x = r3.x * 0.5 + r11.x;
          r11.y = 1 + -r13.y;
          r12.x = r11.y * r11.y;
          r12.x = r12.x * r12.x;
          r11.y = r12.x * r11.y;
          r11.x = -1 + r11.x;
          r11.y = r11.x * r11.y + 1;
          r11.x = r11.x * r10.x + 1;
          r11.x = r11.y * r11.x;
          r11.x = r11.x * r9.w;
          r11.y = g_lightInfoAreaShadow[r10.w].baseLight.diffuseScale * r12.w;
          r28.xyz = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r11.yyy;
          r26.xyz = r28.xyz * r11.xxx;
          r11.x = g_lightInfoAreaShadow[r10.w].baseLight.specularScale * r12.w;
          r12.xyw = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r11.xxx;
          r25.xyz = r27.xyz * r12.xyw;
        } else {
          r26.xyz = float3(0,0,0);
          r25.xyz = float3(0,0,0);
        }
      } else {
        r11.x = cmp((int)r11.w == 4);
        if (r11.x != 0) {
          r23.xyz = -r5.xyz * r2.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
          r11.x = dot(r23.xyz, r23.xyz);
          r11.y = rsqrt(r11.x);
          r24.xyz = r23.xyz * r11.yyy;
          r11.y = dot(r6.xyz, r24.xyz);
          r11.w = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0;
          r12.x = max(r11.w, r11.x);
          r12.x = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 + r12.x;
          r11.w = r11.w / r12.x;
          r12.xy = r11.ww * float2(-0.690576434,-10.4827538) + float2(0.559636116,18.2588902);
          r12.y = r12.y * r11.w + -11.7109194;
          r12.y = r12.y * r11.w + 4.99786425;
          r12.w = r11.y * 0.5 + 0.5;
          r13.x = log2(r12.w);
          r12.y = r13.x * r12.y;
          r12.y = exp2(r12.y);
          r13.x = saturate(r11.y);
          r11.y = r12.x * r11.y;
          r12.x = r12.w + -r12.y;
          r11.y = r11.y * r12.x + r12.y;
          r11.y = max(r13.x, r11.y);
          r11.y = r11.y * r11.w;
          r11.y = 3.14159274 * r11.y;
          r11.w = saturate(dot(-g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, -r24.xyz));
          r11.y = r11.y * r11.w;
          r12.xyw = -r5.xyz * r2.xxx + g_lightInfoAreaShadow[r10.w].areaLight.virtualPos.xyz;
          r11.w = dot(r12.xyw, r12.xyw);
          r11.w = rsqrt(r11.w);
          r12.xyw = r12.xyw * r11.www;
          r11.w = dot(g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, r12.xyw);
          r11.w = saturate(r11.w * g_lightInfoAreaShadow[r10.w].baseLight.angleScale + g_lightInfoAreaShadow[r10.w].baseLight.angleOffset);
          r11.w = r11.w * r11.w;
          r11.x = g_lightInfoAreaShadow[r10.w].baseLight.invSqrAttenuationRadius * r11.x;
          r11.x = -r11.x * r11.x + 1;
          r11.x = max(0, r11.x);
          r11.xy = r11.xy * r11.xw;
          r11.x = r11.y * r11.x;
          r14.w = cmp(0 < r11.x);
          if (r14.w != 0) {
            r11.y = saturate(dot(r9.xyz, -g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz));
            r11.y = 9.99999975e-06 + r11.y;
            r12.xyw = g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz * r11.yyy + r9.xyz;
            r11.y = dot(r12.xyw, r12.xyw);
            r11.y = rsqrt(r11.y);
            r12.xyw = r12.xyw * r11.yyy;
            r11.y = dot(-g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, r23.xyz);
            r11.w = dot(-g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, r12.xyw);
            r11.y = r11.y / r11.w;
            r12.xyw = r12.xyw * r11.yyy + r7.xyz;
            r12.xyw = -g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz + r12.xyw;
            r16.x = dot(r12.xyw, g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz);
            r16.y = dot(r12.xyw, g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz);
            r11.y = dot(r16.xy, r16.xy);
            r11.y = sqrt(r11.y);
            r12.xy = r16.xy / r11.yy;
            r12.xy = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * r12.xy;
            r11.y = cmp(r11.y < g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0);
            r11.yw = r11.yy ? r16.xy : r12.xy;
            r12.xyw = r11.yyy * g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
            r12.xyw = r11.www * g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz + r12.xyw;
            r12.xyw = -r5.xyz * r2.xxx + r12.xyw;
            r11.y = dot(r12.xyw, r12.xyw);
            r11.y = sqrt(r11.y);
            r12.xyw = r12.xyw / r11.yyy;
            r11.y = r11.y + r11.y;
            r11.y = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 / r11.y;
            r11.y = saturate(r11.y + r1.x);
            r11.y = r1.x / r11.y;
            r11.y = r11.y * r11.y;
            r27.xyz = -r7.xyz * r2.yyy + r12.xyw;
            r11.w = dot(r27.xyz, r27.xyz);
            r11.w = rsqrt(r11.w);
            r27.xyz = r27.xyz * r11.www;
            r28.xyz = -r7.xyz * r2.yyy + r24.xyz;
            r11.w = dot(r28.xyz, r28.xyz);
            r11.w = rsqrt(r11.w);
            r28.xyz = r28.xyz * r11.www;
            r11.w = saturate(dot(r12.xyw, r27.xyz));
            r13.y = saturate(dot(r24.xyz, r28.xyz));
            r14.x = saturate(dot(r6.xyz, r27.xyz));
            r12.x = saturate(dot(r6.xyz, r12.xyw));
            r11.w = 1 + -r11.w;
            r12.y = r11.w * r11.w;
            r12.y = r12.y * r12.y;
            r11.w = r12.y * r11.w;
            r27.xyz = r8.xyz * r11.www + r4.xyz;
            r11.w = -r12.x * r6.w + r12.x;
            r11.w = r11.w * r12.x + r6.w;
            r11.w = sqrt(r11.w);
            r11.w = r11.w * r2.z;
            r11.w = r12.x * r8.w + r11.w;
            r11.w = 0.5 / r11.w;
            r12.x = r14.x * r6.w + -r14.x;
            r12.x = r12.x * r14.x + 1;
            r12.x = r12.x * r12.x;
            r12.x = r6.w / r12.x;
            r11.w = r12.x * r11.w;
            r11.y = r11.w * r11.y;
            r12.xyw = r27.xyz * r11.yyy;
            r11.y = r13.y * r13.y;
            r11.y = dot(r11.yy, r3.xx);
            r11.y = r3.x * 0.5 + r11.y;
            r11.w = 1 + -r13.x;
            r13.x = r11.w * r11.w;
            r13.x = r13.x * r13.x;
            r11.w = r13.x * r11.w;
            r11.y = -1 + r11.y;
            r11.w = r11.y * r11.w + 1;
            r11.y = r11.y * r10.x + 1;
            r11.y = r11.w * r11.y;
            r11.y = r11.y * r9.w;
            r11.w = g_lightInfoAreaShadow[r10.w].baseLight.diffuseScale * r11.x;
            r27.xyz = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r11.www;
            r26.xyz = r27.xyz * r11.yyy;
            r11.x = g_lightInfoAreaShadow[r10.w].baseLight.specularScale * r11.x;
            r11.xyw = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r11.xxx;
            r25.xyz = r12.xyw * r11.xyw;
          } else {
            r26.xyz = float3(0,0,0);
            r25.xyz = float3(0,0,0);
          }
        } else {
          r23.xyz = -r5.xyz * r2.xxx + g_lightInfoAreaShadow[r10.w].baseLight.pos.xyz;
          r11.x = dot(r23.xyz, r23.xyz);
          r11.y = rsqrt(r11.x);
          r24.xyz = r23.xyz * r11.yyy;
          r11.y = dot(r6.xyz, r24.xyz);
          r11.w = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 * g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0;
          r12.x = max(r11.w, r11.x);
          r11.w = r11.w / r12.x;
          r12.xy = r11.ww * float2(-0.690576434,-10.4827538) + float2(0.559636116,18.2588902);
          r12.y = r12.y * r11.w + -11.7109194;
          r12.y = r12.y * r11.w + 4.99786425;
          r12.w = r11.y * 0.5 + 0.5;
          r13.x = log2(r12.w);
          r12.y = r13.x * r12.y;
          r12.y = exp2(r12.y);
          r13.x = saturate(r11.y);
          r11.y = r12.x * r11.y;
          r12.x = r12.w + -r12.y;
          r11.y = r11.y * r12.x + r12.y;
          r11.y = max(r13.x, r11.y);
          r11.y = r11.y * r11.w;
          r11.y = 3.14159274 * r11.y;
          r11.x = g_lightInfoAreaShadow[r10.w].baseLight.invSqrAttenuationRadius * r11.x;
          r11.x = -r11.x * r11.x + 1;
          r11.x = max(0, r11.x);
          r11.x = r11.x * r11.x;
          r11.x = r11.y * r11.x;
          r14.w = cmp(0 < r11.x);
          if (r14.w != 0) {
            r11.y = dot(r23.xyz, r9.xyz);
            r12.xyw = r11.yyy * r9.xyz + -r23.xyz;
            r11.y = dot(r12.xyw, r12.xyw);
            r11.y = sqrt(r11.y);
            r11.y = saturate(g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 / r11.y);
            r12.xyw = r12.xyw * r11.yyy + r23.xyz;
            r11.y = dot(r12.xyw, r12.xyw);
            r11.y = sqrt(r11.y);
            r12.xyw = r12.xyw / r11.yyy;
            r11.y = r11.y + r11.y;
            r11.y = g_lightInfoAreaShadow[r10.w].areaLight.lightRadius0 / r11.y;
            r11.y = saturate(r11.y + r1.x);
            r11.y = r1.x / r11.y;
            r11.y = r11.y * r11.y;
            r27.xyz = -r7.xyz * r2.yyy + r12.xyw;
            r11.w = dot(r27.xyz, r27.xyz);
            r11.w = rsqrt(r11.w);
            r27.xyz = r27.xyz * r11.www;
            r28.xyz = -r7.xyz * r2.yyy + r24.xyz;
            r11.w = dot(r28.xyz, r28.xyz);
            r11.w = rsqrt(r11.w);
            r28.xyz = r28.xyz * r11.www;
            r11.w = saturate(dot(r12.xyw, r27.xyz));
            r13.y = saturate(dot(r24.xyz, r28.xyz));
            r14.x = saturate(dot(r6.xyz, r27.xyz));
            r12.x = saturate(dot(r6.xyz, r12.xyw));
            r11.w = 1 + -r11.w;
            r12.y = r11.w * r11.w;
            r12.y = r12.y * r12.y;
            r11.w = r12.y * r11.w;
            r27.xyz = r8.xyz * r11.www + r4.xyz;
            r11.w = -r12.x * r6.w + r12.x;
            r11.w = r11.w * r12.x + r6.w;
            r11.w = sqrt(r11.w);
            r11.w = r11.w * r2.z;
            r11.w = r12.x * r8.w + r11.w;
            r11.w = 0.5 / r11.w;
            r12.x = r14.x * r6.w + -r14.x;
            r12.x = r12.x * r14.x + 1;
            r12.x = r12.x * r12.x;
            r12.x = r6.w / r12.x;
            r11.w = r12.x * r11.w;
            r11.y = r11.w * r11.y;
            r12.xyw = r27.xyz * r11.yyy;
            r11.y = r13.y * r13.y;
            r11.y = dot(r11.yy, r3.xx);
            r11.y = r3.x * 0.5 + r11.y;
            r11.w = 1 + -r13.x;
            r13.x = r11.w * r11.w;
            r13.x = r13.x * r13.x;
            r11.w = r13.x * r11.w;
            r11.y = -1 + r11.y;
            r11.w = r11.y * r11.w + 1;
            r11.y = r11.y * r10.x + 1;
            r11.y = r11.w * r11.y;
            r11.y = r11.y * r9.w;
            r11.w = g_lightInfoAreaShadow[r10.w].baseLight.diffuseScale * r11.x;
            r27.xyz = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r11.www;
            r26.xyz = r27.xyz * r11.yyy;
            r11.x = g_lightInfoAreaShadow[r10.w].baseLight.specularScale * r11.x;
            r11.xyw = g_lightInfoAreaShadow[r10.w].baseLight.color.xyz * r11.xxx;
            r25.xyz = r12.xyw * r11.xyw;
          } else {
            r26.xyz = float3(0,0,0);
            r25.xyz = float3(0,0,0);
          }
        }
      }
    }
    r11.x = cmp(0 < g_lightInfoAreaShadow[r10.w].iesShadow.enable);
    r11.x = r11.x ? r14.w : 0;
    if (r11.x != 0) {
      r11.x = dot(g_lightInfoAreaShadow[r10.w].baseLight.matrixLeft.xyz, -r24.xyz);
      r11.y = dot(g_lightInfoAreaShadow[r10.w].baseLight.matrixUp.xyz, -r24.xyz);
      r11.w = dot(g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, -r24.xyz);
      r27.y = r11.w * 0.5 + 0.5;
      r11.w = min(abs(r11.y), abs(r11.x));
      r12.x = max(abs(r11.y), abs(r11.x));
      r12.x = 1 / r12.x;
      r11.w = r12.x * r11.w;
      r12.x = r11.w * r11.w;
      r12.y = r12.x * 0.0208350997 + -0.0851330012;
      r12.y = r12.x * r12.y + 0.180141002;
      r12.y = r12.x * r12.y + -0.330299497;
      r12.x = r12.x * r12.y + 0.999866009;
      r12.y = r12.x * r11.w;
      r12.w = cmp(abs(r11.x) < abs(r11.y));
      r12.y = r12.y * -2 + 1.57079637;
      r12.y = r12.w ? r12.y : 0;
      r11.w = r11.w * r12.x + r12.y;
      r12.x = cmp(r11.x < -r11.x);
      r12.x = r12.x ? -3.141593 : 0;
      r11.w = r12.x + r11.w;
      r12.x = min(r11.y, r11.x);
      r11.x = max(r11.y, r11.x);
      r11.y = cmp(r12.x < -r12.x);
      r11.x = cmp(r11.x >= -r11.x);
      r11.x = r11.x ? r11.y : 0;
      r11.x = r11.x ? -r11.w : r11.w;
      r27.x = 0.159154937 * r11.x;
      r27.z = g_lightInfoAreaShadow[r10.w].iesShadow.textureIndex;
      r11.x = g_iesTextureArray.SampleLevel(g_linearLongitudeWrapSampler_s_s, r27.xyz, 0).x;
    } else {
      r11.x = 1;
    }
    r11.y = cmp(0.000000 != g_lightInfoAreaShadow[r10.w].shadow.shadowType);
    r11.y = r11.y ? r14.w : 0;
    if (r11.y != 0) {
      r11.y = dot(g_lightInfoAreaShadow[r10.w].baseLight.matrixForward.xyz, r24.xyz);
      r11.y = saturate(r11.y * g_lightInfoAreaShadow[r10.w].shadow.shadowAngleScale + g_lightInfoAreaShadow[r10.w].shadow.shadowAngleOffset);
      r11.y = r11.y * r11.y;
      r11.w = cmp(0 < r11.y);
      if (r11.w != 0) {
        r11.w = cmp(2.000000 == g_lightInfoAreaShadow[r10.w].shadow.shadowType);
        if (r11.w != 0) {
          r24.xyz = -r23.xyz;
          r11.w = max(abs(r23.x), abs(r23.y));
          r11.w = max(r11.w, abs(r23.z));
          r12.xy = cmp(abs(r23.yz) < abs(r23.xx));
          r12.x = r12.y ? r12.x : 0;
          if (r12.x != 0) {
            r12.x = cmp(0 < r24.x);
            r24.x = r12.x ? r24.z : r23.z;
            r12.x = r12.x ? 1.000000 : 0;
          } else {
            r12.yw = cmp(abs(r23.xz) < abs(r23.yy));
            r12.y = r12.w ? r12.y : 0;
            if (r12.y != 0) {
              r12.y = cmp(0 < r24.y);
              r24.w = r12.y ? r24.z : r23.z;
              r12.x = r12.y ? 3 : 2;
              r24.xy = r24.xw;
            } else {
              r12.y = cmp(0 < r24.z);
              r24.x = r12.y ? r23.x : r24.x;
              r12.x = r12.y ? 5 : 4;
            }
          }
          r12.yw = r24.xy / r11.ww;
          r23.xy = r12.yw * float2(0.5,-0.5) + float2(0.5,0.5);
          r12.y = -r11.w * g_lightInfoAreaShadow[r10.w].shadow.shadowMatrix3.z + g_lightInfoAreaShadow[r10.w].shadow.shadowMatrix3.w;
          r11.w = r12.y / r11.w;
          r12.y = -1;
        } else {
          r13.x = dot(r7.xyzw, g_lightInfoAreaShadow[r10.w].shadow.shadowMatrix1.xyzw);
          r13.y = dot(r7.xyzw, g_lightInfoAreaShadow[r10.w].shadow.shadowMatrix2.xyzw);
          r12.w = dot(r7.xyzw, g_lightInfoAreaShadow[r10.w].shadow.shadowMatrix3.xyzw);
          r14.x = dot(r7.xyzw, g_lightInfoAreaShadow[r10.w].shadow.shadowMatrix4.xyzw);
          r14.x = 1 / r14.x;
          r13.xy = r14.xx * r13.xy;
          r11.w = r14.x * r12.w;
          r23.xy = r13.xy * float2(0.5,-0.5) + float2(0.5,0.5);
          r12.w = -r12.w * r14.x + 1;
          r13.x = max(abs(r13.x), abs(r13.y));
          r12.w = max(r13.x, r12.w);
          r12.y = cmp(1 >= r12.w);
          r12.x = 0;
        }
        r12.x = (uint)r12.x;
        r12.w = (int)r12.x & 3;
        r12.x = (uint)r12.x >> 2;
        r10.z = mad((int)r10.z, 23, (int)r12.x);
        r10.z = dot(g_lightInfoAreaShadow[r10.z].shadow.shadowMapIndex[0].xyzw, icb[r12.w+0].xyzw);
        r12.x = cmp(r10.z >= 0);
        r12.x = r12.y ? r12.x : 0;
        r10.z = (uint)r10.z;
        r12.y = (uint7)g_lightInfoAreaShadow[r10.w].shadow.quality;
        r12.y = cmp((int)r12.y == 1);
        if (r12.y != 0) {
          r24.z = (uint)r10.z;
          r12.yw = shadowMapSizeAndInvSize.xx * r23.xy + float2(0.5,0.5);
          r13.xy = floor(r12.yw);
          r12.yw = -r13.xy + r12.yw;
          r24.xy = shadowMapSizeAndInvSize.zz * r13.xy;
          r27.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(-2,-2)).xyzw;
          r28.xyzw = float4(1,2,3,5) + -r12.yyyy;
          r29.xyzw = r28.xyxy * r27.wzxy;
          r13.xy = r29.xz + r29.yw;
          r29.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(0,-2)).xyzw;
          r13.xy = r29.zy * float2(2,2) + r13.xy;
          r13.xy = r29.wx * float2(2,2) + r13.xy;
          r30.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(2,-2)).xyzw;
          r31.xyzw = float4(1,4,3,2) + r12.yyyy;
          r14.x = r30.y * r12.y;
          r13.xy = r30.zy * r12.yy + r13.xy;
          r13.xy = r30.wx * r31.xx + r13.xy;
          r32.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(-2,0)).xyzw;
          r14.w = -r12.y * 2 + 2;
          r15.xw = r32.wx * r14.ww;
          r16.x = r12.y * -2 + 4;
          r15.xw = r32.zy * r16.xx + r15.xw;
          r15.x = r27.y * r28.z + r15.x;
          r15.x = r27.x * r14.w + r15.x;
          r15.w = r32.z * r28.z + r15.w;
          r15.w = r32.w * r14.w + r15.w;
          r27.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w).xyzw;
          r15.x = r27.z * r31.y + r15.x;
          r15.x = r27.w * r28.w + r15.x;
          r15.w = r27.y * r31.y + r15.w;
          r15.w = r27.x * r28.w + r15.w;
          r16.xy = float2(4,1) + -r12.yw;
          r15.x = r29.y * r31.z + r15.x;
          r15.x = r29.x * r16.x + r15.x;
          r15.w = r27.z * r31.z + r15.w;
          r15.w = r27.w * r16.x + r15.w;
          r29.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(2,0)).xyzw;
          r17.y = r12.y * 2 + 2;
          r17.w = dot(r29.zz, r12.yy);
          r15.x = r17.w + r15.x;
          r15.x = r29.w * r17.y + r15.x;
          r18.y = dot(r29.yy, r12.yy);
          r15.w = r18.y + r15.w;
          r15.w = r29.x * r17.y + r15.w;
          r14.x = r14.x * 2 + r15.x;
          r30.x = r30.x * r31.w + r14.x;
          r14.x = r17.w + r15.w;
          r30.y = r29.w * r31.w + r14.x;
          r13.xy = r30.xy + r13.xy;
          r30.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(-2,2)).xyzw;
          r33.xyzw = r30.wzxy * r28.xyxy;
          r15.xw = r33.xz + r33.yw;
          r14.x = r32.y * r28.z + r15.x;
          r14.x = r32.x * r14.w + r14.x;
          r15.x = r30.z * r28.z + r15.w;
          r14.w = r30.w * r14.w + r15.x;
          r28.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(0,2)).xyzw;
          r14.x = r28.z * 2 + r14.x;
          r14.x = r28.w * 2 + r14.x;
          r14.w = r28.y * 2 + r14.w;
          r14.w = r28.x * 2 + r14.w;
          r14.x = r27.y * r31.z + r14.x;
          r14.x = r27.x * r16.x + r14.x;
          r14.w = r28.z * r31.z + r14.w;
          r14.w = r28.w * r16.x + r14.w;
          r24.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s_s, r24.xyz, r11.w, int2(2,2)).xyzw;
          r15.x = r24.z * r12.y;
          r14.x = r24.z * r12.y + r14.x;
          r14.x = r24.w * r31.x + r14.x;
          r12.y = r24.y * r12.y + r14.w;
          r12.y = r24.x * r31.x + r12.y;
          r14.x = r18.y + r14.x;
          r24.x = r29.x * r31.w + r14.x;
          r12.y = r15.x * 2 + r12.y;
          r24.y = r24.w * r31.w + r12.y;
          r13.xy = r24.xy + r13.xy;
          r12.y = r13.y * r12.w;
          r12.y = r13.x * r16.y + r12.y;
          r12.y = saturate(0.0163934417 * r12.y);
        } else {
          r23.z = (uint)r10.z;
          r10.z = g_shadowmapTexture.SampleCmpLevelZero(g_shadowmapSampler_s_s, r23.xyz, r11.w).x;
          r11.w = cmp(r11.w < 1);
          r12.y = r11.w ? r10.z : 1;
        }
        r10.z = -1 + r12.y;
        r10.z = g_lightInfoAreaShadow[r10.w].baseLight.shadowDimmer * r10.z;
        r10.z = r11.y * r10.z + 1;
        r10.z = r12.x ? r10.z : 1;
        r11.x = r11.x * r10.z;
      }
    }
    r20.xyz = r26.xyz * r11.xxx + r20.xyz;
    r19.xyz = r25.xyz * r11.xxx + r19.xyz;
    r5.w = (int)r5.w + 1;
  }
  r1.x = -1 + r1.z;
  r1.x = dynamicAOFactor * r1.x + 1;
  r2.xyz = r20.xyz * r1.xxx;
  r1.x = r2.w + r1.z;
  r1.y = r1.y * -16 + -1;
  r1.y = exp2(r1.y);
  r1.x = log2(r1.x);
  r1.x = r1.y * r1.x;
  r1.x = exp2(r1.x);
  r1.x = r1.x + r1.z;
  r1.x = saturate(-1 + r1.x);
  r1.xyz = r19.xyz * r1.xxx;
  r2.xyz = r3.yzw * r2.xyz;
  r1.xyz = float3(0.318309873,0.318309873,0.318309873) * r1.xyz;
  r1.xyz = r2.xyz * float3(0.318309873,0.318309873,0.318309873) + r1.xyz;
  r1.xyz = g_exposureMultipliers.zzz * r1.xyz;
  r1.xyz = min(float3(65504,65504,65504), r1.xyz);
  r1.w = 0;
// No code for instruction (needs manual fix):
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
  return;
}