// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:40:24 2019
Buffer<mixed4> t32 : register(t32);

Texture2D<float4> t28 : register(t28);


cbuffer GlobalConstants : register(b0)
{
  float4 Globals[95] : packoffset(c0);
}

cbuffer LightingFrameConsts : register(b3)
{
  float4 PointLights[768] : packoffset(c0);
  float4 SpotLights[1024] : packoffset(c768);
  float4 Projections[512] : packoffset(c1792);
  float4 SpotLightShadowFade[8] : packoffset(c2304);
  row_major float4x4 WorldToLPVTransform : packoffset(c2312);
  row_major float4x4 WorldToLPVUnsnappedTransform : packoffset(c2316);
  row_major float4x4 WorldToLPVTransform2 : packoffset(c2320);
  row_major float4x4 WorldToLPVUnsnappedTransform2 : packoffset(c2324);
  float4 GroundFillFlux_1234 : packoffset(c2328);
  float4 GroundFillFlux_5678 : packoffset(c2329);
  float4 GroundFillFlux_9_Color : packoffset(c2330);
  float3 AOLightInfluence : packoffset(c2331);
  float SkyAmbientSaturation : packoffset(c2331.w);
  float NearCascadeDampeningFactor : packoffset(c2332);
  float EmissiveScale : packoffset(c2332.y);
  int bEnableGI : packoffset(c2332.z);
  int b3_padding0 : packoffset(c2332.w);
}

SamplerState LinearSampler_s_s : register(s10);
SamplerState CubeMapSampler_s_s : register(s11);
SamplerState LPVSampler_s_s : register(s12);
SamplerState CloudShadowMap_s_s : register(s13);
SamplerComparisonState ShadowComparisonFilter_s_s : register(s15);
Texture2D<float> Depth : register(t0);
Texture2D<float4> Diffuse : register(t1);
Texture2D<float4> Normal : register(t2);
Texture2D<float4> Properties : register(t3);
Texture2D<float4> PropertiesEx : register(t4);
TextureCube<float4> EnvironmentCube : register(t11);
Texture2D<float4> CloudShadowMap : register(t13);
Texture2DArray<float4> ShadowMapTexture : register(t14);
Texture2DArray<float4> LPVRed : register(t16);
Texture2DArray<float4> LPVGreen : register(t17);
Texture2DArray<float4> LPVBlue : register(t18);
Texture2DArray<float4> LPVRed2 : register(t19);
Texture2DArray<float4> LPVGreen2 : register(t20);
Texture2DArray<float4> LPVBlue2 : register(t21);
Texture1D<float4> SkyLightingRed : register(t22);
Texture1D<float4> SkyLightingGreen : register(t23);
Texture1D<float4> SkyLightingBlue : register(t24);
Texture2D<float4> SkinDiffuse : register(t25);
TextureCubeArray<float4> PointlightTextures : register(t26);
Texture2DArray<float4> SpotlightTextures : register(t27);
Texture2D<float4> Reflections : register(t29);
Texture2D<float4> ReflectionsAlpha : register(t30);
Texture3D<uint2> LightLookup : register(t31);
Texture2D<float4> HorizonMap0 : register(t44);
Texture2D<float4> HorizonMap1 : register(t45);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_resource_texture1d (float,float,float,float) t22
// Needs manual fix for instruction:
// unknown dcl_: dcl_resource_texture1d (float,float,float,float) t23
// Needs manual fix for instruction:
// unknown dcl_: dcl_resource_texture1d (float,float,float,float) t24
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r1.x = Depth.Load(r0.xyw).x;
  r2.xyzw = Diffuse.Load(r0.xyw).xyzw;
  r1.yzw = Normal.Load(r0.xyw).xyz;
  r3.xyzw = Properties.Load(r0.xyw).xyzw;
  r4.xyzw = PropertiesEx.Load(r0.xyw).xyzw;
  r1.yzw = r1.zwy * float3(2,2,2) + float3(-1,-1,-1);
  r5.x = dot(r1.yzw, r1.yzw);
  r5.x = rsqrt(r5.x);
  r5.yzw = r5.xxx * r1.yzw;
  r1.y = -1 + r2.w;
  r1.yz = AOLightInfluence.xy * r1.yy + float2(1,1);
  r1.x = r1.x * Globals[9].z + Globals[9].w;
  r1.x = 1 / r1.x;
  r6.xyz = v2.xyz * r1.xxx;
  r1.w = dot(-v2.xyz, -v2.xyz);
  r1.w = rsqrt(r1.w);
  r7.xyz = -v2.xyz * r1.www;
  r8.xy = max(float2(0.0199999996,0), r3.yx);
  r2.w = min(1, r8.x);
  r8.xz = cmp(float2(0,0) < r3.zw);
  r9.xyz = r2.xyz + -r2.www;
  r10.xyz = r3.zzz * r9.xyz + r2.www;
  r11.xyz = r3.zzz * -r2.xyz + r2.xyz;
  r3.x = -0.600000024 + r3.y;
  r3.x = saturate(2.5 * r3.x);
  r9.xyz = r3.xxx * r9.xyz + r2.www;
  r2.xyz = r3.xxx * -r2.xyz + r2.xyz;
  r2.xyz = r8.xxx ? r11.xyz : r2.xyz;
  r3.xyz = r8.xxx ? r10.xyz : r9.xyz;
  r2.w = 13 * r8.y;
  r2.w = exp2(r2.w);
  r6.w = 1 + -r8.y;
  r6.w = 7 * r6.w;
  r8.xw = cmp(float2(0.5,0) < r4.wy);
  r4.w = 4 * r4.w;
  r4.w = saturate(r4.w);
  r4.w = r8.x ? 0 : r4.w;
  r9.xyz = r1.xxx * v2.xyz + Globals[4].xyz;
  r7.w = dot(v0.xy, float2(12.9898005,78.2330017));
  r7.w = sin(r7.w);
  r7.w = 43758.5469 * r7.w;
  r7.w = frac(r7.w);
  sincos(r7.w, r10.x, r11.x);
  r7.w = -Globals[38].w + r9.y;
  r7.w = saturate(Globals[39].w * r7.w);
  r10.yz = r9.xz * float2(3.09999996e-05,3.09999996e-05) + float2(0.5,0.5);
  r9.w = HorizonMap0.SampleLevel(LinearSampler_s_s, r10.yz, 0).x;
  r10.y = HorizonMap1.SampleLevel(LinearSampler_s_s, r10.yz, 0).x;
  r10.y = r10.y + -r9.w;
  r9.w = Globals[29].w * r10.y + r9.w;
  r10.y = dot(r6.xz, r6.xz);
  r10.y = sqrt(r10.y);
  r10.y = -1500 + r10.y;
  r10.y = max(0, r10.y);
  r10.y = r10.y * 0.03125 + r9.y;
  r9.w = -r9.w * 4096 + r10.y;
  r9.w = saturate(Globals[30].w * r9.w + 1);
  r7.w = r9.w * r7.w;
  r9.w = cmp(0 < r7.w);
  if (r9.w != 0) {
    r10.yzw = Globals[46].xyz * r6.yyy;
    r10.yzw = r6.xxx * Globals[45].xyz + r10.yzw;
    r10.yzw = r6.zzz * Globals[47].xyz + r10.yzw;
    r10.yzw = Globals[48].xyz + r10.yzw;
    r12.x = Globals[56].x;
    r12.z = 1;
    r12.yzw = r10.yzw * r12.xxz + Globals[62].xyz;
    r9.w = max(abs(r12.y), abs(r12.z));
    r12.x = r9.w * Globals[56].z + Globals[56].w;
    r9.w = cmp(r12.x < 1);
    r12.xyzw = r9.wwww ? r12.xyzw : float4(0,-1,-1,-1);
    r11.y = r9.w ? Globals[62].w : -1;
    r9.w = r9.w ? Globals[56].y : -1;
    r13.x = Globals[55].x;
    r13.z = 1;
    r13.yzw = r10.yzw * r13.xxz + Globals[61].xyz;
    r11.z = max(abs(r13.y), abs(r13.z));
    r13.x = r11.z * Globals[55].z + Globals[55].w;
    r11.z = cmp(r13.x < 1);
    r13.xyzw = r11.zzzz ? r13.xyzw : r12.xyzw;
    r11.y = r11.z ? Globals[61].w : r11.y;
    r11.w = r11.z ? Globals[55].y : r9.w;
    r14.x = Globals[54].x;
    r14.z = 1;
    r14.yzw = r10.yzw * r14.xxz + Globals[60].xyz;
    r12.x = max(abs(r14.y), abs(r14.z));
    r14.x = r12.x * Globals[54].z + Globals[54].w;
    r12.x = cmp(r14.x < 1);
    r14.xyzw = r12.xxxx ? r14.xyzw : r13.xyzw;
    r11.y = r12.x ? Globals[60].w : r11.y;
    r13.x = r12.x ? Globals[54].y : r11.w;
    r15.x = Globals[53].x;
    r15.z = 1;
    r15.yzw = r10.yzw * r15.xxz + Globals[59].xyz;
    r16.x = max(abs(r15.y), abs(r15.z));
    r15.x = r16.x * Globals[53].z + Globals[53].w;
    r16.x = cmp(r15.x < 1);
    r15.xyzw = r16.xxxx ? r15.xyzw : r14.xyzw;
    r11.y = r16.x ? Globals[59].w : r11.y;
    r14.x = r16.x ? Globals[53].y : r13.x;
    r17.x = Globals[52].x;
    r17.z = 1;
    r17.yzw = r10.yzw * r17.xxz + Globals[58].xyz;
    r16.y = max(abs(r17.y), abs(r17.z));
    r17.x = r16.y * Globals[52].z + Globals[52].w;
    r16.y = cmp(r17.x < 1);
    r17.xyzw = r16.yyyy ? r17.xyzw : r15.xyzw;
    r11.y = r16.y ? Globals[58].w : r11.y;
    r15.x = r16.y ? Globals[52].y : r14.x;
    r18.x = Globals[51].x;
    r18.z = 1;
    r10.yzw = r10.yzw * r18.xxz + Globals[57].xyz;
    r16.z = max(abs(r10.y), abs(r10.z));
    r16.z = r16.z * Globals[51].z + Globals[51].w;
    r16.w = cmp(r16.z < 1);
    r16.z = saturate(r16.w ? r16.z : r17.x);
    r10.yzw = r16.www ? r10.wyz : r17.wyz;
    r11.y = r16.w ? Globals[57].w : r11.y;
    r18.z = r16.w ? Globals[51].y : r15.x;
    r10.zw = r10.zw * float2(0.5,-0.5) + float2(0.5,0.5);
    r10.y = saturate(r10.y);
    r11.y = Globals[49].z * r11.y;
    r19.xz = r10.xx;
    r19.yw = r11.xx;
    r19.xyzw = r19.xyzw * r11.yyyy;
    r20.xy = r19.zz * float2(-0.942016006,-0.399062008) + r10.zw;
    r18.x = r19.w * -0.399062008 + r20.x;
    r18.y = -r19.w * -0.942016006 + r20.y;
    r20.xyzw = float4(-2.09999998e-05,-1.89999992e-05,-1.10000001e-05,-1.29999999e-05) + r10.yyyy;
    r11.y = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.x).x;
    r21.xy = r19.zz * float2(0.945586026,-0.768907011) + r10.zw;
    r18.x = r19.w * -0.768907011 + r21.x;
    r18.y = -r19.w * 0.945586026 + r21.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.y).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(-0.0941839963,-0.929389) + r10.zw;
    r18.x = r19.w * -0.929389 + r20.x;
    r18.y = -r19.w * -0.0941839963 + r20.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.z).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(0.344958991,0.293877989) + r10.zw;
    r18.x = r19.w * 0.293877989 + r20.x;
    r18.y = -r19.w * 0.344958991 + r20.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.w).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(-0.915885985,0.457713991) + r10.zw;
    r18.x = r19.w * 0.457713991 + r20.x;
    r18.y = -r19.w * -0.915885985 + r20.y;
    r20.xyzw = float4(-2.20000002e-05,-1.70000003e-05,-1.10000001e-05,-1.20000004e-05) + r10.yyyy;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.x).x;
    r11.y = r17.x + r11.y;
    r21.xy = r19.zz * float2(-0.815442026,-0.879124999) + r10.zw;
    r18.x = r19.w * -0.879124999 + r21.x;
    r18.y = -r19.w * -0.815442026 + r21.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.y).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(-0.382775009,0.276767999) + r10.zw;
    r18.x = r19.w * 0.276767999 + r20.x;
    r18.y = -r19.w * -0.382775009 + r20.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.z).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(0.974843979,0.756483972) + r10.zw;
    r18.x = r19.w * 0.756483972 + r20.x;
    r18.y = -r19.w * 0.974843979 + r20.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.w).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(0.443233013,-0.975116014) + r10.zw;
    r18.x = r19.w * -0.975116014 + r20.x;
    r18.y = -r19.w * 0.443233013 + r20.y;
    r20.xyzw = float4(-2.09999998e-05,-9.99999997e-07,-2.09999998e-05,-1.99999995e-05) + r10.yyyy;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.x).x;
    r11.y = r17.x + r11.y;
    r21.xy = r19.zz * float2(0.537429988,-0.473733991) + r10.zw;
    r18.x = r19.w * -0.473733991 + r21.x;
    r18.y = -r19.w * 0.537429988 + r21.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.y).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(-0.264968991,-0.418929994) + r10.zw;
    r18.x = r19.w * -0.418929994 + r20.x;
    r18.y = -r19.w * -0.264968991 + r20.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.z).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(0.791975021,0.190901995) + r10.zw;
    r18.x = r19.w * 0.190901995 + r20.x;
    r18.y = -r19.w * 0.791975021 + r20.y;
    r17.x = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.w).x;
    r11.y = r17.x + r11.y;
    r20.xy = r19.zz * float2(-0.241888002,0.997065008) + r10.zw;
    r18.x = r19.w * 0.997065008 + r20.x;
    r18.y = -r19.w * -0.241888002 + r20.y;
    r20.xyzw = float4(-3.99999999e-06,-6.00000021e-06,-2.09999998e-05,-7.0000001e-06) + r10.yyyy;
    r10.y = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.x).x;
    r10.y = r11.y + r10.y;
    r21.xy = r19.zz * float2(-0.814100027,0.91437602) + r10.zw;
    r18.x = r19.w * 0.91437602 + r21.x;
    r18.y = -r19.w * -0.814100027 + r21.y;
    r11.y = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.y).x;
    r10.y = r11.y + r10.y;
    r20.xy = r19.zz * float2(0.199840993,0.786414027) + r10.zw;
    r18.x = r19.w * 0.786414027 + r20.x;
    r18.y = -r19.w * 0.199840993 + r20.y;
    r11.y = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.z).x;
    r10.y = r11.y + r10.y;
    r10.zw = r19.xz * float2(0.143831998,-0.141008005) + r10.zw;
    r18.x = r19.y * -0.141008005 + r10.z;
    r18.y = -r19.w * 0.143831998 + r10.w;
    r10.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r20.w).x;
    r10.y = r10.y + r10.z;
    r10.z = 0.0625 * r10.y;
    r10.w = cmp(0 < r16.z);
    if (r10.w != 0) {
      r12.yzw = r11.zzz ? r12.wyz : float3(-1,-1,-1);
      r9.w = r11.z ? r9.w : -1;
      r12.yzw = r12.xxx ? r13.wyz : r12.yzw;
      r9.w = r12.x ? r11.w : r9.w;
      r11.yzw = r16.xxx ? r14.wyz : r12.yzw;
      r9.w = r16.x ? r13.x : r9.w;
      r11.yzw = r16.yyy ? r15.wyz : r11.yzw;
      r9.w = r16.y ? r14.x : r9.w;
      r12.z = r16.w ? r15.x : r9.w;
      r11.yzw = r16.www ? r17.wyz : r11.yzw;
      r12.xy = r11.zw * float2(0.5,-0.5) + float2(0.5,0.5);
      r11.y = saturate(r11.y);
      r9.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r12.xyz, r11.y).x;
      r9.w = -r10.y * 0.0625 + r9.w;
      r10.z = r16.z * r9.w + r10.z;
    }
    r9.w = saturate(r10.z * Globals[9].x + Globals[9].y);
    r7.w = min(r9.w, r7.w);
  } else {
    r7.w = 0;
  }
  r10.yz = Globals[8].zw * v0.xy;
  r11.yzw = Reflections.SampleLevel(LinearSampler_s_s, r10.yz, 0).xyz;
  r9.w = ReflectionsAlpha.SampleLevel(LinearSampler_s_s, r10.yz, 0).x;
  r12.yzw = SkinDiffuse.Load(r0.xyz).xyz;
  r10.yzw = Globals[17].xyw * r9.yyy;
  r10.yzw = r9.xxx * Globals[16].xyw + r10.yzw;
  r10.yzw = r9.zzz * Globals[18].xyw + r10.yzw;
  r10.yzw = Globals[19].xyw + r10.yzw;
  r0.zw = r10.yz / r10.ww;
  r10.yz = r0.zw * float2(10,10) + float2(-5,-5);
  r10.yz = saturate(float2(-4,-4) + abs(r10.yz));
  r10.yz = float2(1,1) + -r10.yz;
  r0.z = CloudShadowMap.SampleLevel(CloudShadowMap_s_s, r0.zw, 0).x;
  r0.z = r0.z * r10.y;
  r0.z = saturate(-r0.z * r10.z + 1);
  r12.x = Globals[3].w * r7.w;
  r10.yzw = -v2.xyz * r1.www + -Globals[3].xyz;
  r0.w = dot(r10.yzw, r10.yzw);
  r0.w = rsqrt(r0.w);
  r10.yzw = r10.yzw * r0.www;
  r0.w = dot(r5.wyz, -Globals[3].xyz);
  r13.x = dot(r5.wyz, r7.xyz);
  r13.y = saturate(r13.x);
  r13.z = saturate(dot(r5.wyz, r10.yzw));
  r10.y = saturate(dot(r10.yzw, r7.xyz));
  r14.xyz = GroundFillFlux_1234.yzw * r5.yzw;
  r15.xyzw = r5.wzzz * r5.yyzw;
  r10.z = r15.z * 3 + -1;
  r10.z = GroundFillFlux_5678.z * r10.z;
  r15.xyz = GroundFillFlux_5678.xyw * r15.xyw;
  r10.w = r5.y * r5.y;
  r10.w = r5.w * r5.w + -r10.w;
  r10.w = GroundFillFlux_9_Color.x * r10.w;
  r13.w = -0.488602996 * r14.x;
  r13.w = GroundFillFlux_1234.x * 0.282094985 + r13.w;
  r13.w = r14.y * 0.488602996 + r13.w;
  r13.w = r14.z * -0.488602996 + r13.w;
  r13.w = r15.x * 1.09254801 + r13.w;
  r13.w = r15.y * -1.09254801 + r13.w;
  r10.z = r10.z * 0.315391988 + r13.w;
  r10.z = r15.z * -1.09254801 + r10.z;
  r10.z = r10.w * 0.546274006 + r10.z;
  r10.z = max(0, r10.z);
  r14.xyz = GroundFillFlux_9_Color.yzw * r10.zzz;
  r15.xyzw = SkyLightingRed.Load(float4(0,0,0,0)).xyzw;
  r16.xyzw = SkyLightingGreen.Load(float4(0,0,0,0)).xyzw;
  r17.xyzw = SkyLightingBlue.Load(float4(0,0,0,0)).xyzw;
  r5.x = 1;
  r18.xyzw = float4(0.282094985,-0.488602996,0.488602996,-0.488602996) * r5.xyzw;
  r10.z = dot(r15.xyzw, r18.xyzw);
  r19.x = max(0, r10.z);
  r10.z = dot(r16.xyzw, r18.xyzw);
  r19.y = max(0, r10.z);
  r10.z = dot(r17.xyzw, r18.xyzw);
  r19.z = max(0, r10.z);
  r10.z = dot(r19.xyz, float3(0.212500006,0.715399981,0.0720999986));
  r18.xyz = r19.xyz + -r10.zzz;
  r18.xyz = SkyAmbientSaturation * r18.xyz + r10.zzz;
  if (bEnableGI != 0) {
    r19.xyz = WorldToLPVTransform._m10_m11_m12 * r9.yyy;
    r19.xyz = r9.xxx * WorldToLPVTransform._m00_m01_m02 + r19.xyz;
    r19.xyz = r9.zzz * WorldToLPVTransform._m20_m21_m22 + r19.xyz;
    r19.xyz = WorldToLPVTransform._m30_m31_m32 + r19.xyz;
    r20.xyz = WorldToLPVUnsnappedTransform._m10_m11_m12 * r9.yyy;
    r20.xyz = r9.xxx * WorldToLPVUnsnappedTransform._m00_m01_m02 + r20.xyz;
    r20.xyz = r9.zzz * WorldToLPVUnsnappedTransform._m20_m21_m22 + r20.xyz;
    r20.xyz = WorldToLPVUnsnappedTransform._m30_m31_m32 + r20.xyz;
    r21.xyz = WorldToLPVUnsnappedTransform2._m10_m11_m12 * r9.yyy;
    r21.xyz = r9.xxx * WorldToLPVUnsnappedTransform2._m00_m01_m02 + r21.xyz;
    r21.xyz = r9.zzz * WorldToLPVUnsnappedTransform2._m20_m21_m22 + r21.xyz;
    r21.xyz = WorldToLPVUnsnappedTransform2._m30_m31_m32 + r21.xyz;
    r22.xyz = min(float3(0.300000012,0.300000012,0.300000012), r20.xyz);
    r20.xyz = float3(1,1,1) + -r20.xyz;
    r20.xyz = min(float3(0.300000012,0.300000012,0.300000012), r20.xyz);
    r20.xyz = min(r22.xyz, r20.xyz);
    r10.z = min(r20.y, r20.z);
    r10.z = min(r20.x, r10.z);
    r10.z = 3.33333302 * r10.z;
    r10.z = max(0, r10.z);
    r10.w = cmp(0 < r10.z);
    if (r10.w != 0) {
      r19.w = 32 * r19.z;
      r20.xyz = float3(0.015625,0.015625,0.5) + r19.xyw;
      r20.w = floor(r20.z);
      r10.w = (int)r20.w;
      r10.w = (int)r10.w + 1;
      r10.w = min(31, (int)r10.w);
      r13.w = r20.z + -r20.w;
      r14.w = 1 + -r13.w;
      r22.z = (int)r10.w;
      r23.xyzw = LPVRed.SampleLevel(LPVSampler_s_s, r20.xyw, 0).xyzw;
      r22.xy = r20.xy;
      r24.xyzw = LPVRed.SampleLevel(LPVSampler_s_s, r22.xyz, 0).xyzw;
      r24.xyzw = r24.xyzw * r13.wwww;
      r23.xyzw = r14.wwww * r23.xyzw + r24.xyzw;
      r24.xyzw = LPVGreen.SampleLevel(LPVSampler_s_s, r20.xyw, 0).xyzw;
      r25.xyzw = LPVGreen.SampleLevel(LPVSampler_s_s, r22.xyz, 0).xyzw;
      r25.xyzw = r25.xyzw * r13.wwww;
      r24.xyzw = r14.wwww * r24.xyzw + r25.xyzw;
      r20.xyzw = LPVBlue.SampleLevel(LPVSampler_s_s, r20.xyw, 0).xyzw;
      r22.xyzw = LPVBlue.SampleLevel(LPVSampler_s_s, r22.xyz, 0).xyzw;
      r22.xyzw = r22.xyzw * r13.wwww;
      r20.xyzw = r14.wwww * r20.xyzw + r22.xyzw;
    } else {
      r23.xyzw = float4(0,0,0,0);
      r24.xyzw = float4(0,0,0,0);
      r20.xyzw = float4(0,0,0,0);
    }
    r10.z = NearCascadeDampeningFactor * r10.z;
    r10.w = cmp(0 < r10.z);
    if (r10.w != 0) {
      r22.xyz = WorldToLPVTransform._m10_m11_m12 * r5.yyy;
      r22.xyz = r5.www * WorldToLPVTransform._m00_m01_m02 + r22.xyz;
      r22.xyz = r5.zzz * WorldToLPVTransform._m20_m21_m22 + r22.xyz;
      r10.w = dot(r22.xyz, r22.xyz);
      r10.w = rsqrt(r10.w);
      r22.xyz = r22.xyz * r10.www;
      r19.xyz = r22.xyz * float3(0.03125,0.03125,0.03125) + r19.xyz;
      r22.xyz = min(float3(0.300000012,0.300000012,0.300000012), r19.xyz);
      r25.xyz = float3(1,1,1) + -r19.xyz;
      r25.xyz = min(float3(0.300000012,0.300000012,0.300000012), r25.xyz);
      r22.xyz = min(r25.xyz, r22.xyz);
      r10.w = min(r22.y, r22.z);
      r10.w = min(r22.x, r10.w);
      r10.w = 3.33333302 * r10.w;
      r10.w = max(0, r10.w);
      r10.w = cmp(0 < r10.w);
      if (r10.w != 0) {
        r19.w = 32 * r19.z;
        r19.xyz = float3(0.015625,0.015625,0.5) + r19.xyw;
        r19.w = floor(r19.z);
        r13.w = (int)r19.w;
        r13.w = (int)r13.w + 1;
        r13.w = min(31, (int)r13.w);
        r14.w = r19.z + -r19.w;
        r18.w = 1 + -r14.w;
        r22.z = (int)r13.w;
        r25.xyz = LPVRed.SampleLevel(LPVSampler_s_s, r19.xyw, 0).yzw;
        r22.xy = r19.xy;
        r26.xyz = LPVRed.SampleLevel(LPVSampler_s_s, r22.xyz, 0).yzw;
        r26.xyz = r26.xyz * r14.www;
        r25.xyz = r18.www * r25.xyz + r26.xyz;
        r26.xyz = LPVGreen.SampleLevel(LPVSampler_s_s, r19.xyw, 0).yzw;
        r27.xyz = LPVGreen.SampleLevel(LPVSampler_s_s, r22.xyz, 0).yzw;
        r27.xyz = r27.xyz * r14.www;
        r26.xyz = r18.www * r26.xyz + r27.xyz;
        r19.xyz = LPVBlue.SampleLevel(LPVSampler_s_s, r19.xyw, 0).yzw;
        r22.xyz = LPVBlue.SampleLevel(LPVSampler_s_s, r22.xyz, 0).yzw;
        r22.xyz = r22.xyz * r14.www;
        r19.xyz = r18.www * r19.xyz + r22.xyz;
      } else {
        r25.xyz = float3(0,0,0);
        r26.xyz = float3(0,0,0);
        r19.xyz = float3(0,0,0);
      }
      r22.xyz = r25.xyz + -r23.yzw;
      r25.xyz = r26.xyz + -r24.yzw;
      r19.xyz = r19.xyz + -r20.yzw;
      r13.w = dot(r23.yzw, r23.yzw);
      r13.w = sqrt(r13.w);
      r13.w = max(0.0500000007, r13.w);
      r26.yzw = r23.yzw / r13.www;
      r13.w = dot(r22.xyz, r22.xyz);
      r13.w = sqrt(r13.w);
      r13.w = max(0.0500000007, r13.w);
      r22.yzw = r22.xyz / r13.www;
      r26.x = 1;
      r22.x = 1;
      r13.w = saturate(dot(r26.xyzw, r22.xyzw));
      r14.w = dot(r24.yzw, r24.yzw);
      r14.w = sqrt(r14.w);
      r14.w = max(0.0500000007, r14.w);
      r22.yzw = r24.yzw / r14.www;
      r14.w = dot(r25.xyz, r25.xyz);
      r14.w = sqrt(r14.w);
      r14.w = max(0.0500000007, r14.w);
      r25.yzw = r25.xyz / r14.www;
      r22.x = 1;
      r25.x = 1;
      r14.w = saturate(dot(r22.xyzw, r25.xyzw));
      r18.w = dot(r20.yzw, r20.yzw);
      r18.w = sqrt(r18.w);
      r18.w = max(0.0500000007, r18.w);
      r22.yzw = r20.yzw / r18.www;
      r18.w = dot(r19.xyz, r19.xyz);
      r18.w = sqrt(r18.w);
      r18.w = max(0.0500000007, r18.w);
      r19.yzw = r19.xyz / r18.www;
      r22.x = 1;
      r19.x = 1;
      r18.w = saturate(dot(r22.xyzw, r19.xyzw));
      r13.w = r14.w + r13.w;
      r13.w = r13.w + r18.w;
      r13.w = 0.333332986 * r13.w;
      r13.w = log2(r13.w);
      r13.w = 0.0500000007 * r13.w;
      r13.w = exp2(r13.w);
      r19.xyzw = r23.xyzw * r13.wwww;
      r22.xyzw = r24.xyzw * r13.wwww;
      r25.xyzw = r20.xyzw * r13.wwww;
      r23.xyzw = r10.wwww ? r19.xyzw : r23.xyzw;
      r24.xyzw = r10.wwww ? r22.xyzw : r24.xyzw;
      r20.xyzw = r10.wwww ? r25.xyzw : r20.xyzw;
    }
    r19.xyzw = float4(0.886227012,1.02332699,-1.02332699,1.02332699) * r5.xyzw;
    r10.w = dot(r23.xyzw, r19.xyzw);
    r10.w = max(0, r10.w);
    r13.w = dot(r24.xyzw, r19.xyzw);
    r13.w = max(0, r13.w);
    r14.w = dot(r20.xyzw, r19.xyzw);
    r14.w = max(0, r14.w);
    r22.xyz = min(float3(0.300000012,0.300000012,0.300000012), r21.xyz);
    r21.xyz = float3(1,1,1) + -r21.xyz;
    r21.xyz = min(float3(0.300000012,0.300000012,0.300000012), r21.xyz);
    r21.xyz = min(r22.xyz, r21.xyz);
    r18.w = min(r21.y, r21.z);
    r18.w = min(r21.x, r18.w);
    r18.w = 3.33333302 * r18.w;
    r18.w = max(0, r18.w);
    r21.x = cmp(0 < r18.w);
    if (r21.x != 0) {
      r21.xyz = WorldToLPVTransform2._m10_m11_m12 * r9.yyy;
      r21.xyz = r9.xxx * WorldToLPVTransform2._m00_m01_m02 + r21.xyz;
      r9.xyz = r9.zzz * WorldToLPVTransform2._m20_m21_m22 + r21.xyz;
      r21.xyz = WorldToLPVTransform2._m30_m31_m32 + r9.xyz;
      r21.w = 32 * r21.z;
      r21.xyz = float3(0.015625,0.015625,0.5) + r21.xyw;
      r21.w = floor(r21.z);
      r9.x = (int)r21.w;
      r9.x = (int)r9.x + 1;
      r9.x = min(31, (int)r9.x);
      r9.y = r21.z + -r21.w;
      r9.z = 1 + -r9.y;
      r22.z = (int)r9.x;
      r25.xyzw = LPVRed2.SampleLevel(LPVSampler_s_s, r21.xyw, 0).xyzw;
      r22.xy = r21.xy;
      r26.xyzw = LPVRed2.SampleLevel(LPVSampler_s_s, r22.xyz, 0).xyzw;
      r26.xyzw = r26.xyzw * r9.yyyy;
      r23.xyzw = r9.zzzz * r25.xyzw + r26.xyzw;
      r25.xyzw = LPVGreen2.SampleLevel(LPVSampler_s_s, r21.xyw, 0).xyzw;
      r26.xyzw = LPVGreen2.SampleLevel(LPVSampler_s_s, r22.xyz, 0).xyzw;
      r26.xyzw = r26.xyzw * r9.yyyy;
      r24.xyzw = r9.zzzz * r25.xyzw + r26.xyzw;
      r21.xyzw = LPVBlue2.SampleLevel(LPVSampler_s_s, r21.xyw, 0).xyzw;
      r22.xyzw = LPVBlue2.SampleLevel(LPVSampler_s_s, r22.xyz, 0).xyzw;
      r22.xyzw = r22.xyzw * r9.yyyy;
      r20.xyzw = r9.zzzz * r21.xyzw + r22.xyzw;
    }
    r9.x = dot(r23.xyzw, r19.xyzw);
    r9.x = max(0, r9.x);
    r9.x = r9.x * r18.w;
    r9.x = r10.w * r10.z + r9.x;
    r10.w = dot(r24.xyzw, r19.xyzw);
    r10.w = max(0, r10.w);
    r10.w = r10.w * r18.w;
    r9.y = r13.w * r10.z + r10.w;
    r10.w = dot(r20.xyzw, r19.xyzw);
    r10.w = max(0, r10.w);
    r10.w = r10.w * r18.w;
    r9.z = r14.w * r10.z + r10.w;
    r9.xyz = Globals[2].xyz * r9.xyz;
    r9.xyz = float3(0.318309993,0.318309993,0.318309993) * r9.xyz;
  } else {
    r9.xyz = float3(0,0,0);
  }
  r10.zw = Globals[2].ww * r1.yz;
  r14.xyz = r14.xyz * float3(6,6,6) + r18.xyz;
  r9.xyz = r10.www * r9.xyz;
  r9.xyz = r10.zzz * r14.xyz + r9.xyz;
  r10.z = saturate(r0.w);
  if (r8.z != 0) {
    r10.w = r3.w * r3.w;
    r13.w = r10.w * 2 + 1.13999999;
    r13.w = r10.w / r13.w;
    r13.w = 1 + -r13.w;
    r14.x = r10.w * 2.22222209 + 0.200000003;
    r10.w = r10.w / r14.x;
    r14.x = -r13.x * r13.x + 1;
    r14.y = -r0.w * r0.w + 1;
    r14.x = saturate(r14.x * r14.y);
    r14.x = sqrt(r14.x);
    r14.y = max(r13.x, r0.w);
    r14.x = r14.x / r14.y;
    r14.yzw = -r5.wyz * r13.xxx + r7.xyz;
    r18.xyz = -r5.wyz * r0.www + -Globals[3].xyz;
    r14.y = dot(r14.yzw, r18.xyz);
    r10.w = r14.y * r10.w;
    r10.w = saturate(r10.w * r14.x);
    r10.w = saturate(r13.w + r10.w);
    r0.w = r10.z * r10.w;
  }
  if (r8.w != 0) {
    r8.w = r0.w + r4.y;
    r4.y = 1 + r4.y;
    r4.y = r4.y * r4.y;
    r4.y = r8.w / r4.y;
    r8.w = saturate(r4.y + -r0.w);
    r14.x = r7.w * Globals[3].w + r8.w;
    r0.w = r4.y;
  } else {
    r14.x = r12.x;
  }
  r0.w = saturate(r0.w);
  r18.xyz = Globals[2].xyz + -Globals[0].xyz;
  r18.xyz = r0.zzz * r18.xyz + Globals[0].xyz;
  r4.y = saturate(dot(r5.wyz, Globals[39].xyz));
  r19.xyz = Globals[38].xyz * r4.yyy;
  r18.xyz = r18.xyz * r0.www + r19.xyz;
  r0.w = r14.x * r1.z;
  r14.yzw = r18.xyz * r0.www;
  r12.xyzw = r8.xxxx ? r12.xyzw : r14.xyzw;
  r0.z = r12.x * r0.z;
  r0.w = saturate(r0.z);
  r0.w = r0.w * r1.z;
  r4.y = r4.z * -3 + 1.5;
  r14.xyz = r5.wyz * r4.yyy + -Globals[3].xyz;
  r4.y = saturate(dot(r7.xyz, -r14.xyz));
  r7.w = 2.5 + -r4.z;
  r4.y = log2(r4.y);
  r4.y = r7.w * r4.y;
  r4.y = exp2(r4.y);
  r14.xyzw = float4(0.282094985,0.488602996,-0.488602996,0.488602996) * r5.xyzw;
  r5.x = dot(r15.xyzw, r14.xyzw);
  r15.x = max(0, r5.x);
  r5.x = dot(r16.xyzw, r14.xyzw);
  r15.y = max(0, r5.x);
  r5.x = dot(r17.xyzw, r14.xyzw);
  r15.z = max(0, r5.x);
  r5.x = dot(r15.xyz, float3(0.212500006,0.715399981,0.0720999986));
  r14.xyz = r15.xyz + -r5.xxx;
  r14.xyz = SkyAmbientSaturation * r14.xyz + r5.xxx;
  r5.x = r4.z * r4.z;
  r5.x = r5.x * 11.8000002 + 0.200000003;
  r14.xyz = r14.xyz * r5.xxx;
  r15.xyz = Globals[2].xyz * r4.yyy;
  r15.xyz = r15.xyz * r0.www;
  r14.xyz = r14.xyz * r1.yyy;
  r14.xyz = r15.xyz * float3(10,10,10) + r14.xyz;
  r14.xyz = r14.xyz * r4.zzz;
  r12.xyz = r2.xyz * r14.xyz + r12.yzw;
  r9.xyz = r12.xyz + r9.xyz;
  r4.yz = r2.ww * float2(0.125,0.785398006) + float2(0.25,1.57079601);
  r0.w = r10.z * r4.y;
  r5.x = log2(r13.z);
  r7.w = r5.x * r2.w;
  r7.w = exp2(r7.w);
  r0.w = r7.w * r0.w;
  r12.xyz = float3(1,1,1) + -r3.xyz;
  r7.w = 1 + -r10.y;
  r8.x = r7.w * r7.w;
  r8.x = r8.x * r8.x;
  r7.w = r8.x * r7.w;
  r14.xyz = r12.xyz * r7.www + r3.xyz;
  r4.z = rsqrt(r4.z);
  r8.x = 1 + -r4.z;
  r8.w = r10.z * r8.x + r4.z;
  r10.y = r13.y * r8.x + r4.z;
  r8.w = r10.y * r8.w;
  r8.w = 1 / r8.w;
  r0.w = r8.w * r0.w;
  r14.xyz = r14.xyz * r0.www;
  r14.xyz = Globals[1].xyz * r14.xyz;
  r0.z = r0.z * r1.z;
  r0.w = r13.y + r13.y;
  r15.xyz = r0.www * r5.wyz + -r7.xyz;
  r16.xyz = EnvironmentCube.SampleLevel(CubeMapSampler_s_s, r15.xyz, r6.w).xyz;
  r17.xyz = saturate(r8.yyy + -r3.xyz);
  r0.w = 1 + -r13.y;
  r6.w = r0.w * r0.w;
  r6.w = r6.w * r6.w;
  r0.w = r6.w * r0.w;
  r17.xyz = r17.xyz * r0.www + r3.xyz;
  r6.w = r13.y + r1.y;
  r6.w = log2(r6.w);
  r8.y = r8.y * r6.w;
  r8.y = exp2(r8.y);
  r8.y = r8.y + r1.y;
  r8.y = saturate(-1 + r8.y);
  r18.xyz = -r16.xyz + r11.yzw;
  r16.xyz = r9.www * r18.xyz + r16.xyz;
  r17.xyz = r17.xyz * r8.yyy;
  r16.xyz = r17.xyz * r16.xyz;
  r9.xyz = r9.xyz * r2.xyz + r16.xyz;
  r8.y = cmp(0 < r4.w);
  if (r8.y != 0) {
    r15.xyz = EnvironmentCube.SampleLevel(CubeMapSampler_s_s, r15.xyz, 0).xyz;
    r6.w = 0.959999979 * r6.w;
    r6.w = exp2(r6.w);
    r1.y = r6.w + r1.y;
    r1.y = saturate(-1 + r1.y);
    r11.yzw = -r15.xyz + r11.yzw;
    r11.yzw = r9.www * r11.yzw + r15.xyz;
    r0.w = r0.w * 0.920000017 + 0.0399999991;
    r0.w = r0.w * r4.w;
    r11.yzw = r11.yzw * r1.yyy + -r9.xyz;
    r11.yzw = r0.www * r11.yzw + r9.xyz;
    r0.w = 714.358765 * r10.z;
    r1.y = 5712.87012 * r5.x;
    r1.y = exp2(r1.y);
    r0.w = r1.y * r0.w;
    r1.y = r7.w * 0.959999979 + 0.0399999991;
    r5.x = r10.z * 0.985073984 + 0.0149259996;
    r6.w = r13.y * 0.985073984 + 0.0149259996;
    r5.x = r6.w * r5.x;
    r5.x = 1 / r5.x;
    r0.w = r5.x * r0.w;
    r0.w = r1.y * r0.w;
    r13.yzw = Globals[1].xyz * r0.www;
    r13.yzw = r13.yzw * r0.zzz;
    r9.xyz = r13.yzw * r4.www + r11.yzw;
  }
  r9.xyz = r14.xyz * r0.zzz + r9.xyz;
  r0.z = EmissiveScale * r4.x;
  r9.xyz = r0.zzz * r2.xyz + r9.xyz;
  r0.z = Globals[49].z * 2.0999999;
  r14.xz = r10.xx;
  r14.yw = r11.xx;
  r11.xyzw = r14.xyzw * r0.zzzz;
  r0.z = log2(r1.x);
  r0.z = r0.z * 2.257725 + -4.24227524;
  r0.z = max(0, r0.z);
  r14.z = (int)r0.z;
  r14.xy = (uint2)r0.xy >> int2(6,6);
  r14.w = 0;
  r0.xy = LightLookup.Load(r14.xyzw).xy;
  r0.z = (int)r0.x & 0x0000ffff;
  r0.x = (uint)r0.x >> 16;
  r0.z = (int)r0.y + (int)r0.z;
  r0.w = r3.w * r3.w;
  r1.y = r0.w * 2 + 1.13999999;
  r1.y = r0.w / r1.y;
  r1.y = 1 + -r1.y;
  r3.w = r0.w * 2.22222209 + 0.200000003;
  r0.w = r0.w / r3.w;
  r3.w = -r13.x * r13.x + 1;
  r10.xzw = -r5.wyz * r13.xxx + r7.xyz;
  r14.xyz = r9.xyz;
  r14.w = r0.y;
  while (true) {
    r4.x = cmp((uint)r14.w >= (uint)r0.z);
    if (r4.x != 0) break;
    r4.x = t32.Load(r14.w).x;
    r13.yzw = -r1.xxx * v2.xyz + PointLights[r4.x].xyz;
    r4.w = dot(r13.yzw, r13.yzw);
    r5.x = cmp(r4.w < PointLights[r4.x].w);
    if (r5.x != 0) {
      r8.yw = (int2)r4.xx + int2(1,2);
      r4.x = rsqrt(r4.w);
      r13.yzw = r13.yzw * r4.xxx;
      r4.x = r4.w * r4.x;
      r4.x = saturate(r4.x * PointLights[r8.w].x + PointLights[r8.w].y);
      r15.xyz = -v2.xyz * r1.www + r13.yzw;
      r4.w = dot(r15.xyz, r15.xyz);
      r4.w = rsqrt(r4.w);
      r5.x = 1 + -r4.x;
      r4.x = r4.x * r4.x;
      r4.x = r4.x * 12.21 + 1;
      r4.x = r5.x / r4.x;
      r5.x = dot(r5.wyz, r13.yzw);
      r6.w = saturate(r5.x);
      r7.w = dot(r5.wyz, r15.xyz);
      r7.w = saturate(r7.w * r4.w);
      r9.w = dot(r15.xyz, r7.xyz);
      r4.w = saturate(r9.w * r4.w);
      if (r8.z != 0) {
        r9.w = -r5.x * r5.x + 1;
        r9.w = saturate(r9.w * r3.w);
        r9.w = sqrt(r9.w);
        r12.w = max(r13.x, r5.x);
        r9.w = r9.w / r12.w;
        r15.xyz = -r5.wyz * r5.xxx + r13.yzw;
        r5.x = dot(r10.xzw, r15.xyz);
        r5.x = r5.x * r0.w;
        r5.x = saturate(r5.x * r9.w);
        r5.x = saturate(r5.x + r1.y);
        r5.x = r6.w * r5.x;
      } else {
        r5.x = r6.w;
      }
      r9.w = r6.w * r4.y;
      r7.w = log2(r7.w);
      r7.w = r7.w * r2.w;
      r7.w = exp2(r7.w);
      r7.w = r9.w * r7.w;
      r4.w = 1 + -r4.w;
      r9.w = r4.w * r4.w;
      r9.w = r9.w * r9.w;
      r4.w = r9.w * r4.w;
      r15.xyz = r12.xyz * r4.www + r3.xyz;
      r4.w = r6.w * r8.x + r4.z;
      r4.w = r4.w * r10.y;
      r4.w = 1 / r4.w;
      r4.w = r7.w * r4.w;
      r15.xyz = r15.xyz * r4.www;
      r15.xyz = PointLights[r8.w].www * r15.xyz;
      r4.x = r4.x * r1.z;
      r16.xyz = PointLights[r8.y].xyz * r4.xxx;
      r15.xyz = r5.xxx * r2.xyz + r15.xyz;
      r15.xyz = r16.xyz * r15.xyz;
      r4.x = cmp((int)PointLights[r8.w].z != 255);
      if (r4.x != 0) {
        r4.x = (uint)PointLights[r8.w].z >> 8;
        r4.w = (uint)r4.x << 2;
        r16.xy = mad((int2)r4.xx, int2(4,4), int2(1,2));
        r16.xzw = Projections[r16.x].xyz * -r13.zzz;
        r16.xzw = Projections[r4.w].xyz * -r13.yyy + r16.xzw;
        r16.xyz = Projections[r16.y].xyz * -r13.www + r16.xzw;
        r4.x = 255 & (int)PointLights[r8.w].z;
        r16.w = (int)r4.x;
        r13.yzw = PointlightTextures.SampleLevel(CubeMapSampler_s_s, r16.xyzw, 0).xyz;
        r15.xyz = r15.xyz * r13.yzw;
      }
      r14.xyz = r15.xyz + r14.xyz;
    }
    r14.w = (int)r14.w + 1;
  }
  r0.x = (int)r0.z + (int)r0.x;
  r0.yz = float2(-0.536373019,0.471713006) * r11.zz;
  r4.xw = float2(0.251850992,0.617214978) * r11.zz;
  r8.yw = float2(0.301916987,-0.243903995) * r11.zz;
  r9.xyzw = float4(-0.798238993,-0.418027014,-0.190623999,-0.695239007) * r11.zzzz;
  r11.xz = float2(0.951626003,-0.165849) * r11.xz;
  r15.xyzw = r14.xyzw;
  while (true) {
    r5.x = cmp((uint)r15.w >= (uint)r0.x);
    if (r5.x != 0) break;
    r5.x = t32.Load(r15.w).x;
    r6.w = (int)r5.x + 1;
    r13.yzw = -r1.xxx * v2.xyz + SpotLights[r5.x].xyz;
    r7.w = dot(r13.yzw, r13.yzw);
    r12.w = dot(r13.yzw, SpotLights[r6.w].xyz);
    r16.x = SpotLights[r5.x].w * r7.w;
    r16.x = SpotLights[r5.x].w * r16.x;
    r16.x = cmp(r16.x < 1);
    r6.w = cmp(SpotLights[r6.w].w < -r12.w);
    r6.w = r6.w ? r16.x : 0;
    if (r6.w != 0) {
      r6.w = (int)r5.x + 2;
      r16.x = rsqrt(r7.w);
      r12.w = r16.x * -r12.w;
      r12.w = saturate(r12.w * SpotLights[r6.w].x + SpotLights[r6.w].y);
      r16.y = cmp(r12.w != 0.000000);
      if (r16.y != 0) {
        r16.y = (uint)SpotLights[r6.w].w >> 24;
        r12.w = r12.w * r12.w;
        r16.z = cmp((int)r16.y != 255);
        if (r16.z != 0) {
          r16.z = (uint)r16.y << 2;
          r17.xyzw = Globals[r16.z+63].xyzw * -r13.yyyy + Globals[r16.z+66].xyzw;
          r17.xyzw = Globals[r16.z+64].xyzw * -r13.zzzz + r17.xyzw;
          r17.xyzw = Globals[r16.z+65].xyzw * -r13.wwww + r17.xyzw;
          r16.z = 1 / r17.w;
          r16.w = r17.z * r16.z;
          r18.z = (uint)r16.y;
          r17.zw = r17.xy * r16.zz + r0.yz;
          r18.x = r11.w * 0.471713006 + r17.z;
          r18.y = -r11.w * -0.536373019 + r17.w;
          r17.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r16.w).x;
          r19.xy = r17.xy * r16.zz + r4.xw;
          r18.x = r11.w * 0.617214978 + r19.x;
          r18.y = -r11.w * 0.251850992 + r19.y;
          r17.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r16.w).x;
          r17.z = r17.z + r17.w;
          r19.xy = r17.xy * r16.zz + r8.yw;
          r18.x = r11.w * -0.243903995 + r19.x;
          r18.y = -r11.w * 0.301916987 + r19.y;
          r17.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r16.w).x;
          r17.z = r17.z + r17.w;
          r19.xy = r17.xy * r16.zz + r9.xy;
          r18.x = r11.w * -0.418027014 + r19.x;
          r18.y = -r11.w * -0.798238993 + r19.y;
          r17.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r16.w).x;
          r17.z = r17.z + r17.w;
          r19.xy = r17.xy * r16.zz + r9.zw;
          r18.x = r11.w * -0.695239007 + r19.x;
          r18.y = -r11.w * -0.190623999 + r19.y;
          r17.w = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r16.w).x;
          r17.z = r17.z + r17.w;
          r17.xy = r17.xy * r16.zz + r11.xz;
          r18.x = r11.y * -0.165849 + r17.x;
          r18.y = -r11.w * 0.951626003 + r17.y;
          r16.z = ShadowMapTexture.SampleCmpLevelZero(ShadowComparisonFilter_s_s, r18.xyz, r16.w).x;
          r16.z = r17.z + r16.z;
          r16.z = -r16.z * 0.166666999 + 1;
          r16.y = -r16.z * SpotLightShadowFade[r16.y].x + 1;
          r12.w = r16.y * r12.w;
        }
        r16.y = cmp(0 < r12.w);
        if (r16.y != 0) {
          r16.y = -SpotLights[r6.w].z + 1;
          r16.z = (int)r5.x + 3;
          if (8 == 0) r16.w = 0; else if (8+16 < 32) {           r16.w = (uint)SpotLights[r6.w].w << (32-(8 + 16)); r16.w = (uint)r16.w >> (32-8);          } else r16.w = (uint)SpotLights[r6.w].w >> 16;
          r13.yzw = r16.xxx * r13.yzw;
          r7.w = r16.x * r7.w;
          r5.x = SpotLights[r5.x].w * r7.w;
          r5.x = saturate(r5.x * SpotLights[r6.w].z + r16.y);
          r17.xyz = -v2.xyz * r1.www + r13.yzw;
          r7.w = dot(r17.xyz, r17.xyz);
          r7.w = rsqrt(r7.w);
          r16.x = 1 + -r5.x;
          r5.x = r5.x * r5.x;
          r5.x = r5.x * 12.21 + 1;
          r5.x = r16.x / r5.x;
          r16.x = dot(r5.wyz, r13.yzw);
          r16.y = saturate(r16.x);
          r17.w = dot(r5.wyz, r17.xyz);
          r17.w = saturate(r17.w * r7.w);
          r17.x = dot(r17.xyz, r7.xyz);
          r7.w = saturate(r17.x * r7.w);
          if (r8.z != 0) {
            r17.x = -r16.x * r16.x + 1;
            r17.x = saturate(r17.x * r3.w);
            r17.x = sqrt(r17.x);
            r17.y = max(r16.x, r13.x);
            r17.x = r17.x / r17.y;
            r13.yzw = -r5.wyz * r16.xxx + r13.yzw;
            r13.y = dot(r10.xzw, r13.yzw);
            r13.y = r13.y * r0.w;
            r13.y = saturate(r13.y * r17.x);
            r13.y = saturate(r13.y + r1.y);
            r13.y = r16.y * r13.y;
          } else {
            r13.y = r16.y;
          }
          r13.z = r16.y * r4.y;
          r13.w = log2(r17.w);
          r13.w = r13.w * r2.w;
          r13.w = exp2(r13.w);
          r13.z = r13.z * r13.w;
          r7.w = 1 + -r7.w;
          r13.w = r7.w * r7.w;
          r13.w = r13.w * r13.w;
          r7.w = r13.w * r7.w;
          r17.xyz = r12.xyz * r7.www + r3.xyz;
          r7.w = r16.y * r8.x + r4.z;
          r7.w = r7.w * r10.y;
          r7.w = 1 / r7.w;
          r7.w = r13.z * r7.w;
          r17.xyz = r17.xyz * r7.www;
          r17.xyz = SpotLights[r16.z].www * r17.xyz;
          r5.x = r12.w * r5.x;
          r5.x = r5.x * r1.z;
          r16.xyz = SpotLights[r16.z].xyz * r5.xxx;
          r13.yzw = r13.yyy * r2.xyz + r17.xyz;
          r13.yzw = r16.xyz * r13.yzw;
          r5.x = cmp((int)r16.w != 255);
          if (r5.x != 0) {
            bitmask.x = ((~(-1 << 16)) << 2) & 0xffffffff;  r5.x = (((uint)SpotLights[r6.w].w << 2) & bitmask.x) | ((uint)0 & ~bitmask.x);
            r16.xyz = int3(1,2,3) + (int3)r5.xxx;
            r17.xyz = Projections[r5.x].xyw * r6.xxx + Projections[r16.z].xyw;
            r17.xyz = Projections[r16.x].xyw * r6.yyy + r17.xyz;
            r16.xyz = Projections[r16.y].xyw * r6.zzz + r17.xyz;
            r5.x = 1 / r16.z;
            r16.xy = r16.xy * r5.xx;
            r5.x = cmp((int)r16.w == 254);
            if (r5.x != 0) {
              r17.xyz = t28.SampleLevel(LinearSampler_s_s, r16.xy, 0).xyz;
            } else {
              r16.z = (uint)r16.w;
              r17.xyz = SpotlightTextures.SampleLevel(LinearSampler_s_s, r16.xyz, 0).xyz;
            }
            r13.yzw = r17.xyz * r13.yzw;
          }
          r15.xyz = r15.xyz + r13.yzw;
        }
      }
    }
    r15.w = (int)r15.w + 1;
  }
  o0.xyz = r15.xyz;
  o0.w = 0;
  return;
}