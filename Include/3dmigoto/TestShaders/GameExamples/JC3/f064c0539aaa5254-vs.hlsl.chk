// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:40:25 2019

struct SPositionInfo
{
    uint xy_comp;                  // Offset:    0
    uint zw_comp;                  // Offset:    4
    uint normal;                   // Offset:    8
};

struct STriangleOutputBuffer
{
    uint m_IndexStart;             // Offset:    0
};

struct SPatchOutputBuffer
{
    int m_PatchX;                  // Offset:    0
    int m_PatchZ;                  // Offset:    4
    uint m_PatchIndex;             // Offset:    8
    uint m_NumOfQuads;             // Offset:   12
    uint m_TriangleCount;          // Offset:   16
    uint m_PatchTriangleCount[4];  // Offset:   20
    uint m_PatchTriangleOffset[4]; // Offset:   36
    float3 m_LocalCamera;          // Offset:   52
    float3 m_CameraPos;            // Offset:   64
};

cbuffer cb1 : register(b1)
{
  float4 m_WorldPos_PatchLod : packoffset(c0);
  float2 VertexTextureSize : packoffset(c1);
  float m_MeshOffset : packoffset(c1.z);
  float m_ChildMapBorder : packoffset(c1.w);
}

cbuffer cb2 : register(b2)
{
  float4 m_PatchPackDataXZ[4] : packoffset(c0);
  float4 m_PatchPackDataY : packoffset(c4);
  uint m_BaseLod : packoffset(c5);
}

cbuffer cb3 : register(b3)
{
  uint m_StartIndex : packoffset(c0);
  uint m_Lod : packoffset(c0.y);
}

SamplerState TileMaskSampler_s_s : register(s1);
StructuredBuffer<SPositionInfo> PositionInfo : register(t0);
Texture2D<float4> TileMask : register(t1);
Texture2D<float4> TileMaskFadeIn : register(t2);
Buffer<uint> IndexBuffer : register(t3);
ByteAddressBuffer VertexBuffer : register(t4);
StructuredBuffer<STriangleOutputBuffer> IndexIntoIndexBuffer : register(t5);
StructuredBuffer<SPatchOutputBuffer> PatchOutputBuffer : register(t6);


// 3Dmigoto declarations
#define cmp -


void main(
  uint v0 : SV_VertexID0,
  uint v1 : SV_InstanceID0,
  out float4 o0 : TEXCOORD1,
  out float4 o1 : TEXCOORD2,
  out float4 o2 : TEXCOORD3)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_resource_raw t4
// Needs manual fix for instruction:
// unknown dcl_: dcl_input_sgv v0.x, vertex_id
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = m_Lod << 2;
  r0.x = (int)r0.x + 36;
// Structured buffer using dynamic offset (needs manual fix):
ld_structured_indexable(structured_buffer, stride=76)(mixed,mixed,mixed,mixed) r0.x, cb3[0].x, r0.x, t6.xxxx
  uiDest.x = (uint)v0.x / 3;
  r2.x = (uint)v0.x % 3;
  r1.x = uiDest.x;
  r0.x = (int)r0.x + (int)r1.x;
  r0.x = IndexIntoIndexBuffer[r0.x].m_IndexStart;
  r0.x = (int)r0.x + (int)r2.x;
  r0.x = IndexBuffer.Load(r0.x).x;
  r0.x = (uint)r0.x << 3;
// No code for instruction (needs manual fix):
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.xy, r0.x, t4.xyxx
  r0.x = PositionInfo[r0.x].xy_comp;
  r0.z = PositionInfo[r0.x].zw_comp;
  r0.w = PositionInfo[r0.x].normal;
  if (8 == 0) r1.x = 0; else if (8+8 < 32) {   r1.x = (uint)r0.w << (32-(8 + 8)); r1.x = (uint)r1.x >> (32-8);  } else r1.x = (uint)r0.w >> 8;
  if (8 == 0) r1.y = 0; else if (8+16 < 32) {   r1.y = (uint)r0.w << (32-(8 + 16)); r1.y = (uint)r1.y >> (32-8);  } else r1.y = (uint)r0.w >> 16;
  r1.xy = (uint2)r1.xy;
  r1.zw = cmp(float2(127,127) < r1.xy);
  r2.xy = float2(-256,-256) + r1.xy;
  r1.yz = r1.zw ? r2.xy : r1.xy;
  r2.xyz = (int3)r0.xzw & int3(0xffff,0xffff,255);
  r0.x = (uint)r0.x >> 16;
  r0.x = (uint)r0.x;
  r0.x = m_PatchPackDataY.y * r0.x;
  r3.y = r0.x * 1.52590219e-05 + m_PatchPackDataY.x;
  r0.xzw = (uint3)r2.xyz;
  r1.w = cmp(127 < r0.w);
  r2.x = -256 + r0.w;
  r1.x = r1.w ? r2.x : r0.w;
  r0.xz = float2(1.52590219e-05,1.52590219e-05) * r0.xz;
  r1.xyz = float3(0.00787401572,0.00787401572,0.00787401572) * r1.xyz;
  r0.w = (uint)m_WorldPos_PatchLod.w;
  r1.w = (uint)r0.w << 2;
  r1.w = -28 + (int)r1.w;
  r1.w = (uint)r1.w;
  r2.xyz = r1.xyz * r1.www;
  o1.xyz = r1.xyz;
  r1.x = (int)r0.w + -m_BaseLod;
  r0.w = cmp(9 < (uint)r0.w);
  r1.x = min(3, (uint)r1.x);
  r1.y = 65535 / m_PatchPackDataXZ[r1.x].z;
  r1.y = m_PatchPackDataXZ[r1.x].y * r1.y;
  r3.xz = r0.xz * r1.yy + m_PatchPackDataXZ[r1.x].xx;
  r0.xz = m_WorldPos_PatchLod.xz + r3.xz;
  r0.xz = float2(0.5,0.5) + r0.xz;
  r0.xz = r0.xz * float2(3.05175781e-05,3.05175781e-05) + float2(0.5,0.5);
  r1.x = TileMask.SampleLevel(TileMaskSampler_s_s, r0.xz, 0).x;
  r0.x = TileMaskFadeIn.SampleLevel(TileMaskSampler_s_s, r0.xz, 0).x;
  r0.x = 1 + -r0.x;
  r0.x = saturate(-r0.x * 2.0999999 + 1);
  r1.yzw = r2.xyz * r0.xxx;
  r1.yzw = r0.www ? float3(-0,-0,-0) : -r1.yzw;
  r0.x = saturate(2.0999999 * r1.x);
  r0.x = 1 + -r0.x;
  r2.xyz = r2.xyz * r0.xxx;
  r0.xzw = r0.www ? -r2.xyz : float3(-0,-0,-0);
  r0.xzw = r3.xyz + r0.xzw;
  o0.xyz = r0.xzw + r1.yzw;
  r0.x = (int)r0.y & 0x0000ffff;
  r0.y = (uint)r0.y >> 16;
  r0.xy = (uint2)r0.xy;
  r0.zw = VertexTextureSize.xy * r0.xy;
  r0.xy = float2(1.52590219e-05,1.52590219e-05) * r0.zw;
  r0.xy = floor(r0.xy);
  o2.xy = r0.xy / VertexTextureSize.xy;
  o2.zw = r0.xy;
  return;
}