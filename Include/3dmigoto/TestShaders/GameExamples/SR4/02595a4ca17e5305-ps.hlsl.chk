// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:47 2019

cbuffer cb4 : register(b4)
{
  float4 cb4[5] : packoffset(c0);
}

cbuffer vc0 : register(b0)
{
  float4 Detail_Normal_Map_Tiling : packoffset(c0);
  float2 Detail_Normal_Map_Amount : packoffset(c1);
  float2 High_Detail_Cutoff_Dist : packoffset(c2);
  float Normal_Map_Refl_Offset : packoffset(c3);
  float Reflection_Plane_Height : packoffset(c4);
  float Base_Reflectivity : packoffset(c5);
  float3 TOD_Light_Direction : packoffset(c6);
  float3 TOD_Light_Color : packoffset(c7);
  float Specular_Power : packoffset(c8);
  float3 Specular_Color : packoffset(c9);
  float Specular_Alpha : packoffset(c10);
  float Min_Opacity : packoffset(c11);
  float Max_Fresnel : packoffset(c12);
  float3 Crest_Color : packoffset(c13);
  float Crest_Threshold : packoffset(c14);
  float4 Blend_Map_Extents : packoffset(c15);
  float4 Diffuse_Color2 : packoffset(c16);
  float Max_Fog_Depth2 : packoffset(c17);
  float2 Max_Fog_Depth : packoffset(c18);
  float4 Diffuse_Color : packoffset(c19);
}

cbuffer vc1 : register(b1)
{
  float4 Time : packoffset(c0);
  float2 Target_dimensions : packoffset(c2);
}

SamplerState Normal_MapSampler_s_s : register(s0);
SamplerState Reflection_MapSampler_s_s : register(s1);
SamplerState Blend_MapSampler_s_s : register(s2);
SamplerState Diffuse_MapSampler_s_s : register(s3);
Texture2D<float4> Normal_MapSampler : register(t0);
Texture2D<float4> Reflection_MapSampler : register(t1);
Texture2D<float4> Blend_MapSampler : register(t2);
Texture2D<float4> Diffuse_MapSampler : register(t3);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  linear centroid float4 v1 : TEXCOORD0,
  linear centroid float4 v2 : TEXCOORD1,
  linear centroid float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  linear centroid float4 v5 : TEXCOORD4,
  linear centroid float4 v6 : TEXCOORD5,
  linear centroid float4 v7 : TEXCOORD6,
  linear centroid float3 v8 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v3.xyz * r0.xxx;
  r0.w = dot(v2.xyz, v2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v2.xyz * r0.www;
  r2.xyzw = float4(2011,1640,252,338) + v8.xzxz;
  r0.w = dot(r2.zw, r2.zw);
  r2.xy = saturate(float2(0.000228000004,0.000291000004) * r2.xy);
  r0.w = sqrt(r0.w);
  r1.w = Time.x + Time.x;
  r0.w = r0.w * 0.100000001 + -r1.w;
  r0.w = sin(r0.w);
  r1.w = dot(v5.xyz, v5.xyz);
  r2.w = sqrt(r1.w);
  r1.w = rsqrt(r1.w);
  r3.xyz = v5.xyz * r1.www;
  r1.w = -70 + r2.w;
  r1.w = saturate(0.0333329998 * r1.w);
  r0.w = r1.w * r0.w;
  r1.w = 0.400000006 * r0.w;
  r4.x = r0.w * 0.400000006 + -0.5;
  r0.w = -r1.w * r1.w + 1;
  r0.w = sqrt(r0.w);
  r1.xyz = r0.www * r1.xyz;
  r0.xyz = r1.www * r0.xyz + r1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r3.xyz, r0.xyz);
  r1.x = r0.w + r0.w;
  r0.w = saturate(r0.w);
  r0.w = 1 + -r0.w;
  r1.xyz = r1.xxx * r0.xyz + -r3.xyz;
  r1.x = saturate(dot(r1.xyz, TOD_Light_Direction.xyz));
  r1.x = log2(r1.x);
  r1.y = Specular_Power * 20;
  r1.x = r1.y * r1.x;
  r1.x = exp2(r1.x);
  r1.x = 50 * r1.x;
  r1.yzw = Specular_Color.xyz * TOD_Light_Color.xyz;
  r1.xyz = r1.yzw * r1.xxx;
  r1.xyz = Specular_Alpha * r1.xyz;
  r1.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r1.w = -Base_Reflectivity + 1;
  r0.w = r0.w * r1.w + Base_Reflectivity;
  r3.xyz = r1.xyz * r0.www;
  r1.xyz = -r1.xyz * r0.www + Crest_Color.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r1.w = r1.w * r0.z;
  r1.w = cmp(r1.w >= Crest_Threshold);
  r1.w = r1.w ? 1.000000 : 0;
  r1.xyz = r1.www * r1.xyz + r3.xyz;
  r0.y = r0.y * 300 + -298;
  r0.xz = Normal_Map_Refl_Offset * r0.xz;
  r1.w = Time.x + 2.5;
  r3.xy = r1.ww * float2(0.100000001,0.100000001) + v1.zw;
  r3.xyzw = Normal_MapSampler.Sample(Normal_MapSampler_s_s, r3.xy).xyzw;
  r0.y = r3.x * 4 + r0.y;
  r0.y = saturate(-2 + r0.y);
  r1.w = -r2.w * 0.0199999996 + 1;
  r1.w = max(0, r1.w);
  r0.y = r1.w * r0.y;
  r3.zw = float2(1,1) / Target_dimensions.xy;
  r0.xz = r3.zw * r0.xz;
  r1.w = 100 / r2.w;
  r2.w = -High_Detail_Cutoff_Dist.x + r2.w;
  r2.w = saturate(High_Detail_Cutoff_Dist.y * r2.w);
  r2.w = 1 + -r2.w;
  r1.w = min(1, r1.w);
  r3.zw = v6.xy / v6.ww;
  r5.xy = r3.zw * float2(0.5,0.5) + float2(0.5,0.5);
  r5.z = 1 + -r5.y;
  r0.xz = r0.xz * r1.ww + r5.xz;
  r0.xz = r3.xy * float2(0.0500000007,0.0500000007) + r0.xz;
  r3.xyzw = Reflection_MapSampler.Sample(Reflection_MapSampler_s_s, r0.xz).xyzw;
  r3.xyz = r3.xyz * r0.www;
  r0.x = cmp(r3.w < 1);
  r0.x = r0.x ? 1.000000 : 0;
  r0.z = min(Max_Fresnel, r0.w);
  r3.xyz = r3.xyz / cb4[1].xyz;
  r5.xyz = float3(1.66154003,0.317921996,0.122492) + -r3.xyz;
  r3.xyz = r0.yyy * r5.xyz + r3.xyz;
  r2.z = -r2.x;
  r5.xyzw = Blend_MapSampler.Sample(Blend_MapSampler_s_s, r2.zy).xyzw;
  r2.xyz = -Diffuse_Color.xyz + Diffuse_Color2.xyz;
  r2.xyz = r5.zzz * r2.xyz + Diffuse_Color.xyz;
  r0.y = 0.300000012 + -r5.z;
  r0.y = saturate(3.33333302 * r0.y);
  r3.xyz = r3.xyz + -r2.xyz;
  r3.xyz = r0.zzz * r3.xyz + r2.xyz;
  r0.xzw = r0.xxx * r1.xyz + r3.xyz;
  r1.x = r0.y * -2 + 3;
  r0.y = r0.y * r0.y;
  r0.y = r1.x * r0.y;
  r4.y = -0.5;
  r1.xyzw = float4(0.00100000005,0.00100000005,0.0399999991,0.0399999991) * v8.xzxz;
  r1.zw = r4.xy * float2(0.0170000009,0.0170000009) + r1.zw;
  r3.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s_s, r1.xy).xyzw;
  r1.xyzw = Diffuse_MapSampler.Sample(Diffuse_MapSampler_s_s, r1.zw).xyzw;
  r1.xyz = r1.xyz * r3.zzz;
  r1.xyz = TOD_Light_Color.xyz * r1.xyz;
  r1.yzw = r1.xyz * r0.yyy + -r2.xyz;
  r0.y = r1.x * r0.y + -0.100000001;
  r0.y = saturate(r0.y + r0.y);
  r1.x = r0.y * -2 + 3;
  r0.y = r0.y * r0.y;
  r0.y = r1.x * r0.y;
  r1.xyz = r0.yyy * r1.yzw + r2.xyz;
  r0.y = r0.y * r2.w;
  r1.xyz = r1.xyz + -r0.xzw;
  r0.xyz = r0.yyy * r1.xyz + r0.xzw;
  r0.w = v7.x * -v5.y;
  r1.x = -1.44269502 * r0.w;
  r1.x = exp2(r1.x);
  r1.x = 1 + -r1.x;
  r0.w = r1.x / r0.w;
  r1.x = cmp(0.0500000007 < abs(v5.y));
  r0.w = r1.x ? r0.w : 1;
  r1.x = dot(-v5.xyz, -v5.xyz);
  r1.x = sqrt(r1.x);
  r1.x = v7.y * r1.x;
  r0.w = r0.w * r1.x + -v7.w;
  r0.w = exp2(-r0.w);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r1.x = 1 + -r0.w;
  r0.xyz = r1.xxx * r0.xyz;
  r0.xyz = r0.www * cb4[4].xyz + r0.xyz;
  r0.w = max(Min_Opacity, 1);
  o0.xyzw = cb4[1].xyzw * r0.xyzw;
  return;
}