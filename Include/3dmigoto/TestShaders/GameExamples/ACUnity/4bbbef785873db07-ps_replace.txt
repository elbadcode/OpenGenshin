//Light Nights
cbuffer cb_g_Pass : register(b2)
{

  struct
  {
    float4 m_EyePosition;
    float4 m_EyeDirection;
    float4x4 m_ViewToWorld;
    float4x4 m_WorldToView;
    float4x4 m_ProjMatrix;
    float4x4 m_ViewProj;
    float4x4 m_ViewNoTranslationProj;
    float4 m_ViewTranslation;

    struct
    {
      float4x4 clipXYZToViewPos;
      float4x4 clipXYZToWorldPos;
      float4 clipZToViewZ;
    } reverseProjParams;

    float4 m_VPosToUV;
    float4 m_ViewportScaleOffset;
    float4 m_ClipPlane;
    float4 m_GlobalLightingScale;
    float4 m_ViewSpaceLightingBackWS;
    float4 m_ThinGeomAAPixelScale;
  } g_Pass : packoffset(c0);

}

cbuffer cb_g_DeferredLights : register(b5)
{

  struct
  {

    struct
    {
      float4 m_Position;
      float4 m_Color;
      float4 m_Attenuation;
    } m_OmniLight;


    struct
    {
      float4 m_Direction;
      float4 m_Color;
    } m_DirectLight;


    struct
    {
      float4 m_Position;
      float4 m_Color;
      float4 m_Attenuation;
      float4 m_Direction;
      float4 m_ConeAngles;
      float4 m_PositionAtNearClip;
    } m_SpotLight;


    struct
    {
      float4x4 worldToLight[6];
      float4 shadowMapScaleOffset[6];
      float4 noiseScale;
    } m_Projections;


    struct
    {
      float4x4 worldToCookie;
      int4 cookieArrayIndex;
    } m_Cookie;

    float4 m_BackgroundColor;
    float4 m_DepthParams;
    float4 m_EyeXAxis;
    float4 m_EyeYAxis;
    float4 m_EyeZAxis;
    float4 m_VPOSToUVs_Resolve;
    float4 m_EyeWorldPosition_Resolve;
    float4 m_WeatherExposedParams;
    float4x4 m_LightClipToWorldMat;
    float4 m_IsolateVars;
    float m_EnvironmentSpecularScale;
  } g_DeferredLights : packoffset(c0);

}
SamplerState s_PointClamp_s : register(s10);
SamplerState s_TrilinearClamp_s : register(s12);
SamplerState s_TrilinearWrap_s : register(s13);
Texture2D<float4> t_Albedo : register(t0);
Texture2D<float4> t_Normals : register(t1);
Texture2D<float4> t_DepthSurface : register(t2);
Texture2D<float4> t_SpecularReflectance : register(t3);
Texture2D<float4> t_SSAO : register(t4);
  // Manual fix TextureCubeArray here
  TextureCubeArray t_g_ProjectorCubeCookie : register(t10);
Texture2D<float4> t_MiscProps : register(t15);
Texture2D<float4> t_BRDFLUT : register(t55);

Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask;
  r0.xy = g_Pass.m_VPosToUV.xy * v0.xy;
  r1.z = t_DepthSurface.SampleLevel(s_PointClamp_s, r0.xy, 0.000000000e+000).x;
  r1.xy = r0.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r1.w = 1.000000000e+000;
  r2.x = dot(r1.xyzw, g_Pass.reverseProjParams.clipXYZToViewPos._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_Pass.reverseProjParams.clipXYZToViewPos._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, g_Pass.reverseProjParams.clipXYZToViewPos._m02_m12_m22_m32);
  r0.z = dot(r1.xyzw, g_Pass.reverseProjParams.clipXYZToViewPos._m03_m13_m23_m33);
  r1.xyz = r2.xyz / r0.zzz;
  r1.w = 1.000000000e+000;
  r2.x = dot(r1.xyzw, g_Pass.m_ViewToWorld._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, g_Pass.m_ViewToWorld._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, g_Pass.m_ViewToWorld._m02_m12_m22_m32);
  r1.xyzw = t_Albedo.SampleLevel(s_PointClamp_s, r0.xy, 0.000000000e+000).xyzw;
  r3.xyzw = t_Normals.SampleLevel(s_PointClamp_s, r0.xy, 0.000000000e+000).xyzw;
  r4.xyzw = t_SpecularReflectance.SampleLevel(s_PointClamp_s, r0.xy, 0.000000000e+000).yxzw;
  r5.xyzw = t_MiscProps.SampleLevel(s_PointClamp_s, r0.xy, 0.000000000e+000).xyzw;
  r3.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.z = dot(r3.xyz, r3.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = r3.xyz * r0.zzz;
  r0.z = max(r1.w, 9.999999747e-006);
  r0.z = log2(r0.z);
  r0.z = 2.200000048e+000 * r0.z;
  r0.z = exp2(r0.z);
  r0.w = 1.900000000e+001 * r3.w;
  r6.x = exp2(r0.w);
  r0.w = 2.550000000e+002 * r5.w;
  r0.w = (uint)r0.w;
  r0.w = r0.w == 255;
  if (r0.w != 0) {
    r1.w = 9.999999747e-005 < r4.w;
    r7.xyz = sqrt(r1.xyz);
    r1.xyz = r1.www ? r7.xyz : r1.xyz;
    r7.xyz = r5.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r1.w = dot(r7.xyz, r7.xyz);
    r1.w = rsqrt(r1.w);
    r7.xyz = r7.xyz * r1.www;
    r1.w = 1.900000000e+001 * r4.y;
    r6.y = exp2(r1.w);
    r8.xyz = r0.zzz;
    r9.y = 0.000000000e+000;
    r0.z = 1.000000000e+000;
    r5.xz = float2(0.000000e+000,0.000000e+000);
  } else {
    r8.xyz = r4.yxz;
    r7.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000);
    r1.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r9.y = r5.y;
    r6.y = 1.000000000e+000;
    r4.xz = float2(1.000000e+000,0.000000e+000);
  }
  r1.w = r0.w ? r4.x : 1.000000000e+000;
  r4.xyw = g_DeferredLights.m_OmniLight.m_Position.xyz + -r2.xyz;
  r2.w = dot(r4.xyw, r4.xyw);
  r3.w = rsqrt(r2.w);
  r10.xyz = r4.xyw * r3.www;
  r5.y = saturate(g_DeferredLights.m_OmniLight.m_Attenuation.z / r2.w);
  r2.w = saturate(r2.w * g_DeferredLights.m_OmniLight.m_Attenuation.x + g_DeferredLights.m_OmniLight.m_Attenuation.y);
  r5.w = r2.w * r2.w;
  r2.w = -r2.w * 2.000000000e+000 + 3.000000000e+000;
  r2.w = r5.w * r2.w;
  r2.w = r5.y * r2.w;
  r0.x = t_SSAO.Sample(s_PointClamp_s, r0.xy).x;
  r11.xyz = -g_DeferredLights.m_OmniLight.m_Position.xyz + r2.xyz;
  r12.x = dot(r11.xyz, g_DeferredLights.m_Cookie.worldToCookie._m00_m10_m20);
  r12.y = dot(r11.xyz, g_DeferredLights.m_Cookie.worldToCookie._m01_m11_m21);
  r12.z = dot(r11.xyz, g_DeferredLights.m_Cookie.worldToCookie._m02_m12_m22);
  r12.w = g_DeferredLights.m_Cookie.cookieArrayIndex.x;
  r11.xyz = t_g_ProjectorCubeCookie.SampleLevel(s_TrilinearWrap_s, r12.xyzw, 0.000000000e+000).xyz;
  r0.y = dot(r10.xyz, r7.xyz);
  r12.xyz = -r0.yyy * r7.xyz + r10.xyz;
  r0.y = dot(r12.xyz, r12.xyz);
  r0.y = rsqrt(r0.y);
  r12.xyz = r12.xyz * r0.yyy;
  r3.xyz = r0.www ? r12.xyz : r3.xyz;
  r2.xyz = g_Pass.m_EyePosition.xyz + -r2.xyz;
  r0.y = dot(r2.xyz, r2.xyz);
  r0.y = rsqrt(r0.y);
  r2.xyz = r2.xyz * r0.yyy;
  r4.xyw = r4.xyw * r3.www + r2.xyz;
  r0.y = dot(r4.xyw, r4.xyw);
  r0.y = rsqrt(r0.y);
  r4.xyw = r4.xyw * r0.yyy;
  r0.y = dot(r3.xyz, r10.xyz);
  r3.w = dot(r3.xyz, r4.xyw);
  r9.x = r0.y * 5.000000000e-001 + 5.000000000e-001;
  r5.yw = r9.xy * float2(9.687500e-001,9.687500e-001) + float2(1.562500e-002,1.562500e-002);
  r5.y = t_BRDFLUT.SampleLevel(s_TrilinearClamp_s, r5.yw, 0.000000000e+000).z;
  r5.w = saturate(-r0.y);
  r5.z = r5.z * r5.w;
  r9.xyz = r11.xyz * r2.www;
  r9.xyz = g_DeferredLights.m_OmniLight.m_Color.xyz * r9.xyz;
  r10.xyz = r9.xyz * r5.yyy;
  r5.yzw = r5.zzz * r9.xyz + r10.xyz;
  r5.yzw = r5.yzw * r1.www;
  r1.w = dot(r10.xyz, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  if (r0.w != 0) {
    r6.zw = float2(1.000000e+000,1.000000e+000) + r6.xy;
    r6.zw = sqrt(r6.zw);
    r6.zw = float2(1.250000e-001,1.250000e-001) * r6.zw;
    r0.w = dot(r4.xyw, r7.xyz);
    r0.w = r0.w * r0.w;
    r7.xy = r0.ww * r6.xy;
    r0.w = 1.000000000e+000 + r3.w;
    r7.xy = -r7.xy / r0.ww;
    r7.xy = float2(1.442695e+000,1.442695e+000) * r7.xy;
    r7.xy = exp2(r7.xy);
    r6.yz = r7.xy * r6.zw;
    r7.xyz = r6.yyy * r8.xyz;
    r0.w = r6.z * r4.z;
    r1.xyz = r7.xyz * r1.xyz + r0.www;
    r1.xyz = r1.xyz * r10.xyz;
  } else {
    r0.w = r6.x * 5.000000000e-001 + 1.000000000e+000;
    r0.w = 1.000000e+000 / r0.w;
    r0.y = saturate(r0.y);
    r2.w = saturate(dot(r3.xyz, r2.xyz));
    r3.w = saturate(r3.w);
    r2.x = saturate(dot(r2.xyz, r4.xyw));
    r2.y = -1.000000000e+000 + r0.w;
    r2.z = r3.w * r3.w;
    r2.y = r2.z * r2.y + 1.000000000e+000;
    r2.y = r2.y * r2.y;
    r2.y = r0.w / r2.y;
    r3.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r8.xyz;
    r2.x = 1.000000000e+000 + -r2.x;
    r4.x = r2.x * r2.x;
    r4.x = r4.x * r4.x;
    r2.x = r4.x * r2.x;
    r3.xyz = r3.xyz * r2.xxx + r8.xyz;
    r2.x = 1.000000000e+000 + -r0.w;
    r4.x = r0.y * r2.x + r0.w;
    r4.x = sqrt(r4.x);
    r0.y = r4.x + r0.y;
    r0.y = 1.000000e+000 / r0.y;
    r2.x = r2.w * r2.x + r0.w;
    r2.x = sqrt(r2.x);
    r2.x = r2.w + r2.x;
    r2.x = 1.000000e+000 / r2.x;
    r0.y = r2.x * r0.y;
    r2.x = r2.y * r0.y;
    r2.w = 0.000000000e+000 < r5.x;
    r3.w = -r3.w * r3.w + 1.000100017e+000;
    r4.x = r3.w * r3.w;
    r2.z = r2.z / r3.w;
    r2.z = -r2.z / r0.w;
    r2.z = 1.442695022e+000 * r2.z;
    r2.z = exp2(r2.z);
    r2.z = 4.000000000e+000 * r2.z;
    r2.z = r2.z / r4.x;
    r2.z = 1.000000000e+000 + r2.z;
    r0.w = r0.w * 4.000000000e+000 + 1.000000000e+000;
    r0.w = r2.z / r0.w;
    r0.y = -r2.y * r0.y + r0.w;
    r0.y = r5.x * r0.y + r2.x;
    r0.y = r2.w ? r0.y : r2.x;
    r2.xyz = r3.xyz * r0.zzz;
    r0.xzw = r2.xyz * r0.xxx;
    r0.xyz = r0.yyy * r0.xzw;
    r1.xyz = r10.xyz * r0.xyz;
  }
  o0.xyz = g_Pass.m_GlobalLightingScale.xxx * r5.yzw;
  o1.xyz = g_Pass.m_GlobalLightingScale.xxx * r1.xyz;
  o0.w = g_Pass.m_GlobalLightingScale.x * r1.w;
  o1.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cb_g_Pass
// {
//
//   struct PassConsts
//   {
//       
//       float4 m_EyePosition;          // Offset:    0
//       float4 m_EyeDirection;         // Offset:   16
//       float4x4 m_ViewToWorld;        // Offset:   32
//       float4x4 m_WorldToView;        // Offset:   96
//       float4x4 m_ProjMatrix;         // Offset:  160
//       float4x4 m_ViewProj;           // Offset:  224
//       float4x4 m_ViewNoTranslationProj;// Offset:  288
//       float4 m_ViewTranslation;      // Offset:  352
//       
//       struct ReverseProjParams
//       {
//           
//           float4x4 clipXYZToViewPos; // Offset:  368
//           float4x4 clipXYZToWorldPos;// Offset:  432
//           float4 clipZToViewZ;       // Offset:  496
//
//       } reverseProjParams;           // Offset:  368
//       float4 m_VPosToUV;             // Offset:  512
//       float4 m_ViewportScaleOffset;  // Offset:  528
//       float4 m_ClipPlane;            // Offset:  544
//       float4 m_GlobalLightingScale;  // Offset:  560
//       float4 m_ViewSpaceLightingBackWS;// Offset:  576
//       float4 m_ThinGeomAAPixelScale; // Offset:  592
//
//   } g_Pass;                          // Offset:    0 Size:   608
//
// }
//
// cbuffer cb_g_DeferredLights
// {
//
//   struct DeferredLightingConsts
//   {
//       
//       struct OmniLightConsts
//       {
//           
//           float4 m_Position;         // Offset:    0
//           float4 m_Color;            // Offset:   16
//           float4 m_Attenuation;      // Offset:   32
//
//       } m_OmniLight;                 // Offset:    0
//       
//       struct DirectLightConsts
//       {
//           
//           float4 m_Direction;        // Offset:   48
//           float4 m_Color;            // Offset:   64
//
//       } m_DirectLight;               // Offset:   48
//       
//       struct SpotLightConsts
//       {
//           
//           float4 m_Position;         // Offset:   80
//           float4 m_Color;            // Offset:   96
//           float4 m_Attenuation;      // Offset:  112
//           float4 m_Direction;        // Offset:  128
//           float4 m_ConeAngles;       // Offset:  144
//           float4 m_PositionAtNearClip;// Offset:  160
//
//       } m_SpotLight;                 // Offset:   80
//       
//       struct ProjectorShadowParams
//       {
//           
//           float4x4 worldToLight[6];  // Offset:  176
//           float4 shadowMapScaleOffset[6];// Offset:  560
//           float4 noiseScale;         // Offset:  656
//
//       } m_Projections;               // Offset:  176
//       
//       struct ProjectorCookieParams
//       {
//           
//           float4x4 worldToCookie;    // Offset:  672
//           int4 cookieArrayIndex;     // Offset:  736
//
//       } m_Cookie;                    // Offset:  672
//       float4 m_BackgroundColor;      // Offset:  752
//       float4 m_DepthParams;          // Offset:  768
//       float4 m_EyeXAxis;             // Offset:  784
//       float4 m_EyeYAxis;             // Offset:  800
//       float4 m_EyeZAxis;             // Offset:  816
//       float4 m_VPOSToUVs_Resolve;    // Offset:  832
//       float4 m_EyeWorldPosition_Resolve;// Offset:  848
//       float4 m_WeatherExposedParams; // Offset:  864
//       float4x4 m_LightClipToWorldMat;// Offset:  880
//       float4 m_IsolateVars;          // Offset:  944
//       float m_EnvironmentSpecularScale;// Offset:  960
//
//   } g_DeferredLights;                // Offset:    0 Size:   964
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s_PointClamp                      sampler      NA          NA   10        1
// s_TrilinearClamp                  sampler      NA          NA   12        1
// s_TrilinearWrap                   sampler      NA          NA   13        1
// t_Albedo                          texture  float4          2d    0        1
// t_Normals                         texture  float4          2d    1        1
// t_DepthSurface                    texture  float4          2d    2        1
// t_SpecularReflectance             texture  float4          2d    3        1
// t_SSAO                            texture  float4          2d    4        1
// t_g_ProjectorCubeCookie           texture  float4   cubearray   10        1
// t_MiscProps                       texture  float4          2d   15        1
// t_BRDFLUT                         texture  float4          2d   55        1
// cb_g_Pass                         cbuffer      NA          NA    2        1
// cb_g_DeferredLights               cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[36], immediateIndexed
dcl_constantbuffer cb5[47], immediateIndexed
dcl_sampler s10, mode_default
dcl_sampler s12, mode_default
dcl_sampler s13, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texturecubearray (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t55
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 13
mul r0.xy, v0.xyxx, cb2[32].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r0.xyxx, t2.yzxw, s10, l(0.000000)
mad r1.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, cb2[23].xyzw
dp4 r2.y, r1.xyzw, cb2[24].xyzw
dp4 r2.z, r1.xyzw, cb2[25].xyzw
dp4 r0.z, r1.xyzw, cb2[26].xyzw
div r1.xyz, r2.xyzx, r0.zzzz
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, cb2[2].xyzw
dp4 r2.y, r1.xyzw, cb2[3].xyzw
dp4 r2.z, r1.xyzw, cb2[4].xyzw
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyxx, t0.xyzw, s10, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyxx, t1.xyzw, s10, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyxx, t3.yxzw, s10, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.xyxx, t15.xyzw, s10, l(0.000000)
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.z, r0.z
mul r3.xyz, r0.zzzz, r3.xyzx
max r0.z, r1.w, l(0.000010)
log r0.z, r0.z
mul r0.z, r0.z, l(2.200000)
exp r0.z, r0.z
mul r0.w, r3.w, l(19.000000)
exp r6.x, r0.w
mul r0.w, r5.w, l(255.000000)
ftou r0.w, r0.w
ieq r0.w, r0.w, l(255)
if_nz r0.w
  lt r1.w, l(0.000100), r4.w
  sqrt r7.xyz, r1.xyzx
  movc r1.xyz, r1.wwww, r7.xyzx, r1.xyzx
  mad r7.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r1.w, r7.xyzx, r7.xyzx
  rsq r1.w, r1.w
  mul r7.xyz, r1.wwww, r7.xyzx
  mul r1.w, r4.y, l(19.000000)
  exp r6.y, r1.w
  mov r8.xyz, r0.zzzz
  mov r9.y, l(0)
  mov r0.z, l(1.000000)
  mov r5.xz, l(0,0,0,0)
else 
  mov r8.xyz, r4.yxzy
  mov r7.xyz, l(1.000000,1.000000,1.000000,0)
  mov r1.xyz, l(0,0,0,0)
  mov r9.y, r5.y
  mov r6.y, l(1.000000)
  mov r4.xz, l(1.000000,0,0,0)
endif 
movc r1.w, r0.w, r4.x, l(1.000000)
add r4.xyw, -r2.xyxz, cb5[0].xyxz
dp3 r2.w, r4.xywx, r4.xywx
rsq r3.w, r2.w
mul r10.xyz, r3.wwww, r4.xywx
div_sat r5.y, cb5[2].z, r2.w
mad_sat r2.w, r2.w, cb5[2].x, cb5[2].y
mul r5.w, r2.w, r2.w
mad r2.w, -r2.w, l(2.000000), l(3.000000)
mul r2.w, r2.w, r5.w
mul r2.w, r2.w, r5.y
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t4.xyzw, s10
add r11.xyz, r2.xyzx, -cb5[0].xyzx
dp3 r12.x, r11.xyzx, cb5[42].xyzx
dp3 r12.y, r11.xyzx, cb5[43].xyzx
dp3 r12.z, r11.xyzx, cb5[44].xyzx
itof r12.w, cb5[46].x
sample_l_indexable(texturecubearray)(float,float,float,float) r11.xyz, r12.xyzw, t10.xyzw, s13, l(0.000000)
dp3 r0.y, r10.xyzx, r7.xyzx
mad r12.xyz, -r0.yyyy, r7.xyzx, r10.xyzx
dp3 r0.y, r12.xyzx, r12.xyzx
rsq r0.y, r0.y
mul r12.xyz, r0.yyyy, r12.xyzx
movc r3.xyz, r0.wwww, r12.xyzx, r3.xyzx
add r2.xyz, -r2.xyzx, cb2[0].xyzx
dp3 r0.y, r2.xyzx, r2.xyzx
rsq r0.y, r0.y
mul r2.xyz, r0.yyyy, r2.xyzx
mad r4.xyw, r4.xyxw, r3.wwww, r2.xyxz
dp3 r0.y, r4.xywx, r4.xywx
rsq r0.y, r0.y
mul r4.xyw, r0.yyyy, r4.xyxw
dp3 r0.y, r3.xyzx, r10.xyzx
dp3 r3.w, r3.xyzx, r4.xywx
mad r9.x, r0.y, l(0.500000), l(0.500000)
mad r5.yw, r9.xxxy, l(0.000000, 0.968750, 0.000000, 0.968750), l(0.000000, 0.015625, 0.000000, 0.015625)
sample_l_indexable(texture2d)(float,float,float,float) r5.y, r5.ywyy, t55.xzyw, s12, l(0.000000)
mov_sat r5.w, -r0.y
mul r5.z, r5.w, r5.z
mul r9.xyz, r2.wwww, r11.xyzx
mul r9.xyz, r9.xyzx, cb5[1].xyzx
mul r10.xyz, r5.yyyy, r9.xyzx
mad r5.yzw, r5.zzzz, r9.xxyz, r10.xxyz
mul r5.yzw, r1.wwww, r5.yyzw
dp3 r1.w, r10.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
if_nz r0.w
  add r6.zw, r6.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  sqrt r6.zw, r6.zzzw
  mul r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.125000, 0.125000)
  dp3 r0.w, r4.xywx, r7.xyzx
  mul r0.w, r0.w, r0.w
  mul r7.xy, r6.xyxx, r0.wwww
  add r0.w, r3.w, l(1.000000)
  div r7.xy, -r7.xyxx, r0.wwww
  mul r7.xy, r7.xyxx, l(1.442695, 1.442695, 0.000000, 0.000000)
  exp r7.xy, r7.xyxx
  mul r6.yz, r6.zzwz, r7.xxyx
  mul r7.xyz, r8.xyzx, r6.yyyy
  mul r0.w, r4.z, r6.z
  mad r1.xyz, r7.xyzx, r1.xyzx, r0.wwww
  mul r1.xyz, r10.xyzx, r1.xyzx
else 
  mad r0.w, r6.x, l(0.500000), l(1.000000)
  div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
  mov_sat r0.y, r0.y
  dp3_sat r2.w, r3.xyzx, r2.xyzx
  mov_sat r3.w, r3.w
  dp3_sat r2.x, r2.xyzx, r4.xywx
  add r2.y, r0.w, l(-1.000000)
  mul r2.z, r3.w, r3.w
  mad r2.y, r2.z, r2.y, l(1.000000)
  mul r2.y, r2.y, r2.y
  div r2.y, r0.w, r2.y
  add r3.xyz, -r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r2.x, -r2.x, l(1.000000)
  mul r4.x, r2.x, r2.x
  mul r4.x, r4.x, r4.x
  mul r2.x, r2.x, r4.x
  mad r3.xyz, r3.xyzx, r2.xxxx, r8.xyzx
  add r2.x, -r0.w, l(1.000000)
  mad r4.x, r0.y, r2.x, r0.w
  sqrt r4.x, r4.x
  add r0.y, r0.y, r4.x
  div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
  mad r2.x, r2.w, r2.x, r0.w
  sqrt r2.x, r2.x
  add r2.x, r2.x, r2.w
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
  mul r0.y, r0.y, r2.x
  mul r2.x, r0.y, r2.y
  lt r2.w, l(0.000000), r5.x
  mad r3.w, -r3.w, r3.w, l(1.000100)
  mul r4.x, r3.w, r3.w
  div r2.z, r2.z, r3.w
  div r2.z, -r2.z, r0.w
  mul r2.z, r2.z, l(1.442695)
  exp r2.z, r2.z
  mul r2.z, r2.z, l(4.000000)
  div r2.z, r2.z, r4.x
  add r2.z, r2.z, l(1.000000)
  mad r0.w, r0.w, l(4.000000), l(1.000000)
  div r0.w, r2.z, r0.w
  mad r0.y, -r2.y, r0.y, r0.w
  mad r0.y, r5.x, r0.y, r2.x
  movc r0.y, r2.w, r0.y, r2.x
  mul r2.xyz, r0.zzzz, r3.xyzx
  mul r0.xzw, r0.xxxx, r2.xxyz
  mul r0.xyz, r0.xzwx, r0.yyyy
  mul r1.xyz, r0.xyzx, r10.xyzx
endif 
mul o0.xyz, r5.yzwy, cb2[35].xxxx
mul o1.xyz, r1.xyzx, cb2[35].xxxx
mul o0.w, r1.w, cb2[35].x
mov o1.w, l(1.000000)
ret 
// Approximately 167 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
