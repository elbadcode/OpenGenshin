// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:25 2019

cbuffer _Globals : register(b0)
{
  row_major float4x4 k_mObjectToClip : packoffset(c0);
  row_major float3x4 k_mObjectToView : packoffset(c4);
  row_major float3x4 k_mObjectToWorld : packoffset(c7);
  float4 k_vObjectColor : packoffset(c10);
  float3 k_vObjectSpaceEyePos : packoffset(c11);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c12);
  row_major float3x4 k_mPrevObjectToView : packoffset(c16);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c19);
  float2 k_vTessellation : packoffset(c22) = {15,63};
  float2 k_vFade : packoffset(c22.z) = {4000,4000};
  float k_fDisplacement : packoffset(c23) = {25};
  float k_fOffset : packoffset(c23.y) = {-0.25};
  float2 k_vMipRange : packoffset(c23.z) = {0,1000};
  float3 k_cRTintColor : packoffset(c24) = {0.639199972,0.647000015,0.486699998};
  float k_fRTintAmount : packoffset(c24.w) = {1};
  float k_fGTintAmount : packoffset(c25) = {1};
  float k_fBTintAmount : packoffset(c25.y) = {1};
  float k_fATintAmount : packoffset(c25.z) = {1};
  float3 k_cGTintColor : packoffset(c26) = {0.639199972,0.647000015,0.486699998};
  float3 k_cBTintColor : packoffset(c27) = {0.639199972,0.647000015,0.486699998};
  float3 k_cATintColor : packoffset(c28) = {0.639199972,0.647000015,0.486699998};
  float k_fMaxSpecularPower : packoffset(c28.w) = {64};
  float k_fBloodMax : packoffset(c29) = {0.5};
  float3 k_cBloodImpactColor : packoffset(c29.y) = {0,0,0};
  float k_fBloodImpactAlpha : packoffset(c30) = {1};
  float3 k_cBloodFlowMaxColor : packoffset(c30.y) = {0,0,0};
  float3 k_cBloodFlowMinColor : packoffset(c31) = {0.100000001,0.100000001,0};
  float k_fBloodFlowAlpha : packoffset(c31.w) = {1};
  float3 k_cBloodSpecularColor : packoffset(c32) = {0.5,0.5,0.5};
  float k_fBloodSpecularPower : packoffset(c32.w) = {1024};
  float k_fBloodSpecularAlpha : packoffset(c33) = {1};
  float k_fLightBleed : packoffset(c33.y) = {0};
  float k_fRenderObjectID : packoffset(c33.z);
  int k_nSolidSortIndex : packoffset(c33.w) = {0};
  float k_fInvLightRadius : packoffset(c34);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c35);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c38);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c41);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c45);
  row_major float3x4 k_mWorldToVolume : packoffset(c46);
  float3 k_vDirectional_Dir : packoffset(c49);
  float4 k_vObjectLightColor : packoffset(c50);
  float3 k_vObjectSpaceLightPos : packoffset(c51);
  float4 k_vSpecularColor : packoffset(c52);
  float4 k_vSpotProjector_ClipFar : packoffset(c53);
  float4 k_vSpotProjector_ClipNear : packoffset(c54);
  float3 k_vHalfDims : packoffset(c55);
  float4 k_vShadowMapParams : packoffset(c56);
  float4 k_vShadowMapParams2 : packoffset(c57);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c58);
  float4 k_vShadowCascadeOffsetX : packoffset(c62);
  float4 k_vShadowCascadeOffsetZ : packoffset(c63);
  float k_fStaticLightVolume_Mip : packoffset(c64);
  float4 k_vShadowSplitDistSquared : packoffset(c65);
  float4 k_vShadowSplitDistSelect : packoffset(c66);
  float4 k_vShadowMoveX : packoffset(c67);
  float4 k_vShadowMoveY : packoffset(c68);
  float4 k_vShadowMoveZ : packoffset(c69);
  float4 k_vShadowScaleXY : packoffset(c70);
  float4 k_vShadowScaleX : packoffset(c71);
  float4 k_vShadowScaleY : packoffset(c72);
  float4 k_vShadowScaleZ : packoffset(c73);
  float3 k_vLightBleed_Offset : packoffset(c74);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c75);
  float k_fLightLayer : packoffset(c76);
  row_major float3x4 k_mViewToLight : packoffset(c77);
}

SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s_s : register(s0);
SamplerState sAniso4X_WRAPWRAPCLAMP_Sampler_s_s : register(s1);
SamplerState sAniso4X_CLAMPCLAMPCLAMP_Sampler_s_s : register(s2);
Texture2D<float4> tDiffuseMap : register(t0);
Texture2D<float4> tTintMaskMap : register(t1);
Texture2D<float4> tNormalMap : register(t2);
Texture2D<float4> tSpecularMap : register(t3);
Texture2D<float4> tBloodMap : register(t4);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float4 v5 : COLOR0,
  uint v6 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = tTintMaskMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s_s, v1.xy).xyzw;
  r0.x = k_fRTintAmount * r0.x;
  r0.yzw = k_fGTintAmount * r0.yzw;
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s_s, v1.xy).xyzw;
  r2.xyz = k_cRTintColor.xyz * r1.xyz + -r1.xyz;
  r2.w = 0;
  r2.xyzw = r0.xxxx * r2.xyzw + r1.xyzw;
  r3.xyz = k_cGTintColor.xyz * r1.xyz;
  r3.w = r1.w;
  r4.xyzw = r3.xyzw + -r2.xyzw;
  r2.xyzw = r0.yyyy * r4.xyzw + r2.xyzw;
  r3.xyz = k_cBTintColor.xyz * r1.xyz;
  r4.xyzw = r3.xyzw + -r2.xyzw;
  r2.xyzw = r0.zzzz * r4.xyzw + r2.xyzw;
  r3.xyz = k_cATintColor.xyz * r1.xyz;
  r1.xyzw = r3.xyzw + -r2.xyzw;
  r0.xyzw = r0.wwww * r1.xyzw + r2.xyzw;
  r0.w = -0.376471013 + r0.w;
  r0.w = cmp(r0.w < 0);
  if (r0.w != 0) discard;
  r1.xy = tNormalMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s_s, v1.xy).yw;
  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r0.w = -r1.x * r1.x + 1;
  r0.w = -r1.y * r1.y + r0.w;
  r1.z = sqrt(r0.w);
  r2.x = dot(v2.xyz, r1.xyz);
  r2.y = dot(v3.xyz, r1.xyz);
  r2.z = dot(v4.xyz, r1.xyz);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r2.xyz * r0.www;
  r1.xyz = v6.xxx ? r1.xyz : -r1.xyz;
  o0.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.w = 1 / k_fBloodMax;
  r1.xy = tBloodMap.Sample(sAniso4X_CLAMPCLAMPCLAMP_Sampler_s_s, v1.xy).xy;
  r1.z = max(r1.y, r1.x);
  r0.w = saturate(r1.z * r0.w);
  r1.z = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r1.z * r0.w;
  r1.z = k_fBloodFlowAlpha * r0.w;
  r2.xyz = -k_cBloodFlowMinColor.xyz + k_cBloodFlowMaxColor.xyz;
  r2.xyz = r1.xxx * r2.xyz + k_cBloodFlowMinColor.xyz;
  r1.xzw = r2.xyz * r1.zzz;
  r2.x = -r0.w * k_fBloodFlowAlpha + 1;
  r0.w = k_fBloodSpecularAlpha * r0.w;
  r0.xyz = r0.xyz * r2.xxx + r1.xzw;
  r1.x = k_fBloodImpactAlpha * r1.y;
  r1.y = -r1.y * k_fBloodImpactAlpha + 1;
  r1.xzw = k_cBloodImpactColor.xyz * r1.xxx;
  r0.xyz = r0.xyz * r1.yyy + r1.xzw;
  o1.xyz = v5.xyz * r0.xyz;
  r1.xyzw = tSpecularMap.Sample(sAniso4X_WRAPWRAPCLAMP_Sampler_s_s, v1.xy).xyzw;
  r0.x = k_fMaxSpecularPower * r1.z;
  r0.y = r1.y;
  r1.yz = k_fBloodSpecularPower + -r0.xy;
  o2.xy = r0.ww * r1.yz + r0.xy;
  o0.w = k_fRenderObjectID;
  o1.w = r1.w;
  o2.z = r1.x;
  o2.w = k_fLightBleed;
  return;
}