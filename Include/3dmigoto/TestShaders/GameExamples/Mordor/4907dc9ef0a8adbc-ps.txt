// bo3b: missing shader from decompile, because of new idioms.

//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fInvLightRadius;           // Offset:    0 Size:     4
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:   16 Size:    48
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:   64 Size:    48 [unused]
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  112 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  176 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  192 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  240 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  256 Size:    16
//   float3 k_vObjectSpaceLightPos;     // Offset:  272 Size:    12
//   float4 k_vSpecularColor;           // Offset:  288 Size:    16
//   float4 k_vSpotProjector_ClipFar;   // Offset:  304 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  320 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  336 Size:    12
//   float4 k_vShadowMapParams;         // Offset:  352 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  368 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  384 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  448 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  464 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  480 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  496 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  512 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  528 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  544 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  560 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  576 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  592 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  608 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  624 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset:  640 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset:  656 Size:    16 [unused]
//   float k_fLightLayer;               // Offset:  672 Size:     4
//   row_major float3x4 k_mViewToLight; // Offset:  688 Size:    48 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  736 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:  800 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  848 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  896 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  912 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  928 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  992 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset: 1040 Size:    48 [unused]
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16 [unused]
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16 [unused]
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16 [unused]
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16 [unused]
//   float4 k_vFogSky;                  // Offset:  288 Size:    16 [unused]
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16 [unused]
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12 [unused]
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// Resource bind info for DeepBufferDst
// {
//
//   struct DeepBufferEntry
//   {
//       
//       uint2 PackedColor;             // Offset:    0
//       float Depth;                   // Offset:    8
//       uint NextIndex;                // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sBilinear_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// tDirectional_Attenuation          texture  float4          2d    0        1
// tCubeProjector_LightMap           texture  float4        cube    1        1
// FragmentListSrc                   texture    uint          2d    2        1
// DeepGBufferSrc                    texture  float4         buf    3        1
// DeepBufferDst                         UAV  struct         r/w    1        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float      w
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[43], immediateIndexed
dcl_constantbuffer cb12[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (uint,uint,uint,uint) t2
dcl_resource_buffer (float,float,float,float) t3
dcl_uav_structured u1, 16
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.w
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 14
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
div r0.yz, v2.xxyx, v1.wwww
ftou r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(uint,uint,uint,uint) r0.w, r1.xyzw, t2.yzwx
ushr r1.x, r0.w, l(28)
and r0.w, r0.w, l(0x0fffffff)
round_ni r1.y, cb0[42].x
ftou r1.y, r1.y
and r1.z, r1.y, l(255)
ubfe r1.y, l(8), l(8), r1.y
mov r2.x, l(0)
mov r1.w, r0.w
mov r2.z, l(0)
loop 
  uge r2.w, r2.z, r1.x
  breakc_nz r2.w
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r3.xy, r1.w, l(0), u1.xyxx
  and r2.w, r1.z, r3.y
  if_z r2.w
    ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r4.z, r1.w, l(8), u1.xxxx
    mul r4.xy, r0.yzyy, r4.zzzz
    add r5.xyz, r4.xyzx, -cb0[17].xyzx
    dp3 r2.w, r5.xyzx, r5.xyzx
    sqrt r2.w, r2.w
    ge r2.w, cb0[21].x, r2.w
    if_nz r2.w
      ushr r3.zw, r3.xxxy, l(0, 0, 16, 16)
      and r2.w, r3.x, l(0x0000ffff)
      f16tof32 r5.y, r2.w
      f16tof32 r5.xz, r3.zzwz
      ubfe r2.w, l(8), l(8), r3.y
      utof r2.w, r2.w
      imul null, r3.x, r1.w, l(3)
      ld_indexable(buffer)(float,float,float,float) r3.xyzw, r3.xxxx, t3.xyzw
      imad r6.xy, r1.wwww, l(3, 3, 0, 0), l(1, 2, 0, 0)
      ld_indexable(buffer)(float,float,float,float) r7.xyzw, r6.xxxx, t3.xyzw
      ld_indexable(buffer)(float,float,float,float) r6.xyzw, r6.yyyy, t3.wxyz
      ge r8.xyzw, l(0.039280, 0.039280, 0.039280, 0.039280), r7.xyzw
      mul r9.xyzw, r7.xyzw, l(0.077399, 0.077399, 0.077399, 0.077399)
      add r7.xyzw, |r7.xyzw|, l(0.055000, 0.055000, 0.055000, 0.055000)
      mul r7.xyzw, r7.xyzw, l(0.947867, 0.947867, 0.947867, 0.947867)
      log r7.xyzw, r7.xyzw
      mul r7.xyzw, r7.xyzw, l(2.400000, 2.400000, 2.400000, 2.400000)
      exp r7.xyzw, r7.xyzw
      movc r7.xyzw, r8.xyzw, r9.xyzw, r7.xyzw
      mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
      dp3 r4.w, r3.xyzx, r3.xyzx
      rsq r4.w, r4.w
      mul r3.xyz, r3.xyzx, r4.wwww
      add r4.xyz, -r4.xyzx, cb0[17].xyzx
      mul r4.xyz, r4.xyzx, cb0[0].xxxx
      dp3 r8.x, cb12[4].xyzx, r4.xyzx
      dp3 r8.y, cb12[5].xyzx, r4.xyzx
      dp3 r8.z, cb12[6].xyzx, r4.xyzx
      dp3 r4.w, r8.xyzx, r8.xyzx
      sqrt r2.y, r4.w
      sample_l_indexable(texture2d)(float,float,float,float) r9.xyz, r2.xyxx, t0.xyzw, s0, l(0.000000)
      dp3 r10.x, cb0[1].xyzx, r4.xyzx
      dp3 r10.y, cb0[2].xyzx, r4.xyzx
      dp3 r10.z, cb0[3].xyzx, r4.xyzx
      sample_l_indexable(texturecube)(float,float,float,float) r10.xyzw, r10.xyzx, t1.xyzw, s0, l(0.000000)
      mul r4.xyz, r10.xyzx, cb0[16].xyzx
      mul r10.xyz, r7.xyzx, r4.xyzx
      rsq r2.y, r4.w
      mul r8.xyz, r2.yyyy, r8.xyzx
      mul r11.xyz, r10.wwww, cb0[18].xyzx
      mul r2.y, r6.y, r6.y
      mad r12.xyz, v3.xyzx, r0.xxxx, r8.xyzx
      dp3 r4.w, r12.xyzx, r12.xyzx
      rsq r4.w, r4.w
      mul r12.xyz, r4.wwww, r12.xyzx
      dp3_sat r4.w, r3.xyzx, r12.xyzx
      mad r13.xy, r2.yyyy, l(4096.000000, 4096.000000, 0.000000, 0.000000), l(0.004000, 2.004000, 0.000000, 0.000000)
      mul r2.y, r13.y, l(0.125000)
      log r4.w, r4.w
      mul r4.w, r4.w, r13.x
      exp r4.w, r4.w
      mul r2.y, r2.y, r4.w
      add r4.w, -r6.w, l(1.000000)
      dp3_sat r5.w, r8.xyzx, r12.xyzx
      add r5.w, -r5.w, l(1.000000)
      mul r8.w, r5.w, r5.w
      mul r8.w, r8.w, r8.w
      mul r5.w, r5.w, r8.w
      mad r4.w, r4.w, r5.w, r6.w
      mul r2.y, r2.y, r4.w
      mul r11.xyz, r6.zzzz, r11.xyzx
      dp3 r3.x, r3.xyzx, r8.xyzx
      add r3.y, r7.w, r3.x
      add r3.y, r3.y, l(-1.000000)
      div_sat r3.y, r3.y, r7.w
      mad r8.xyz, r11.xyzx, r2.yyyy, r10.xyzx
      mul r8.xyz, r3.yyyy, r8.xyzx
      lt r2.y, l(0.000000), r6.x
      if_nz r2.y
        lt r2.y, r3.w, l(0.509804)
        add r6.yzw, r10.xxyz, r10.xxyz
        add_sat r3.y, r6.x, l(-0.500000)
        mul r3.yzw, r3.yyyy, r6.yyzw
        add_sat r10.xy, -r3.xxxx, l(0.250000, 1.000000, 0.000000, 0.000000)
        mad r3.yzw, r3.yyzw, r10.xxxx, r8.xxyz
        min r11.x, r6.x, l(0.500000)
        max r4.w, r7.z, r7.y
        max r4.w, r4.w, r7.x
        div_sat r7.xyz, r7.xyzx, r4.wwww
        mov_sat r4.xyz, r4.xyzx
        mul r7.xyz, r7.xyzx, r7.xyzx
        mul r4.xyz, r4.xyzx, r7.xyzx
        mul r11.yzw, r4.xxyz, l(0.000000, 0.150000, 0.150000, 0.150000)
        movc r3.yzw, r2.yyyy, r3.yyzw, r8.xxyz
        movc r4.xyzw, r2.yyyy, r6.xyzw, r11.xyzw
        min r2.y, r4.x, l(0.500000)
        mul r4.xyz, r2.yyyy, r4.yzwy
        mul r4.xyz, r10.yyyy, r4.xyzx
        add_sat r2.y, r3.x, l(0.250000)
        mad r8.xyz, r4.xyzx, r2.yyyy, r3.yzwy
      endif 
      mad r3.xyz, r9.xyzx, r8.xyzx, r5.xyzx
      add r2.y, r2.w, l(0.500000)
      round_ni r2.y, r2.y
      ftou r2.y, r2.y
      f32tof16 r3.xyz, r3.xyzx
      imad r3.x, r3.x, l(0x00010000), r3.y
      ishl r2.y, r2.y, l(8)
      imad r2.y, r3.z, l(0x00010000), r2.y
      iadd r3.y, r1.y, r2.y
      store_structured u1.xy, r1.w, l(0), r3.xyxx
    endif 
  endif 
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.w, r1.w, l(12), u1.xxxx
  iadd r2.z, r2.z, l(1)
endloop 
mov o0.xyzw, l(0,0,0,0)
ret 
// Approximately 136 instruction slots used
 