// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:39:41 2019

cbuffer _Globals : register(b0)
{
  float forwarddirlightscaler : packoffset(c0) = {1};
  float forwardspotlightscaler : packoffset(c0.y) = {1};
  float additionaldirLightingScaler : packoffset(c0.z) = {1};
  float additionalspotLightingScaler : packoffset(c0.w) = {1};
  float particleAlphaThreshold : packoffset(c1) = {0.0500000007};
  float startCamFadeDistToVertex : packoffset(c1.y) = {0};
  float endCamFadeDistToVertex : packoffset(c1.z) = {0};
  float maxTransmissive : packoffset(c1.w) = {0};
  float maxSpecularCoef : packoffset(c2) = {0};
  float4 nearFarClip : packoffset(c3);
  row_major float4x4 fadePointTransform : packoffset(c4);
  float4 fadePointInnerBoundsXYZ : packoffset(c8);
  float4 fadePointOuterBoundsXYZ : packoffset(c9);
  float4 fadePointRecipBoundsDiffXYZ : packoffset(c10);
  float4 c_texAnimMatrixScaleTrans : packoffset(c11);
  float2 c_numAnimFrames : packoffset(c12);
  float c_totalAnimFrames : packoffset(c12.z);
  float2 c_recipNumAnimFrames : packoffset(c13);
  row_major float4x4 c_uvArray : packoffset(c14);
}

cbuffer COMMON_BUFFER1 : register(b1)
{
  row_major float4x4 worldViewProj : packoffset(c0);
  row_major float4x4 world : packoffset(c4);
  row_major float4x4 worldView : packoffset(c8);
  row_major float4x4 worldI : packoffset(c12);
}

cbuffer COMMON_BUFFER2 : register(b3)
{
  row_major float4x4 view : packoffset(c0);
  row_major float4x4 viewI : packoffset(c4);
  row_major float4x4 projMatrix : packoffset(c8);
  row_major float4x4 viewProj : packoffset(c12);
  row_major float4x4 viewProjI : packoffset(c16);
  float4 screenSpaceDimensions : packoffset(c20);
  float4 frustumDimensions : packoffset(c21);
  float4 cLightingTransitionValues : packoffset(c22);
  float4 treeAmbientBoost : packoffset(c23);
  float4 viewportPixelDimensions : packoffset(c24);
  float4 globalVector4 : packoffset(c25);
  float4 globalVector6 : packoffset(c26);
  float4 globalVector7 : packoffset(c27);
  float4 globalVector8 : packoffset(c28);
  float4 fog_colour_towards : packoffset(c29);
  float4 fog_colour_away : packoffset(c30);
  float4 fogLightDir : packoffset(c31);
  float4 keyLightDir : packoffset(c32);
  float4 fog_min_inv_fog1_fog2 : packoffset(c33);
  float4 keyLightColour : packoffset(c34);
  float4 msaaMode : packoffset(c35);
  float3 keyLightDirVS : packoffset(c36);
  float3 worldCameraPos : packoffset(c37);
  float emissiveTextureControl : packoffset(c37.w);
}

Texture2D<float4> StereoParams : register(t125);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : POSITION0,
  float2 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float4 v3 : COLOR0,
  out float4 o0 : SV_Position0,
  out float3 o1 : NORMAL0,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4,
  out float4 o7 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  sincos(v2.x, r0.x, r1.x);
  r0.y = (int)v0.w;
  r2.x = -r0.x;
  r2.y = r1.x;
  r2.z = r0.x;
  r1.x = dot(v1.xy, r2.yz);
  r1.y = dot(v1.xy, r2.xy);
  r2.xyzw = worldView._m10_m11_m12_m13 * v0.yyyy;
  r2.xyzw = v0.xxxx * worldView._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = v0.zzzz * worldView._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = worldView._m30_m31_m32_m33 + r2.xyzw;
  r0.xz = r2.xy + r1.xy;
  r1.xyzw = viewI._m10_m11_m12_m13 * r0.zzzz;
  r1.xyzw = r0.xxxx * viewI._m00_m01_m02_m03 + r1.xyzw;
  r1.xyzw = r2.zzzz * viewI._m20_m21_m22_m23 + r1.xyzw;
  r1.xyzw = r2.wwww * viewI._m30_m31_m32_m33 + r1.xyzw;
  r3.xyzw = projMatrix._m10_m11_m12_m13 * r0.zzzz;
  r3.xyzw = r0.xxxx * projMatrix._m00_m01_m02_m03 + r3.xyzw;
  r3.xyzw = r2.zzzz * projMatrix._m20_m21_m22_m23 + r3.xyzw;
  r2.xyzw = r2.wwww * projMatrix._m33_m30_m31_m32 + r3.wxyz;
  r0.x = dot(v1.xy, v1.xy);
  r0.x = sqrt(r0.x);
  o3.y = r0.x / nearFarClip.y;
  r0.z = c_totalAnimFrames * v2.y;
  r0.w = r0.z / c_numAnimFrames.x;
  r3.x = cmp(r0.w >= -r0.w);
  r0.w = frac(abs(r0.w));
  r0.w = r3.x ? r0.w : -r0.w;
  r0.w = c_numAnimFrames.x * r0.w;
  r3.x = v2.y * c_totalAnimFrames + -r0.w;
  r0.w = floor(r0.w);
  r3.y = v2.y * c_totalAnimFrames + 1;
  r3.z = cmp(c_totalAnimFrames < r3.y);
  if (r3.z != 0) {
    r3.y = -c_totalAnimFrames + r3.y;
  }
  r3.z = r3.y / c_numAnimFrames.x;
  r3.w = cmp(r3.z >= -r3.z);
  r3.z = frac(abs(r3.z));
  r3.z = r3.w ? r3.z : -r3.z;
  r3.w = c_numAnimFrames.x * r3.z;
  r3.y = -r3.z * c_numAnimFrames.x + r3.y;
  r3.z = floor(r3.w);
  r3.xy = c_recipNumAnimFrames.xx * r3.xy;
  r4.y = r0.w * c_recipNumAnimFrames.x + c_texAnimMatrixScaleTrans.z;
  r4.w = r3.x * c_recipNumAnimFrames.y + c_texAnimMatrixScaleTrans.w;
  r5.y = r3.z * c_recipNumAnimFrames.x + c_texAnimMatrixScaleTrans.z;
  r5.w = r3.y * c_recipNumAnimFrames.y + c_texAnimMatrixScaleTrans.w;
  r3.xz = c_uvArray[r0.y/4]._m00_m01;
  r3.yw = float2(1,1);
  r4.xz = c_texAnimMatrixScaleTrans.xy;
  o2.x = dot(r3.xy, r4.xy);
  o2.y = dot(r3.zw, r4.zw);
  r5.xz = c_texAnimMatrixScaleTrans.xy;
  o2.z = dot(r3.xy, r5.xy);
  o2.w = dot(r3.zw, r5.zw);
  r3.xyz = -worldCameraPos.xyz + r1.xyz;
  r0.y = dot(r3.xyz, r3.xyz);
  r0.y = sqrt(r0.y);
  r0.w = -endCamFadeDistToVertex + r0.y;
  r0.w = startCamFadeDistToVertex + -r0.w;
  r0.w = saturate(r0.w / startCamFadeDistToVertex);
  r0.w = 1 + -r0.w;
  r0.w = v3.w * r0.w;
  o3.x = frac(r0.z);
  r0.z = 1 / r2.x;
  r3.y = r2.y * r0.z;
  o4.x = r3.y * 0.5 + 0.5;
  r0.z = -r2.z * r0.z;
  o4.y = r0.z * 0.5 + 0.5;
  r0.z = view._m12 * r1.y;
  r0.z = r1.x * view._m02 + r0.z;
  r0.z = r1.z * view._m22 + r0.z;
  r0.z = r1.w * view._m32 + r0.z;
  o4.z = r0.z / nearFarClip.y;
  r0.z = cmp(r0.w < particleAlphaThreshold);
  if (r0.z != 0) {
    r2.x = -1;
  }
  r0.z = -fog_min_inv_fog1_fog2.x + r0.y;
  r0.z = saturate(fog_min_inv_fog1_fog2.y * r0.z);
  r1.w = fog_min_inv_fog1_fog2.z * r0.z;
  r3.xy = r3.xz / r0.yy;
  r0.y = saturate(dot(r3.xy, fogLightDir.xz));
  r3.xyz = -fog_colour_away.xyz + fog_colour_towards.xyz;
  r3.xyz = r0.yyy * r3.xyz + fog_colour_away.xyz;
  o6.xyz = r3.xyz * r1.www;
  o6.w = -r0.z * fog_min_inv_fog1_fog2.z + 1;
  o7.xyz = worldCameraPos.xyz + -r1.xyz;
  r0.y = dot(-viewI._m20_m21_m22, -viewI._m20_m21_m22);
  r0.y = rsqrt(r0.y);
  o1.xyz = -viewI._m20_m21_m22 * r0.yyy;
  o0.xyzw = r2.yzwx;
  o5.xyz = v3.xyz;
  o5.w = r0.w;
  o7.w = r0.x;
  return;
}