// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:41:56 2019

cbuffer Viewport : register(b0)
{
  float4x4 _ViewRotProjectionMatrix : packoffset(c0);
  float4x4 _ViewProjectionMatrix : packoffset(c4);
  float4x4 _ProjectionMatrix : packoffset(c8);
  float4x4 _InvProjectionMatrix : packoffset(c12);
  float4x4 _InvProjectionMatrixDepth : packoffset(c16);
  float4x4 _DepthTextureTransform : packoffset(c20);
  float4x3 _ViewMatrix : packoffset(c24);
  float4x3 _InvViewMatrix : packoffset(c27);
  float4x4 _PreviousViewProjectionMatrix : packoffset(c30);
  float4 _CameraDistances : packoffset(c34);
  float4 _ViewportSize : packoffset(c35);
  float4 _CameraPosition_MaxStaticReflectionMipIndex : packoffset(c36);
  float4 _CameraDirection_MaxParaboloidReflectionMipIndex : packoffset(c37);
  float4 _ViewPoint_ExposureScale : packoffset(c38);
  float4 _FogColorVector_ExposedWhitePointOverExposureScale : packoffset(c39);
  float3 _SideFogColor : packoffset(c40);
  float3 _SunFogColorDelta : packoffset(c41);
  float3 _OppositeFogColorDelta : packoffset(c42);
  float4 _FogValues0 : packoffset(c43);
  float4 _FogValues1 : packoffset(c44);
  float4 _CameraNearPlaneSize : packoffset(c45);
  float4 _UncompressDepthWeights_ShadowProjDepthMinValue : packoffset(c46);
  float4 _UncompressDepthWeightsWS_ReflectionFadeTarget : packoffset(c47);
  float4 _WorldAmbientColorParams0 : packoffset(c48);
  float4 _WorldAmbientColorParams1 : packoffset(c49);
  float4 _WorldAmbientColorParams2 : packoffset(c50);
  float4 _GlobalWorldTextureParams : packoffset(c51);
  float4 _CullingCameraPosition_OneOverAutoExposureScale : packoffset(c52);
  float4 _AmbientSkyColor_ReflectionScaleStrength : packoffset(c53);
  float4 _AmbientGroundColor_ReflectionScaleDistanceMul : packoffset(c54);
  float4 _FacettedShadowCastParams : packoffset(c55);
  float4 _FSMClipPlanes : packoffset(c56);
  float2 _ReflectionGIControl : packoffset(c57);
}

cbuffer LightProbes : register(b1)
{
  float4 _InteriorIrradianceRadianceScale : packoffset(c0);
  float4x4 _LocalToWorldMatrixWithFeatherMargin : packoffset(c1);
  float4x4 _LocalToWorldMatrixWithoutFeatherMargin : packoffset(c5);
  float4 _MiscDataToTidy : packoffset(c9);
  float4x4 _ScreenToLocalMatrix : packoffset(c10);
  float4x4 _WorldToLocalMatrix : packoffset(c14);
  float3 _InteriorAmbientLightInfo : packoffset(c18);
  float _LinearGridResCutoff : packoffset(c18.w);
  float3 _InteriorUVWBias : packoffset(c19);
  float _MaxLinearSliceIndex : packoffset(c19.w);
  float3 _InteriorUVWScale : packoffset(c20);
  float3 _RcpFeatherWidthsInBasicUVWSpace : packoffset(c21);
  float3 _VolumeCentre : packoffset(c22);
  float3 _VolumeDimensions : packoffset(c23);
  float2 _IrradianceSHInfo : packoffset(c24);
  float2 _MaxDepthBoundsInnerOuter : packoffset(c24.z);
  float2 _RadianceSHInfo : packoffset(c25);
  float2 _SkySHInfo : packoffset(c25.z);
}

cbuffer LightProbesGlobal : register(b2)
{
  float4x4 _BoxMatrix : packoffset(c0);
  float4 _LightProbesMultipliers : packoffset(c4);
  float4 _MinAmbient : packoffset(c5);
  float4 _ProbeUVToViewSpace : packoffset(c6);
  float4 _SH_B : packoffset(c7);
  float4 _SH_G : packoffset(c8);
  float4 _SH_R : packoffset(c9);
  float4x4 _ScreenToWorldMatrix : packoffset(c10);
  float4x4 _ViewProjectionMatrixWithZBias : packoffset(c14);
  float4 _VolumeCentreGlobal : packoffset(c18);
  float4 _WorldEdgeFadeParams : packoffset(c19);
  float3 _DefaultProbeAverageColor : packoffset(c20);
  float _CenterBaseZ : packoffset(c20.w);
  float3 _DefaultProbeLowerColor : packoffset(c21);
  float _DrawDistance : packoffset(c21.w);
  float3 _DefaultProbeUpperColor : packoffset(c22);
  int _ProbeMSAALevel : packoffset(c22.w);
  float2 _LocalLightsMultipliersGlobal : packoffset(c23);
  float2 _RelightingMultiplier : packoffset(c23.z);
}

SamplerState Viewport__GBufferNormalTexture__SampObj___s_s : register(s0);
SamplerState LightProbes__FloorCeilingTexture__SampObj___s_s : register(s1);
SamplerState LightProbes__VolumeTextureB__SampObj___s_s : register(s2);
SamplerState LightProbes__VolumeTextureG__SampObj___s_s : register(s3);
SamplerState LightProbes__VolumeTextureR__SampObj___s_s : register(s4);
Texture2D<float4> Viewport__GBufferNormalTexture__TexObj__ : register(t0);
Texture2D<float4> LightProbes__FloorCeilingTexture__TexObj__ : register(t1);
Texture3D<float4> LightProbes__VolumeTextureB__TexObj__ : register(t2);
Texture3D<float4> LightProbes__VolumeTextureG__TexObj__ : register(t3);
Texture3D<float4> LightProbes__VolumeTextureR__TexObj__ : register(t4);
Texture2DMS<float4> LightProbesGlobal__GBufferNormalTextureMS : register(t5);
Texture2DMS<float4> LightProbesGlobal__ProbeDepthSamplerMS : register(t6);
Texture2D<float4> StereoParams : register(t125);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : TEXCOORD0,
  float3 v1 : TEXCOORD1,
  float4 v2 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v2.xy;
  r0.zw = float2(0,0);
  r1.x = LightProbesGlobal__ProbeDepthSamplerMS.Load(r0.xy, 0).x;
  r0.xyz = LightProbesGlobal__GBufferNormalTextureMS.Load(r0.xy, 0).xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.yw = float2(1,1);
  r0.w = dot(r1.xy, _InvProjectionMatrix._m22_m32);
  r1.x = dot(r1.xy, _InvProjectionMatrix._m23_m33);
  r0.w = -r0.w / r1.x;
  r1.z = -r0.w;
  r2.xy = LightProbesGlobal__ProbeDepthSamplerMS.GetSamplePosition(0);
  r2.xy = v2.xy + r2.xy;
  r2.xy = _ViewportSize.zw * r2.xy;
  r2.zw = _ProbeUVToViewSpace.xy * r2.xy + _ProbeUVToViewSpace.zw;
  r0.w = Viewport__GBufferNormalTexture__TexObj__.Sample(Viewport__GBufferNormalTexture__SampObj___s_s, r2.xy).w;
  r0.w = trunc(r0.w);
  r0.w = 0.125 * r0.w;
  r1.xy = r2.zw * r1.zz;
  r2.x = dot(r1.xyzw, _InvViewMatrix._m00_m10_m20_m30);
  r2.y = dot(r1.xyzw, _InvViewMatrix._m01_m11_m21_m31);
  r2.z = dot(r1.xyzw, _InvViewMatrix._m02_m12_m22_m32);
  r2.w = 1;
  r1.x = dot(r2.xyzw, _WorldToLocalMatrix._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, _WorldToLocalMatrix._m01_m11_m21_m31);
  r1.z = saturate(dot(r2.xyzw, _WorldToLocalMatrix._m02_m12_m22_m32));
  r3.xyzw = r1.xyxy * float4(1,1,-1,-1) + float4(0.500050008,0.500050008,0.500050008,0.500050008);
  r3.xyzw = cmp(r3.xyzw < float4(0,0,0,0));
  r3.xy = (int2)r3.zw | (int2)r3.xy;
  r1.w = (int)r3.y | (int)r3.x;
  if (r1.w != 0) discard;
  r3.xyz = -_ViewPoint_ExposureScale.xyz + r2.xyz;
  r2.xy = abs(r2.xy) * _WorldEdgeFadeParams.xy + float2(-1,-1);
  r2.xy = saturate(_WorldEdgeFadeParams.zw * r2.xy);
  r1.w = max(r2.x, r2.y);
  r2.x = dot(r3.xyz, r3.xyz);
  r2.x = rsqrt(r2.x);
  r2.xyw = r3.xyz * r2.xxx;
  r3.x = dot(r2.xyw, r0.xyz);
  r3.x = r3.x + r3.x;
  r2.xyw = r0.xyz * -r3.xxx + r2.xyw;
  r2.xyw = r2.xyw + -r0.xyz;
  r0.xyz = r2.xyw * float3(0.25,0.25,0.25) + r0.xyz;
  r2.x = dot(r0.xyz, r0.xyz);
  r2.x = rsqrt(r2.x);
  r2.y = -_CameraPosition_MaxStaticReflectionMipIndex.z + r2.z;
  r2.y = saturate(r2.y * 0.5 + 0.5);
  r2.y = r2.y * -2 + 1;
  r2.w = r0.z * r2.x + r2.y;
  r0.xyz = r2.xxx * r0.xyz;
  r2.x = 1 + abs(r2.y);
  r2.x = r2.w / r2.x;
  r2.y = saturate(r1.z / _LinearGridResCutoff);
  r1.z = saturate(-_LinearGridResCutoff + r1.z);
  r2.y = _MaxLinearSliceIndex * r2.y;
  r2.w = cmp(0 < _LinearGridResCutoff);
  r2.y = r2.w ? r2.y : 0;
  r2.w = 1 + -_LinearGridResCutoff;
  r1.z = r1.z / r2.w;
  r1.z = log2(r1.z);
  r1.z = _MiscDataToTidy.w * r1.z;
  r1.z = exp2(r1.z);
  r3.xyzw = float4(-1,-1,-1,-1) + _MiscDataToTidy.xxyz;
  r2.w = -_MaxLinearSliceIndex + r3.w;
  r1.z = r2.w * r1.z;
  r2.w = cmp(_LinearGridResCutoff < 1);
  r1.z = r2.w ? r1.z : 0;
  r1.z = r2.y + r1.z;
  r1.z = r1.z / _MiscDataToTidy.z;
  r4.xyzw = float4(0.5,0.5,0.200000003,0.5) / _MiscDataToTidy.xyzz;
  r1.z = r2.x * r4.z + r1.z;
  r2.xy = float2(0.5,0.5) + r1.xy;
  r1.xy = float2(0.5,0.5) + -abs(r1.xy);
  r1.xy = saturate(float2(500,500) * r1.xy);
  r2.w = _VolumeDimensions.x / r3.x;
  r3.xy = r3.yz / _MiscDataToTidy.xy;
  r2.w = 0.300000012 * r2.w;
  r3.zw = r2.ww * r0.xy;
  r1.xy = r3.zw * r1.xy;
  r1.xy = r1.xy / _VolumeDimensions.xy;
  r1.xy = saturate(r2.xy + r1.xy);
  r1.xy = r1.xy + r4.xy;
  r3.xy = r1.xy * r3.xy;
  r1.x = _MiscDataToTidy.z * r1.z;
  r1.y = floor(r1.x);
  r1.x = ceil(r1.x);
  r1.xy = r1.xy / _MiscDataToTidy.zz;
  r2.x = saturate(r3.y);
  r2.x = r2.x / _MiscDataToTidy.z;
  r3.z = r2.x + r1.y;
  r2.xy = LightProbes__FloorCeilingTexture__TexObj__.SampleLevel(LightProbes__FloorCeilingTexture__SampObj___s_s, r3.xz, 0).xy;
  r2.w = r2.x / _MiscDataToTidy.z;
  r2.w = r2.w + r1.y;
  r1.z = -r2.w + r1.z;
  r1.z = _MiscDataToTidy.z * r1.z;
  r2.xw = float2(1,1) + -r2.xy;
  r2.y = r2.w * 0.25 + r2.y;
  r2.x = min(r2.x, r2.y);
  r1.z = saturate(r1.z / r2.x);
  r1.x = r1.x + -r1.y;
  r1.x = r1.z * r1.x + r1.y;
  r3.w = r1.x + r4.w;
  r4.xyzw = LightProbes__VolumeTextureR__TexObj__.SampleLevel(LightProbes__VolumeTextureR__SampObj___s_s, r3.xyw, 0).xyzw;
  r5.xyzw = _SH_R.xyzw + -r4.xyzw;
  r1.x = _VolumeDimensions.z + _VolumeCentre.z;
  r1.x = r1.x + -r2.z;
  r1.x = saturate(0.0333329998 * r1.x);
  r1.x = 1 + -r1.x;
  r1.x = max(r1.x, r1.w);
  r2.xyzw = r1.xxxx * r5.xyzw + r4.xyzw;
  r2.xyzw = max(_MinAmbient.xxxw, r2.xyzw);
  r1.y = cmp(r0.w >= -r0.w);
  r0.w = frac(abs(r0.w));
  r0.w = r1.y ? r0.w : -r0.w;
  r0.w = cmp(r0.w >= 0.5);
  r4.w = -0.25 * r0.z;
  r5.w = -r0.z;
  r5.x = dot(r0.xyz, float3(-0.408248007,-0.707107008,0.57735002));
  r4.x = r5.x * 0.666000009 + 0.333000004;
  r5.y = dot(r0.xzy, float3(-0.408248007,0.57735002,0.707107008));
  r4.y = r5.y * 0.666000009 + 0.333000004;
  r5.z = dot(r0.xz, float2(0.816497028,0.57735002));
  r0.x = r0.z * 0.5 + 0.5;
  r0.x = r0.x * 0.400000006 + 0.850000024;
  r4.z = r5.z * 0.666000009 + 0.333000004;
  r4.xyzw = saturate(r0.wwww ? r4.xyzw : r5.xyzw);
  r5.xyzw = LightProbes__VolumeTextureG__TexObj__.SampleLevel(LightProbes__VolumeTextureG__SampObj___s_s, r3.xyw, 0).xyzw;
  r3.xyzw = LightProbes__VolumeTextureB__TexObj__.SampleLevel(LightProbes__VolumeTextureB__SampObj___s_s, r3.xyw, 0).xyzw;
  r6.xyzw = _SH_G.xyzw + -r5.xyzw;
  r5.xyzw = r1.xxxx * r6.xyzw + r5.xyzw;
  r5.xyzw = max(_MinAmbient.ywyy, r5.xwyz);
  r1.yzw = r5.xzw * r4.yyy;
  r1.yzw = r4.xxx * r2.xyz + r1.yzw;
  r5.x = r2.w;
  r2.xyzw = _SH_B.xyzw + -r3.xyzw;
  r2.xyzw = r1.xxxx * r2.xyzw + r3.xyzw;
  r2.xyzw = max(_MinAmbient.zzzw, r2.xyzw);
  r1.xyz = r4.zzz * r2.xyz + r1.yzw;
  r5.z = r2.w;
  r1.xyz = r4.www * r5.xyz + r1.xyz;
  r0.y = r4.x + r4.y;
  r0.y = r0.y + r4.z;
  r0.y = r0.y + r4.w;
  r1.xyz = r1.xyz / r0.yyy;
  r0.xyz = r1.xyz * r0.xxx;
  o0.xyz = r0.www ? r0.xyz : r1.xyz;
  o0.w = 1;
  return;
}