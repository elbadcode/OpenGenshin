// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:42:01 2019
groupshared struct { float val[1]; } g4[192];
groupshared struct { float val[1]; } g2[192];

cbuffer cb12 : register(b12)
{
  float4 cb12[210] : packoffset(c0);
}

cbuffer cb13 : register(b13)
{
  float4 cb13[3323] : packoffset(c0);
}

Texture2D<float4> t0 : register(t0);
Texture2D<float4> t1 : register(t1);
RWTexture2D<float4> u0 : register(u0);
RWByteAddressBuffer u1 : register(u1);


// 3Dmigoto declarations
#define cmp -


void main)
{
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
// Needs manual fix for instruction:
// unknown dcl_: dcl_uav_raw u1
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g0, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g1, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g3, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_tgsm_raw g5, 4
// Needs manual fix for instruction:
// unknown dcl_: dcl_thread_group 16, 16, 1
  r0.xy = mad((int2)vThreadGroupID.xy, int2(16,16), (int2)vThreadIDInGroup.xy);
  r1.x = mad((int)vThreadIDInGroup.y, 16, (int)vThreadIDInGroup.x);
  r1.yz = (uint2)vThreadIDInGroup.xy << int2(1,1);
  r2.xy = mad((int2)vThreadGroupID.xy, int2(32,32), (int2)r1.yz);
  r2.zw = float2(0,0);
  r1.y = t0.Load(r2.xyz).x;
  r1.z = r1.y * cb12[22].x + cb12[22].y;
  if (r1.x == 0) {
  // No code for instruction (needs manual fix):
    store_raw g3.x, l(0), l(0)
    g2[0].val[0/4] = 0;
    g4[0].val[0/4] = 0;
  // No code for instruction (needs manual fix):
    store_raw g5.x, l(0), l(0)
  // No code for instruction (needs manual fix):
    store_raw g0.x, l(0), l(340282346638528859811704183484516925440.000000)
  // No code for instruction (needs manual fix):
    store_raw g1.x, l(0), l(0)
  }
  GroupMemoryBarrierWithGroupSync();
  // Needs manual fix for instruction:
atomic_umin g0, l(0), r1.z
  InterlockedMin(dest, value, orig_value);
  // Needs manual fix for instruction:
atomic_umax g1, l(0), r1.z
  InterlockedMax(dest, value, orig_value);
  GroupMemoryBarrierWithGroupSync();
// No code for instruction (needs manual fix):
ld_raw r1.w, l(0), g0.xxxx
  r1.w = r1.w * cb12[21].x + cb12[21].y;
  r1.w = max(9.99999975e-05, r1.w);
  r2.z = 1 / r1.w;
// No code for instruction (needs manual fix):
ld_raw r1.w, l(0), g1.xxxx
  r1.w = r1.w * cb12[21].x + cb12[21].y;
  r1.w = max(9.99999975e-05, r1.w);
  r2.x = 1 / r1.w;
  r3.xy = float2(0.015625,0.015625) * cb12[23].xy;
  r3.zw = (uint2)vThreadGroupID.xy;
  r4.zw = cb12[23].xy * float2(0.015625,0.015625) + -r3.zw;
  r4.y = cb12[13].x * r3.x;
  r4.x = -cb12[14].y * r3.y;
  r3.xyzw = float4(0,1,0,1) + -r4.yzxw;
  r4.xyzw = float4(0,1,0,1) + r4.yzxw;
  r1.w = dot(r3.xy, r3.xy);
  r1.w = sqrt(r1.w);
  r3.xy = r3.xy / r1.ww;
  r1.w = dot(r4.xy, r4.xy);
  r1.w = sqrt(r1.w);
  r4.xy = r4.xy / r1.ww;
  r1.w = dot(r3.zw, r3.zw);
  r1.w = sqrt(r1.w);
  r3.zw = r3.zw / r1.ww;
  r1.w = dot(r4.zw, r4.zw);
  r1.w = sqrt(r1.w);
  r4.zw = r4.zw / r1.ww;
  r2.yw = float2(1,1);
  r1.w = r1.x;
  while (true) {
    r5.x = cmp((int)r1.w >= asint(cb13[2362].x));
    if (r5.x != 0) break;
    r5.x = (int)r1.w * 5;
    r6.x = dot(r3.xy, cb13[r5.x+2363].xz);
    r6.y = dot(r3.xy, cb13[r5.x+2364].xz);
    r6.z = dot(r3.xy, cb13[r5.x+2365].xz);
    r5.yzw = cb13[r5.x+2366].xyz * r6.xyz;
    r6.x = cb13[r5.x+2363].w;
    r6.y = cb13[r5.x+2364].w;
    r6.z = cb13[r5.x+2365].w;
    r6.w = dot(r6.xyz, r5.yzw);
    r7.w = -r6.w;
    r8.x = 0x0000ffff & asint(cb13[r5.x+2366].w);
    r8.x = (uint)r8.x;
    r8.x = cmp(0 < r8.x);
    r8.y = cmp(-1.000000 == cb13[r5.x+2367].w);
    r8.x = (int)r8.y | (int)r8.x;
    r7.xyz = abs(r5.yzw);
    r7.x = dot(float4(1,1,1,1), r7.xyzw);
    r7.x = cmp(r7.x >= 0);
    r5.y = dot(r5.yzw, r5.yzw);
    r5.y = sqrt(r5.y);
    r5.y = cmp(r6.w < r5.y);
    r5.y = r8.x ? r7.x : r5.y;
    r5.z = (int)r5.y & 1;
    r7.x = dot(r4.xy, cb13[r5.x+2363].xz);
    r7.y = dot(r4.xy, cb13[r5.x+2364].xz);
    r7.z = dot(r4.xy, cb13[r5.x+2365].xz);
    r7.xyz = cb13[r5.x+2366].xyz * r7.xyz;
    r5.w = dot(r6.xyz, r7.xyz);
    r9.w = -r5.w;
    r9.xyz = abs(r7.xyz);
    r6.w = dot(float4(1,1,1,1), r9.xyzw);
    r6.w = cmp(r6.w >= 0);
    r7.x = dot(r7.xyz, r7.xyz);
    r7.x = sqrt(r7.x);
    r5.w = cmp(r5.w < r7.x);
    r5.w = r8.x ? r6.w : r5.w;
    bitmask.y = ((~(-1 << 1)) << 0) & 0xffffffff;  r5.y = (((uint)r5.y << 0) & bitmask.y) | ((uint)2 & ~bitmask.y);
    r5.y = r5.w ? r5.y : r5.z;
    r7.x = dot(r3.zw, cb13[r5.x+2363].yz);
    r7.y = dot(r3.zw, cb13[r5.x+2364].yz);
    r7.z = dot(r3.zw, cb13[r5.x+2365].yz);
    r7.xyz = cb13[r5.x+2366].xyz * r7.xyz;
    r5.z = dot(r6.xyz, r7.xyz);
    r9.w = -r5.z;
    r9.xyz = abs(r7.xyz);
    r5.w = dot(float4(1,1,1,1), r9.xyzw);
    r5.w = cmp(r5.w >= 0);
    r6.w = dot(r7.xyz, r7.xyz);
    r6.w = sqrt(r6.w);
    r5.z = cmp(r5.z < r6.w);
    r5.z = r8.x ? r5.w : r5.z;
    r5.w = (int)r5.y + 4;
    r5.y = r5.z ? r5.w : r5.y;
    r7.x = dot(r4.zw, cb13[r5.x+2363].yz);
    r7.y = dot(r4.zw, cb13[r5.x+2364].yz);
    r7.z = dot(r4.zw, cb13[r5.x+2365].yz);
    r7.xyz = cb13[r5.x+2366].xyz * r7.xyz;
    r5.z = dot(r6.xyz, r7.xyz);
    r6.w = -r5.z;
    r6.xyz = abs(r7.xyz);
    r5.w = dot(float4(1,1,1,1), r6.xyzw);
    r5.w = cmp(r5.w >= 0);
    r6.x = dot(r7.xyz, r7.xyz);
    r6.x = sqrt(r6.x);
    r5.z = cmp(r5.z < r6.x);
    r5.z = r8.x ? r5.w : r5.z;
    r5.w = (int)r5.y + 8;
    r5.y = r5.z ? r5.w : r5.y;
    r6.x = dot(r2.xy, cb13[r5.x+2363].zw);
    r6.y = dot(r2.xy, cb13[r5.x+2364].zw);
    r6.z = dot(r2.xy, cb13[r5.x+2365].zw);
    r7.x = -cb13[r5.x+2363].z;
    r7.y = -cb13[r5.x+2364].z;
    r7.z = -cb13[r5.x+2365].z;
    r7.xyz = cb13[r5.x+2366].xyz * r7.xyz;
    r5.z = dot(r6.xyz, r7.xyz);
    r6.w = -r5.z;
    r6.xyz = abs(r7.xyz);
    r5.w = dot(float4(1,1,1,1), r6.xyzw);
    r5.w = cmp(r5.w >= 0);
    r6.x = dot(r7.xyz, r7.xyz);
    r6.x = sqrt(r6.x);
    r5.z = cmp(r5.z < r6.x);
    r5.z = r8.x ? r5.w : r5.z;
    r5.w = (int)r5.y + 16;
    r5.y = r5.z ? r5.w : r5.y;
    r6.x = dot(r2.zw, cb13[r5.x+2363].zw);
    r6.y = dot(r2.zw, cb13[r5.x+2364].zw);
    r6.z = dot(r2.zw, cb13[r5.x+2365].zw);
    r7.x = cb13[r5.x+2363].z;
    r7.y = cb13[r5.x+2364].z;
    r7.z = cb13[r5.x+2365].z;
    r5.xzw = cb13[r5.x+2366].xyz * r7.xyz;
    r6.x = dot(r6.xyz, r5.xzw);
    r7.w = -r6.x;
    r7.xyz = abs(r5.xzw);
    r6.y = dot(float4(1,1,1,1), r7.xyzw);
    r6.y = cmp(r6.y >= 0);
    r5.x = dot(r5.xzw, r5.xzw);
    r5.x = sqrt(r5.x);
    r5.x = cmp(r6.x < r5.x);
    r5.x = r8.x ? r6.y : r5.x;
    r5.z = (int)r5.y + 32;
    r5.x = r5.x ? r5.z : r5.y;
    r5.y = cmp((int)r5.x == 63);
    r5.x = (int)r5.x & 31;
    r5.x = cmp((int)r5.x == 31);
    if (r5.x != 0) {
      // Needs manual fix for instruction:
        imm_atomic_iadd r6.x, g5, l(0), l(1)
      InterlockedAdd(dest, imm_value, orig_value);
      r5.x = cmp((uint)r6.x < 192);
      if (r5.x != 0) {
        g4[r6.x].val[0/4] = r1.w;
      }
    }
    if (r5.y != 0) {
      // Needs manual fix for instruction:
        imm_atomic_iadd r5.x, g3, l(0), l(1)
      InterlockedAdd(dest, imm_value, orig_value);
      r5.y = cmp((uint)r5.x < 192);
      if (r5.y != 0) {
        g2[r5.x].val[0/4] = r1.w;
      }
    }
    r1.w = (int)r1.w + 256;
  }
  GroupMemoryBarrierWithGroupSync();
  r1.z = cmp(r1.z < 1);
  if (r1.z != 0) {
    r1.zw = (uint2)r0.xy;
    r2.xy = float2(0.5,0.5) * cb12[23].xy;
    r1.zw = float2(0.5,0.5) + r1.zw;
    r1.zw = r1.zw / r2.xy;
    r1.zw = r1.zw * float2(2,2) + float2(-1,-1);
    r2.xyzw = cb12[207].xyzw * -r1.wwww;
    r2.xyzw = cb12[206].xyzw * r1.zzzz + r2.xyzw;
    r2.xyzw = cb12[208].xyzw * r1.yyyy + r2.xyzw;
    r2.xyzw = cb12[209].xyzw + r2.xyzw;
    r1.yzw = r2.xyz / r2.www;
    r0.zw = float2(0,0);
    r0.zw = t1.Load(r0.xyz).xy;
    r2.xyz = -cb12[0].xyz + r1.yzw;
    r2.w = dot(r2.xyz, r2.xyz);
    r2.w = sqrt(r2.w);
    r3.x = cb12[1].z;
    r3.y = cb12[2].z;
    r3.z = cb12[3].z;
    r2.x = dot(r3.xyz, r2.xyz);
    r2.y = 1 / cb12[21].y;
    r2.y = r2.w * r2.y;
    r2.x = r2.y / r2.x;
    r2.x = r2.w + -r2.x;
    r2.x = saturate(cb13[33].w * r2.x);
    r2.x = cb13[33].z * r2.x;
    r2.x = max(0.00100000005, r2.x);
    r2.y = r2.w / cb13[34].z;
    r2.z = cmp(r0.z < r0.w);
    if (r2.z != 0) {
      r2.z = cmp(r2.y < r0.z);
      r2.w = cmp(r0.w < r2.y);
      r3.x = cb13[34].z * r0.z + -cb13[34].x;
      r3.x = saturate(-r3.x * cb13[34].y + 1);
      r3.y = r2.y + -r0.z;
      r3.y = cb13[34].z * r3.y;
      r3.y = saturate(r3.y / r2.x);
      r3.y = r3.x * r3.y;
      r2.z = (int)r2.z | (int)r2.w;
      r3.x = 1;
      r2.zw = r2.zz ? float2(0,1) : r3.xy;
    } else {
      r3.x = cmp(r0.w < r0.z);
      r3.y = cmp(r2.y < r0.w);
      r3.z = cmp(r0.z < r2.y);
      r0.z = cb13[34].z * r0.z + -cb13[34].x;
      r4.y = saturate(-r0.z * cb13[34].y + 1);
      r0.z = r2.y + -r0.w;
      r0.z = cb13[34].z * r0.z;
      r0.z = saturate(r0.z / r2.x);
      r4.w = 1 + -r0.z;
      r4.xz = float2(1,1);
      r0.zw = r3.zz ? r4.xy : r4.zw;
      r0.zw = r3.yy ? float2(1,1) : r0.zw;
      r2.zw = r3.xx ? r0.zw : float2(0,1);
    }
    r0.z = -r2.w * r2.z + 1;
    r2.xy = (int2)r0.xy & int2(1,1);
    r2.yz = r2.yy ? float2(1.40129846e-45,4.20389539e-45) : float2(2.80259693e-45,0);
    r0.w = r2.x ? r2.y : r2.z;
    if (1 == 0) r2.x = 0; else if (1+1 < 32) {     r2.x = (uint)r0.x << (32-(1 + 1)); r2.x = (uint)r2.x >> (32-1);    } else r2.x = (uint)r0.x >> 1;
    if (1 == 0) r2.y = 0; else if (1+1 < 32) {     r2.y = (uint)r0.y << (32-(1 + 1)); r2.y = (uint)r2.y >> (32-1);    } else r2.y = (uint)r0.y >> 1;
    if (1 == 0) r2.z = 0; else if (1+2 < 32) {     r2.z = (uint)r0.x << (32-(1 + 2)); r2.z = (uint)r2.z >> (32-1);    } else r2.z = (uint)r0.x >> 2;
    if (1 == 0) r2.w = 0; else if (1+2 < 32) {     r2.w = (uint)r0.y << (32-(1 + 2)); r2.w = (uint)r2.w >> (32-1);    } else r2.w = (uint)r0.y >> 2;
    r3.xyzw = r2.yyww ? float4(1,3,1,3) : float4(2,0,2,0);
    r2.xy = r2.xz ? r3.xz : r3.yw;
    r0.w = (uint)r0.w << 4;
    r0.w = mad((int)r2.x, 4, (int)r0.w);
    r0.w = (int)r0.w + (int)r2.y;
    r0.w = (int)r0.w;
    r0.w = 0.5 + r0.w;
    r2.x = 0.015625 * r0.w;
    r2.yzw = cb12[2].xyz * r1.zzz;
    r2.yzw = cb12[1].xyz * r1.yyy + r2.yzw;
    r1.yzw = cb12[3].xyz * r1.www + r2.yzw;
    r3.xyz = cb12[4].xyz + r1.yzw;
  // No code for instruction (needs manual fix):
    ld_raw r1.y, l(0), g3.xxxx
    r0.w = -r0.w * 0.015625 + 1;
    r3.w = 1;
    r4.xzw = float3(0,0,0);
    r5.xyzw = float4(0,0,0,0);
    r1.z = 0;
    while (true) {
      r1.w = cmp((uint)r1.z >= (uint)r1.y);
      if (r1.w != 0) break;
      r1.w = g2[r1.z].val[0/4];
      r1.w = (int)r1.w * 5;
      r6.x = dot(r3.xyzw, cb13[r1.w+2363].xyzw);
      r6.y = dot(r3.xyzw, cb13[r1.w+2364].xyzw);
      r6.z = dot(r3.xyzw, cb13[r1.w+2365].xyzw);
      r2.yzw = cmp(abs(r6.xyz) < float3(1,1,1));
      r2.y = r2.z ? r2.y : 0;
      r2.y = r2.w ? r2.y : 0;
      if (r2.y != 0) {
        r2.y = asuint(cb13[r1.w+2366].w) >> 16;
        r2.y = (uint)r2.y;
        r2.z = 0x0000ffff & asint(cb13[r1.w+2366].w);
        r2.z = (uint)r2.z;
        r2.yz = float2(1.49999996e-05,1.49999996e-05) * r2.yz;
        r2.w = dot(r6.xyz, r6.xyz);
        r2.w = sqrt(r2.w);
        r2.w = 1 + -r2.w;
        r2.w = max(0, r2.w);
        r6.xy = cb13[r1.w+2367].wx * r2.ww;
        r6.x = saturate(r6.x);
        r2.w = cmp(-1.000000 == cb13[r1.w+2367].w);
        r6.z = cmp(r2.y >= r0.w);
        r4.y = r6.z ? 1.000000 : 0;
        r2.y = cmp(r2.y >= r2.x);
        r2.y = r2.y ? 1.000000 : 0;
        r7.x = r2.z * r2.y;
        r7.y = min(0.998036981, r6.y);
        r7.zw = cb13[r1.w+2367].yz * r6.xx;
        r6.xyzw = r2.wwww ? r4.xyzw : r7.xyzw;
        r5.xyzw = max(r5.xyzw, r6.xyzw);
      }
      r1.z = (int)r1.z + 1;
    }
    r0.w = r5.y * r5.y;
    r1.y = cmp(0 < r5.x);
    r1.z = r1.y ? 0 : 1;
    r0.z = r0.z * r0.z;
    r0.z = min(r1.z, r0.z);
    r0.z = max(r0.z, r0.w);
    r0.z = 1 + -r0.z;
    r0.w = 1 + -r5.x;
    r1.z = 1 + -cb13[33].y;
    r0.w = r1.y ? r0.w : r1.z;
    r1.yz = float2(1,1) + -r5.zw;
    r0.w = min(r1.y, r0.w);
    r0.w = r0.w + -r1.z;
    r2.y = r0.z * r0.w + r1.z;
    r2.x = 1 + -r0.z;
  } else {
    r2.xy = float2(1,1);
  }
  r2.z = 0;
// No code for instruction (needs manual fix):
store_uav_typed u0.xyzw, r0.xyyy, r2.zzxy
  r0.x = cmp((uint)r1.x < 192);
  if (r0.x != 0) {
    r0.xy = (uint2)vThreadGroupID.yx;
    r0.x = r0.x * cb12[24].z + r0.y;
    r0.x = (uint)r0.x;
    r0.x = mad((int)r0.x, 192, (int)r1.x);
  // No code for instruction (needs manual fix):
    ld_raw r0.y, l(0), g5.xxxx
    r0.y = cmp((uint)r1.x < (uint)r0.y);
    if (r0.y != 0) {
      r0.y = g4[r1.x].val[0/4];
    } else {
      r0.y = 192;
    }
    r0.x = (uint)r0.x << 2;
  // No code for instruction (needs manual fix):
    store_raw u1.x, r0.x, r0.y
  }
  return;
}