//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer SMAAFilterConstantscb
// {
//
//   struct
//   {
//       
//       float2 m_OneOverWidthHeight;   // Offset:    0
//       float2 m_ThresholdParams;      // Offset:    8
//       int4 m_SubsampleIndices;       // Offset:   16
//       float4 m_MiscParams;           // Offset:   32
//
//   } g_SMAAFilterConstants;           // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// LinearSampler                     sampler      NA          NA    5        1
// PointSampler                      sampler      NA          NA    6        1
// g_EdgesTexture_NG                 texture  float4          2d    5        1
// g_AreaTexture_NG                  texture  float4          2d    6        1
// g_SearchTexture_NG                texture  float4          2d    7        1
// SMAAFilterConstantscb             cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[2], immediateIndexed
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.zw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 6
sample_l r0.xyzw, v1.xyxx, t5.xyzw, s5, l(0.000000)
lt r0.y, l(0.000000), r0.y
if_nz r0.y
  lt r0.y, l(0.000000), r0.x
  mad r1.xyzw, cb1[0].xyxy, l(-1.000000, 1.000000, 1.000000, -1.000000), v1.xyxy
  mov r0.zw, r1.xxxy
  mov r2.xy, l(0,0,0,0)
  loop 
    ge r2.z, r2.y, l(8.000000)
    breakc_nz r2.z
    sample_l r3.xyzw, r0.zwzz, t5.xyzw, s5, l(0.000000)
    dp2 r2.z, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    lt r2.z, r2.z, l(1.900000)
    mov r2.x, r3.y
    breakc_nz r2.z
    mad r0.zw, cb1[0].xxxy, l(0.000000, 0.000000, -1.000000, 1.000000), r0.zzzw
    add r2.y, r2.y, l(1.000000)
    mov r2.x, r3.y
  endloop 
  lt r0.z, l(0.900000), r2.x
  and r0.z, r0.z, l(0x3f800000)
  add r0.z, r0.z, r2.y
  and r2.y, r0.z, r0.y
  mov r0.yz, r1.zzwz
  mov r0.w, l(0)
  loop 
    ge r1.x, r0.w, l(8.000000)
    breakc_nz r1.x
    sample_l r3.xyzw, r0.yzyy, t5.xyzw, s5, l(0.000000)
    dp2 r1.x, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    lt r1.x, r1.x, l(1.900000)
    breakc_nz r1.x
    mad r0.yz, cb1[0].xxyx, l(0.000000, 1.000000, -1.000000, 0.000000), r0.yyzy
    add r0.w, r0.w, l(1.000000)
  endloop 
  add r0.y, r0.w, r2.y
  lt r0.y, l(2.000000), r0.y
  if_nz r0.y
    mov r2.x, -r2.y
    mul r2.zw, r0.wwww, l(0.000000, 0.000000, 1.000000, -1.000000)
    mad r1.xyzw, r2.xyzw, cb1[0].xyxy, v1.xyxy
    sample_l_aoffimmi(-1,0,0) r3.xyzw, r1.xyxx, t5.xyzw, s5, l(0.000000)
    sample_l_aoffimmi(0,0,0) r4.xyzw, r1.xyxx, t5.xyzw, s5, l(0.000000)
    sample_l_aoffimmi(1,0,0) r5.xyzw, r1.zwzz, t5.yxzw, s5, l(0.000000)
    sample_l_aoffimmi(1,-1,0) r1.xyzw, r1.zwzz, t5.xyzw, s5, l(0.000000)
    mov r5.y, r3.y
    mov r1.y, r4.x
    mad r0.yz, r5.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), r1.xxyx
    ge r1.xy, l(7.000000, 7.000000, 0.000000, 0.000000), r2.zyzz
    and r1.xy, r1.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
    mul r0.yz, r0.yyzy, r1.xxyx
    itof r0.w, cb1[1].z
    mad r0.yz, r0.yyzy, l(0.000000, 20.000000, 20.000000, 0.000000), r2.zzyz
    mad r1.xy, r0.yzyy, l(0.001786, 0.006250, 0.000000, 0.000000), l(0.000893, 0.503125, 0.000000, 0.000000)
    mad r1.z, r0.w, l(0.142857), r1.x
    sample_l r1.xyzw, r1.yzyy, t6.xyzw, s5, l(0.000000)
  else 
    mov r1.xy, l(0,0,0,0)
  endif 
  add r0.yz, v1.xxyx, -cb1[0].xxyx
  mov r1.zw, r0.yyyz
  mov r2.x, l(0)
  loop 
    ge r0.w, r2.x, l(8.000000)
    breakc_nz r0.w
    sample_l r3.xyzw, r1.zwzz, t5.xyzw, s5, l(0.000000)
    sample_l_aoffimmi(1,0,0) r4.xyzw, r1.zwzz, t5.xyzw, s5, l(0.000000)
    mov r3.x, r4.x
    dp2 r0.w, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    lt r0.w, r0.w, l(1.900000)
    breakc_nz r0.w
    add r1.zw, r1.zzzw, -cb1[0].xxxy
    add r2.x, r2.x, l(1.000000)
  endloop 
  sample_l_aoffimmi(1,0,0) r3.xyzw, v1.xyxx, t5.xyzw, s5, l(0.000000)
  lt r0.y, l(0.000000), r3.x
  add r0.zw, v1.xxxy, cb1[0].xxxy
  mov r1.zw, r0.zzzw
  mov r2.w, l(0)
  mov r3.x, l(0)
  loop 
    ge r3.y, r3.x, l(8.000000)
    breakc_nz r3.y
    sample_l r4.xyzw, r1.zwzz, t5.xyzw, s5, l(0.000000)
    sample_l_aoffimmi(1,0,0) r5.xyzw, r1.zwzz, t5.xyzw, s5, l(0.000000)
    mov r4.x, r5.x
    dp2 r3.y, r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
    lt r3.y, r3.y, l(1.900000)
    mov r2.w, r4.y
    breakc_nz r3.y
    add r1.zw, r1.zzzw, cb1[0].xxxy
    add r3.x, r3.x, l(1.000000)
    mov r2.w, r4.y
  endloop 
  lt r0.z, l(0.900000), r2.w
  and r0.z, r0.z, l(0x3f800000)
  add r0.z, r0.z, r3.x
  and r2.z, r0.z, r0.y
  add r0.y, r2.z, r2.x
  lt r0.y, l(2.000000), r0.y
  if_nz r0.y
    mov r2.y, -r2.x
    mad r3.xyzw, r2.yyzz, cb1[0].xyxy, v1.xyxy
    sample_l_aoffimmi(-1,0,0) r4.xyzw, r3.xyxx, t5.xyzw, s5, l(0.000000)
    sample_l_aoffimmi(0,-1,0) r5.xyzw, r3.xyxx, t5.yzwx, s5, l(0.000000)
    sample_l_aoffimmi(1,0,0) r3.xyzw, r3.zwzz, t5.xyzw, s5, l(0.000000)
    mov r5.y, r4.y
    mov r5.xz, r3.yyxy
    mad r0.yz, r5.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), r5.zzwz
    ge r1.zw, l(0.000000, 0.000000, 7.000000, 7.000000), r2.zzzx
    and r1.zw, r1.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
    mul r0.yz, r0.yyzy, r1.zzwz
    itof r0.w, cb1[1].w
    mad r0.yz, r0.yyzy, l(0.000000, 20.000000, 20.000000, 0.000000), r2.zzxz
    mad r2.xy, r0.yzyy, l(0.001786, 0.006250, 0.000000, 0.000000), l(0.000893, 0.503125, 0.000000, 0.000000)
    mad r2.z, r0.w, l(0.142857), r2.x
    sample_l r2.xyzw, r2.yzyy, t6.xyzw, s5, l(0.000000)
    add r1.xy, r1.xyxx, r2.yxyy
  endif 
  dp2 r0.y, r1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  eq r0.y, r0.y, l(0.000000)
  if_nz r0.y
    mov r2.xy, v2.yxyy
    mov r2.z, l(1.000000)
    mov r3.x, l(0)
    loop 
      lt r0.y, v4.x, r2.y
      lt r0.z, l(0.828100), r2.z
      and r0.y, r0.z, r0.y
      eq r0.z, r3.x, l(0.000000)
      and r0.y, r0.z, r0.y
      breakc_z r0.y
      sample_l r3.xyzw, r2.yxyy, t5.xyzw, s5, l(0.000000)
      mad r2.xy, -cb1[0].yxyy, l(0.000000, 2.000000, 0.000000, 0.000000), r2.xyxx
      mov r2.z, r3.y
    endloop 
    mad r0.y, cb1[0].x, l(3.250000), r2.y
    mul r2.x, r3.x, l(0.500000)
    sample_l r2.xyzw, r2.xzxx, t7.xyzw, s6, l(0.000000)
    mul r0.z, r2.x, cb1[0].x
    mad r2.x, -r0.z, l(255.000000), r0.y
    mov r2.y, v3.y
    sample_l r3.xyzw, r2.xyxx, t5.xyzw, s5, l(0.000000)
    mov r4.xy, v2.wzww
    mov r4.z, l(1.000000)
    mov r5.x, l(0)
    loop 
      lt r0.y, r4.y, v4.y
      lt r0.z, l(0.828100), r4.z
      and r0.y, r0.z, r0.y
      eq r0.z, r5.x, l(0.000000)
      and r0.y, r0.z, r0.y
      breakc_z r0.y
      sample_l r5.xyzw, r4.yxyy, t5.xyzw, s5, l(0.000000)
      mad r4.xy, cb1[0].yxyy, l(0.000000, 2.000000, 0.000000, 0.000000), r4.xyxx
      mov r4.z, r5.y
    endloop 
    mad r0.y, -cb1[0].x, l(0.250000), r4.y
    mad r0.y, cb1[0].x, l(-3.000000), r0.y
    mad r4.x, r5.x, l(0.500000), l(0.500000)
    sample_l r4.xyzw, r4.xzxx, t7.xyzw, s6, l(0.000000)
    mul r0.z, r4.x, cb1[0].x
    mad r2.z, r0.z, l(255.000000), r0.y
    div r0.yz, r2.xxzx, cb1[0].xxxx
	
		add r0.yz, r0.yyzy, -v1.zzzz
    sqrt r1.zw, |r0.yyyz|
    sample_l_aoffimmi(1,0,0) r2.xyzw, r2.zyzz, t5.yxzw, s5, l(0.000000)
    itof r0.w, cb1[1].y
    mov r2.x, r3.x
    mul r2.xy, r2.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
    round_ne r2.xy, r2.xyxx
    mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 16.000000, 16.000000), r1.zzzw
    mad r2.xy, r1.zwzz, l(0.006250, 0.001786, 0.000000, 0.000000), l(0.003125, 0.000893, 0.000000, 0.000000)
    mad r2.z, r0.w, l(0.142857), r2.y
    sample_l r2.xyzw, r2.xzxx, t6.xyzw, s5, l(0.000000)
    mul r3.xz, r0.yyzy, cb1[0].xxxx
    mov r3.y, l(0)
    add r3.xyz, r3.xyzx, v1.xyxx
    sample_l_aoffimmi(0,1,0) r4.xyzw, r3.xyxx, t5.xyzw, s5, l(0.000000)
    lt r0.y, |r0.y|, |r0.z|
    sample_l_aoffimmi(0,-2,0) r5.xyzw, r3.xyxx, t5.yxzw, s5, l(0.000000)
    mov r5.x, r4.x
    add_sat r0.zw, -r5.xxxy, l(0.000000, 0.000000, 1.250000, 1.250000)
    mul r0.zw, r0.zzzw, r2.xxxy
    movc r1.zw, r0.yyyy, r0.zzzw, r2.xxxy
    sample_l_aoffimmi(1,1,0) r2.xyzw, r3.zyzz, t5.xyzw, s5, l(0.000000)
    sample_l_aoffimmi(1,-2,0) r3.xyzw, r3.zyzz, t5.yxzw, s5, l(0.000000)
    mov r3.x, r2.x
    add_sat r2.xy, -r3.xyxx, l(1.250000, 1.250000, 0.000000, 0.000000)
    mul r1.zw, r1.zzzw, r2.xxxy
    movc o0.xy, r0.yyyy, r0.zwzz, r1.zwzz
  else 
    mov o0.xy, r1.xyxx
    mov r0.x, l(0)
  endif 
else 
  mov o0.xy, l(0,0,0,0)
endif 
lt r0.x, l(0.000000), r0.x
if_nz r0.x
  mov r0.xy, v3.xyxx
  mov r0.z, l(1.000000)
  mov r1.x, l(0)
  loop 
    lt r0.w, v4.z, r0.y
    lt r2.x, l(0.828100), r0.z
    and r0.w, r0.w, r2.x
    eq r2.x, r1.x, l(0.000000)
    and r0.w, r0.w, r2.x
    breakc_z r0.w
    sample_l r1.xyzw, r0.xyxx, t5.yxzw, s5, l(0.000000)
    mad r0.xy, -cb1[0].xyxx, l(0.000000, 2.000000, 0.000000, 0.000000), r0.xyxx
    mov r0.z, r1.y
  endloop 
  mad r0.y, cb1[0].y, l(3.250000), r0.y
  mul r0.x, r1.x, l(0.500000)
  sample_l r1.xyzw, r0.xzxx, t7.xyzw, s6, l(0.000000)
  mul r0.x, r1.x, cb1[0].y
  mad r0.x, -r0.x, l(255.000000), r0.y
  mov r0.y, v2.x
  sample_l r1.xyzw, r0.yxyy, t5.xyzw, s5, l(0.000000)
  mov r2.xy, v3.zwzz
  mov r2.z, l(1.000000)
  mov r3.x, l(0)
  loop 
    lt r0.w, r2.y, v4.w
    lt r1.x, l(0.828100), r2.z
    and r0.w, r0.w, r1.x
    eq r1.x, r3.x, l(0.000000)
    and r0.w, r0.w, r1.x
    breakc_z r0.w
    sample_l r3.xyzw, r2.xyxx, t5.yxzw, s5, l(0.000000)
    mad r2.xy, cb1[0].xyxx, l(0.000000, 2.000000, 0.000000, 0.000000), r2.xyxx
    mov r2.z, r3.y
  endloop 
  mad r0.w, -cb1[0].y, l(0.250000), r2.y
  mad r0.w, cb1[0].y, l(-3.000000), r0.w
  mad r2.x, r3.x, l(0.500000), l(0.500000)
  sample_l r2.xyzw, r2.xzxx, t7.xyzw, s6, l(0.000000)
  mul r1.x, r2.x, cb1[0].y
  mad r0.z, r1.x, l(255.000000), r0.w
  div r0.xw, r0.xxxz, cb1[0].yyyy
  
	add r2.yz, r0.xxwx, -v1.wwww
  sqrt r0.xw, |r2.yyyz|
  sample_l_aoffimmi(0,1,0) r3.xyzw, r0.yzyy, t5.xyzw, s5, l(0.000000)
  itof r0.y, cb1[1].x
  mov r3.x, r1.y
  mul r1.xy, r3.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
  round_ne r1.xy, r1.xyxx
  mad r0.xz, r1.xxyx, l(16.000000, 0.000000, 16.000000, 0.000000), r0.xxwx
  mad r1.xy, r0.xzxx, l(0.006250, 0.001786, 0.000000, 0.000000), l(0.003125, 0.000893, 0.000000, 0.000000)
  mad r1.z, r0.y, l(0.142857), r1.y
  sample_l r0.xyzw, r1.xzxx, t6.xyzw, s5, l(0.000000)
  mov r2.x, l(0)
  mad r1.xyz, r2.xyzx, cb1[0].xyyx, v1.xyyx
  sample_l_aoffimmi(1,0,0) r3.xyzw, r1.xyxx, t5.xyzw, s5, l(0.000000)
  lt r0.z, |r2.y|, |r2.z|
  sample_l_aoffimmi(-2,0,0) r2.xyzw, r1.xyxx, t5.xzwy, s5, l(0.000000)
  mov r2.z, r3.y
  add_sat r1.yw, -r2.zzzw, l(0.000000, 1.250000, 0.000000, 1.250000)
  mul r1.yw, r0.xxxy, r1.yyyw
  movc r0.xy, r0.zzzz, r1.ywyy, r0.xyxx
  sample_l_aoffimmi(1,1,0) r2.xyzw, r1.xzxx, t5.xyzw, s5, l(0.000000)
  sample_l_aoffimmi(-2,1,0) r3.xyzw, r1.xzxx, t5.xzwy, s5, l(0.000000)
  mov r3.z, r2.y
  add_sat r1.xz, -r3.zzwz, l(1.250000, 0.000000, 1.250000, 0.000000)
  mul r0.xy, r0.xyxx, r1.xzxx
  movc o0.zw, r0.zzzz, r1.yyyw, r0.xxxy
else 
  mov o0.zw, l(0,0,0,0)
endif 
ret 
// Approximately 272 instruction slots used
 