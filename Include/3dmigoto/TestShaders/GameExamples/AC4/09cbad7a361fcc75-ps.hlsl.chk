// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:39:09 2019

cbuffer ScreenSpaceReflectionConstantscb : register(b2)
{

  struct
  {
    float4x4 m_WorldToProj;
    float4x4 m_ProjToWorld;
    float4 m_ScreenSize;
    float4 m_LinearZConstants;
    float m_DepthThreshold;
    float m_InitRayStepLength;
    float m_InvHiZMipIncrement;
    float m_OnePlusInvHiZMipIncrement;
    float m_FresnelTerm;
    float m_VignetteSizeScale;
    float m_VignetteSizeBias;
    float m_ReflectionBlurriness;
    float m_GlossShift;
    float m_GlossContrast;
    float m_InvDepthRange;
    float m_AngleAttenuation;
  } g_ScreenSpaceReflectionConstants : packoffset(c0);

}

SamplerState pointSampler_s_s : register(s0);
SamplerState linearSampler_s_s : register(s2);
Texture2D<float4> InputReflections2D : register(t1);
Texture2D<float4> InputTextureOriginalGbuffer0 : register(t2);
Texture2D<float4> InputTextureOriginalGbuffer1 : register(t3);
Texture2D<float2> InputTextureDepth : register(t6);
Texture2D<float4> InputTextureOriginalGbuffer2 : register(t7);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = InputTextureOriginalGbuffer0.SampleLevel(pointSampler_s_s, v1.xy, 0).xyzw;
  r1.xyzw = InputTextureOriginalGbuffer1.SampleLevel(pointSampler_s_s, v1.xy, 0).xyzw;
  r2.xyzw = InputTextureOriginalGbuffer2.SampleLevel(linearSampler_s_s, v1.xy, 0).xyzw;
  r0.x = r0.w * r0.w;
  r0.x = r2.w * r0.x + g_ScreenSpaceReflectionConstants.m_GlossShift;
  r0.y = saturate(-r1.w * 3 + 1);
  r0.x = saturate(-r0.x * r0.y + 0.5);
  r0.x = g_ScreenSpaceReflectionConstants.m_GlossContrast * r0.x;
  r0.y = r1.z * 2 + -0.800000012;
  r0.y = log2(r0.y);
  r0.y = g_ScreenSpaceReflectionConstants.m_AngleAttenuation * r0.y;
  r0.y = exp2(r0.y);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = sqrt(r0.z);
  r0.yz = cmp(r0.yz < float2(0.100000001,0.5));
  r0.y = (int)r0.z | (int)r0.y;
  r0.x = log2(r0.x);
  r0.x = 0.800000012 * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.y ? 1 : r0.x;
  r2.xyzw = InputReflections2D.SampleLevel(linearSampler_s_s, v1.xy, 0).xyzw;
  r3.xy = InputTextureDepth.SampleLevel(linearSampler_s_s, v1.xy, 0).xy;
  r0.y = cmp(r0.x >= 0.75);
  r0.z = cmp(r3.x >= 1);
  r0.y = (int)r0.z | (int)r0.y;
  r0.z = cmp(r2.w < 0.00999999978);
  r0.y = (int)r0.z | (int)r0.y;
  if (r0.y != 0) {
    o0.xyzw = float4(0,0,0,0);
    return;
  }
  r0.x = 1 + -r0.x;
  r1.xyzw = r1.zxyz * float4(2,2,2,2) + float4(-0.800000012,-1,-1,-1);
  r0.y = g_ScreenSpaceReflectionConstants.m_ProjToWorld._m10 * v1.y;
  r4.x = v1.x * g_ScreenSpaceReflectionConstants.m_ProjToWorld._m00 + g_ScreenSpaceReflectionConstants.m_ProjToWorld._m20;
  r4.y = v1.x * g_ScreenSpaceReflectionConstants.m_ProjToWorld._m01 + g_ScreenSpaceReflectionConstants.m_ProjToWorld._m21;
  r4.z = v1.x * g_ScreenSpaceReflectionConstants.m_ProjToWorld._m02 + g_ScreenSpaceReflectionConstants.m_ProjToWorld._m22;
  r0.z = g_ScreenSpaceReflectionConstants.m_ProjToWorld._m11 * v1.y;
  r0.w = g_ScreenSpaceReflectionConstants.m_ProjToWorld._m12 * v1.y;
  r0.yzw = r4.xyz + r0.yzw;
  r3.y = dot(r0.yzw, r1.yzw);
  r3.y = r3.y + r3.y;
  r0.yzw = r3.yyy * r1.yzw + -r0.yzw;
  r3.yz = float2(-0.5,-0.5) + v1.xy;
  r3.yz = saturate(g_ScreenSpaceReflectionConstants.m_VignetteSizeScale * abs(r3.yz) + g_ScreenSpaceReflectionConstants.m_VignetteSizeBias);
  r3.y = r3.y * r3.z;
  r0.y = saturate(dot(r1.yzw, r0.yzw));
  r0.y = 1 + -r0.y;
  r0.z = 1 + -g_ScreenSpaceReflectionConstants.m_FresnelTerm;
  r0.w = r0.y * r0.y;
  r0.w = r0.w * r0.w;
  r0.y = r0.y * r0.w;
  r0.y = r0.z * r0.y + g_ScreenSpaceReflectionConstants.m_FresnelTerm;
  r1.x = saturate(r1.x);
  r0.z = log2(r1.x);
  r0.z = g_ScreenSpaceReflectionConstants.m_AngleAttenuation * r0.z;
  r0.z = exp2(r0.z);
  r0.w = saturate(-r3.x * 4 + 4);
  r1.x = max(0.00100000005, r2.w);
  o0.xyz = r2.xyz / r1.xxx;
  r0.x = saturate(r0.x + r0.x);
  r0.x = r0.y * r0.x;
  r0.x = r0.x * r2.w;
  r0.x = r0.x * r0.z;
  r0.x = r0.x * r0.w;
  o0.w = r0.x * r3.y;
  return;
}