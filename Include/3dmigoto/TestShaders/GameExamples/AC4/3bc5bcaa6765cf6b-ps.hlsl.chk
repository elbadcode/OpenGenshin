// ---- Created with 3Dmigoto v1.3.14 on Sat Feb 23 16:39:14 2019

cbuffer _Globals : register(b0)
{
  float4 g_AmbientCube[3] : packoffset(c0);
  float4 g_LayeredSkyUserColor : packoffset(c3);
  float4 g_LayeredSkyUserColor3 : packoffset(c4);
  float4 g_LayeredSkyUserColor4 : packoffset(c5);
  float4 g_CurrentTime : packoffset(c6);
  float4 g_HorizonTextureBlend : packoffset(c7);
  float4 g_SunColor : packoffset(c8);
  float4 g_SunDirection : packoffset(c9);
  float4 g_WorldLoadingRange : packoffset(c10);
  float4 g_GlobalWindPS : packoffset(c11);
  float4 g_SkySpritePosition : packoffset(c12);
  float4 g_VPOSReverseParams : packoffset(c13);
  float4 RainUVScroll : packoffset(c15);
  float4 g_RenderingReflections : packoffset(c17);
  float4 g_ViewportScaleOffset : packoffset(c18);
  float4 g_VPosToUV : packoffset(c19);
  float4 g_ReverseProjectionParams : packoffset(c20);
  float2 g_ReverseProjectionParams2 : packoffset(c21);
  float4x4 g_ViewToWorld : packoffset(c22);
  float4x4 g_WorldToView : packoffset(c26);
  float4 g_WorldEntityPosition : packoffset(c30);
  float4 g_EntityRandomSeed : packoffset(c31);
  float4 g_BoundingVolumeSize : packoffset(c32);
  float4 g_EntityToCameraDistance : packoffset(c33);
  float4 g_LODBlendFactor : packoffset(c34);
  float4 g_WeatherInfo : packoffset(c35);
  float4 g_FogWeatherParams : packoffset(c36);
  float4 g_FogParams : packoffset(c37);
  float4 g_MainPlayerPosition : packoffset(c38);
  float4 g_EyeDirection : packoffset(c39);
  float4 g_EyePosition : packoffset(c40);
  float4 g_DisolveFactor : packoffset(c41);
  float4 g_LightShaftColor : packoffset(c42);
  float4 g_LightShaftFade : packoffset(c43);
  float4 g_LightShaftFade2 : packoffset(c44);
  float4 g_EagleVisionColor : packoffset(c45);
  float4 g_FogColor : packoffset(c60);
  float4 g_FogSunBackColor : packoffset(c61);
  float g_AlphaTestValue : packoffset(c62);
  float4 g_NormalScale : packoffset(c63);

  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
  } g_OmniLights[4] : packoffset(c64);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
  } g_DirectLights[2] : packoffset(c72);


  struct
  {
    float4 m_PositionFar;
    float4 m_ColorFade;
    float4 m_Direction;
    float4 m_ConeAngles;
  } g_SpotLights[2] : packoffset(c76);


  struct
  {
    float3 m_Direction;
    float4 m_Color;
    float3 m_SpecularDirection;
  } g_ShadowedDirect : packoffset(c84);

  float4 g_ProjWorldToLight[8] : packoffset(c87);
  float4 g_LightingIrradianceCoeffsR : packoffset(c95);
  float4 g_LightingIrradianceCoeffsG : packoffset(c96);
  float4 g_LightingIrradianceCoeffsB : packoffset(c97);
  float4 g_ProjShadowParams[2] : packoffset(c98);
  float4 g_EntityUniqueIDCol : packoffset(c120);
  float4 g_MaterialUniqueIDCol : packoffset(c121);
  float4 g_ShaderUniqueIDCol : packoffset(c122);
  float4 g_SelectionOverlayCol : packoffset(c123);
  float4 g_ConstDebugReferencePS : packoffset(c124);
  float4 g_PickingID : packoffset(c125);
  float4 g_PixelPosToUV : packoffset(c128);
  float4 g_ScreenResolution : packoffset(c129);
  float4 g_SSAOControl : packoffset(c130);
}

SamplerState linearSamp_s_s : register(s1);
Texture2D<float> CS_Z_buffer : register(t0);
Texture2D<float4> Normals : register(t1);
Texture2D<float4> reproject : register(t3);
Texture2D<float2> motion : register(t4);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r1.x = CS_Z_buffer.Load(r0.xyw).x;
  r1.yz = trunc(v0.xy);
  r2.xy = r1.yz * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r2.xy = r2.xy * r1.xx;
  r1.w = saturate(-0.0111109996 * r1.x);
  r2.w = 256 * r1.w;
  r2.w = floor(r2.w);
  r3.y = 0.00390599994 * r2.w;
  r3.z = r1.w * 256 + -r2.w;
  r2.w = cmp(r1.x < -90);
  r3.x = cmp(-0.400000006 < r1.x);
  r2.w = (int)r2.w | (int)r3.x;
  r3.xw = cmp((int2)r0.xy < int2(16,16));
  r3.x = (int)r3.w | (int)r3.x;
  r2.w = (int)r2.w | (int)r3.x;
  r3.xw = g_ScreenResolution.xy + float2(-16,-16);
  r1.yz = cmp(r1.yz >= r3.xw);
  r1.y = (int)r1.z | (int)r1.y;
  r1.y = (int)r1.y | (int)r2.w;
  r1.z = 3 * (int)r0.x;
  r2.w = mad((int)r0.x, (int)r0.y, (int)r0.y);
  r1.z = (int)r1.z ^ (int)r2.w;
  r1.z = (int)r1.z * 10;
  r1.z = (int)r1.z;
  r1.z = g_SSAOControl.z + r1.z;
  r4.xyz = Normals.Load(r0.xyw).xyz;
  r4.xyz = float3(-0.5,-0.5,-0.5) + r4.xyz;
  r4.xyz = r4.xyz + r4.xyz;
  r5.x = dot(r4.xyz, g_WorldToView._m00_m10_m20);
  r5.y = dot(r4.xyz, g_WorldToView._m01_m11_m21);
  r5.z = dot(r4.xyz, g_WorldToView._m02_m12_m22);
  r2.w = dot(r5.xyz, r5.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = r5.xyz * r2.www;
  CS_Z_buffer.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
  r2.w = uiDest.y;
  r2.w = (uint)r2.w;
  r2.w = -0.93333298 * r2.w;
  r3.x = min(-0.100000001, r1.x);
  r2.w = r2.w / r3.x;
  r5.xyzw = float4(13.4163637,40.2490921,67.0818176,93.9145432) + r1.zzzz;
  sincos(r5.x, r3.x, r6.x);
  r7.xyzw = float4(0.0454550013,0.136363998,0.227273002,0.318181992) * r2.wwww;
  r8.xyzw = log2(r7.xyzw);
  r8.xyzw = floor(r8.xyzw);
  r8.xyzw = (int4)r8.xyzw;
  r8.xyzw = (int4)r8.xyzw + int4(-3,-3,-3,-3);
  r8.xyzw = max(int4(0,0,0,0), (int4)r8.xyzw);
  r8.xyzw = min(int4(5,5,5,5), (int4)r8.xyzw);
  r6.y = r3.x;
  r3.xw = r7.xx * r6.xy;
  r3.xw = (int2)r3.xw;
  r3.xw = (int2)r3.xw + (int2)r0.xy;
  r6.xy = (uint2)r3.xw >> (int2)r8.xx;
  r6.zw = r8.xx;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r3.xw = (int2)r3.xw;
  r3.xw = r3.xw * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r3.xw * r6.zz;
  r2.z = r1.x;
  r6.xyz = r6.xyz + -r2.xyz;
  r3.x = dot(r6.xyz, r6.xyz);
  r3.w = dot(r6.xyz, r4.xyz);
  r4.w = 1.44000006 + -r3.x;
  r4.w = max(0, r4.w);
  r5.x = r4.w * r4.w;
  r4.w = r5.x * r4.w;
  r3.w = -0.0250000004 + r3.w;
  r3.x = 0.0199999996 + r3.x;
  r3.x = r3.w / r3.x;
  sincos(r5.y, r5.x, r6.x);
  r6.y = r5.x;
  r5.xy = r7.yy * r6.xy;
  r5.xy = (int2)r5.xy;
  r5.xy = (int2)r5.xy + (int2)r0.xy;
  r6.xy = (uint2)r5.xy >> (int2)r8.yy;
  r6.zw = r8.yy;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xy = (int2)r5.xy;
  r5.xy = r5.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xy * r6.zz;
  r6.xyz = r6.xyz + -r2.xyz;
  r3.w = dot(r6.xyz, r6.xyz);
  r5.x = dot(r6.xyz, r4.xyz);
  r5.y = 1.44000006 + -r3.w;
  r5.y = max(0, r5.y);
  r6.x = r5.y * r5.y;
  r5.y = r6.x * r5.y;
  r5.x = -0.0250000004 + r5.x;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r5.x / r3.w;
  r3.xw = max(float2(0,0), r3.xw);
  r3.w = r5.y * r3.w;
  r3.x = r4.w * r3.x + r3.w;
  sincos(r5.z, r5.x, r6.x);
  r6.y = r5.x;
  r5.xy = r7.zz * r6.xy;
  r5.xy = (int2)r5.xy;
  r5.xy = (int2)r5.xy + (int2)r0.xy;
  r6.xy = (uint2)r5.xy >> (int2)r8.zz;
  r6.zw = r8.zz;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xy = (int2)r5.xy;
  r5.xy = r5.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xy * r6.zz;
  r5.xyz = r6.xyz + -r2.xyz;
  r3.w = dot(r5.xyz, r5.xyz);
  r4.w = dot(r5.xyz, r4.xyz);
  r5.x = 1.44000006 + -r3.w;
  r5.x = max(0, r5.x);
  r5.y = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r4.w = -0.0250000004 + r4.w;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r4.w / r3.w;
  r3.w = max(0, r3.w);
  r3.x = r5.x * r3.w + r3.x;
  sincos(r5.w, r5.x, r6.x);
  r6.y = r5.x;
  r5.xy = r7.ww * r6.xy;
  r5.xy = (int2)r5.xy;
  r5.xy = (int2)r5.xy + (int2)r0.xy;
  r6.xy = (uint2)r5.xy >> (int2)r8.ww;
  r6.zw = r8.ww;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xy = (int2)r5.xy;
  r5.xy = r5.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xy * r6.zz;
  r5.xyz = r6.xyz + -r2.xyz;
  r3.w = dot(r5.xyz, r5.xyz);
  r4.w = dot(r5.xyz, r4.xyz);
  r5.x = 1.44000006 + -r3.w;
  r5.x = max(0, r5.x);
  r5.y = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r4.w = -0.0250000004 + r4.w;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r4.w / r3.w;
  r3.w = max(0, r3.w);
  r3.x = r5.x * r3.w + r3.x;
  r5.xyzw = float4(120.747276,147.580002,174.41272,201.245453) + r1.zzzz;
  sincos(r5.x, r5.x, r6.x);
  r7.xyzw = float4(0.409090996,0.5,0.590909004,0.681818008) * r2.wwww;
  r8.xyzw = log2(r7.xyzw);
  r8.xyzw = floor(r8.xyzw);
  r8.xyzw = (int4)r8.xyzw;
  r8.xyzw = (int4)r8.xyzw + int4(-3,-3,-3,-3);
  r8.xyzw = max(int4(0,0,0,0), (int4)r8.xyzw);
  r8.xyzw = min(int4(5,5,5,5), (int4)r8.xyzw);
  r6.y = r5.x;
  r6.xy = r7.xx * r6.xy;
  r6.xy = (int2)r6.xy;
  r6.xy = (int2)r6.xy + (int2)r0.xy;
  r9.xy = (uint2)r6.xy >> (int2)r8.xx;
  r9.zw = r8.xx;
  r9.z = CS_Z_buffer.Load(r9.xyz).x;
  r6.xy = (int2)r6.xy;
  r6.xy = r6.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r9.xy = r6.xy * r9.zz;
  r6.xyz = r9.xyz + -r2.xyz;
  r3.w = dot(r6.xyz, r6.xyz);
  r4.w = dot(r6.xyz, r4.xyz);
  r5.x = 1.44000006 + -r3.w;
  r5.x = max(0, r5.x);
  r6.x = r5.x * r5.x;
  r5.x = r6.x * r5.x;
  r4.w = -0.0250000004 + r4.w;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r4.w / r3.w;
  r3.w = max(0, r3.w);
  r3.x = r5.x * r3.w + r3.x;
  sincos(r5.y, r5.x, r6.x);
  r6.y = r5.x;
  r5.xy = r7.yy * r6.xy;
  r5.xy = (int2)r5.xy;
  r5.xy = (int2)r5.xy + (int2)r0.xy;
  r6.xy = (uint2)r5.xy >> (int2)r8.yy;
  r6.zw = r8.yy;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xy = (int2)r5.xy;
  r5.xy = r5.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xy * r6.zz;
  r6.xyz = r6.xyz + -r2.xyz;
  r3.w = dot(r6.xyz, r6.xyz);
  r4.w = dot(r6.xyz, r4.xyz);
  r5.x = 1.44000006 + -r3.w;
  r5.x = max(0, r5.x);
  r5.y = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r4.w = -0.0250000004 + r4.w;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r4.w / r3.w;
  r3.w = max(0, r3.w);
  r3.x = r5.x * r3.w + r3.x;
  sincos(r5.z, r5.x, r6.x);
  r6.y = r5.x;
  r5.xy = r7.zz * r6.xy;
  r5.xy = (int2)r5.xy;
  r5.xy = (int2)r5.xy + (int2)r0.xy;
  r6.xy = (uint2)r5.xy >> (int2)r8.zz;
  r6.zw = r8.zz;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xy = (int2)r5.xy;
  r5.xy = r5.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xy * r6.zz;
  r5.xyz = r6.xyz + -r2.xyz;
  r3.w = dot(r5.xyz, r5.xyz);
  r4.w = dot(r5.xyz, r4.xyz);
  r5.x = 1.44000006 + -r3.w;
  r5.x = max(0, r5.x);
  r5.y = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r4.w = -0.0250000004 + r4.w;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r4.w / r3.w;
  r3.w = max(0, r3.w);
  r3.x = r5.x * r3.w + r3.x;
  sincos(r5.w, r5.x, r6.x);
  r6.y = r5.x;
  r5.xy = r7.ww * r6.xy;
  r5.xy = (int2)r5.xy;
  r5.xy = (int2)r5.xy + (int2)r0.xy;
  r6.xy = (uint2)r5.xy >> (int2)r8.ww;
  r6.zw = r8.ww;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xy = (int2)r5.xy;
  r5.xy = r5.xy * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xy * r6.zz;
  r5.xyz = r6.xyz + -r2.xyz;
  r3.w = dot(r5.xyz, r5.xyz);
  r4.w = dot(r5.xyz, r4.xyz);
  r5.x = 1.44000006 + -r3.w;
  r5.x = max(0, r5.x);
  r5.y = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r4.w = -0.0250000004 + r4.w;
  r3.w = 0.0199999996 + r3.w;
  r3.w = r4.w / r3.w;
  r3.w = max(0, r3.w);
  r3.x = r5.x * r3.w + r3.x;
  r5.xyz = float3(228.078186,254.910904,281.743622) + r1.zzz;
  sincos(r5.x, r5.x, r6.x);
  r7.xyz = float3(0.772727013,0.863636017,0.954545021) * r2.www;
  r8.xyz = log2(r7.xyz);
  r8.xyz = floor(r8.xyz);
  r8.xyz = (int3)r8.xyz;
  r8.xyz = (int3)r8.xyz + int3(-3,-3,-3);
  r8.xyz = max(int3(0,0,0), (int3)r8.xyz);
  r8.xyz = min(int3(5,5,5), (int3)r8.xyz);
  r6.y = r5.x;
  r5.xw = r7.xx * r6.xy;
  r5.xw = (int2)r5.xw;
  r5.xw = (int2)r5.xw + (int2)r0.xy;
  r6.xy = (uint2)r5.xw >> (int2)r8.xx;
  r6.zw = r8.xx;
  r6.z = CS_Z_buffer.Load(r6.xyz).x;
  r5.xw = (int2)r5.xw;
  r5.xw = r5.xw * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r6.xy = r5.xw * r6.zz;
  r6.xyz = r6.xyz + -r2.xyz;
  r1.z = dot(r6.xyz, r6.xyz);
  r2.w = dot(r6.xyz, r4.xyz);
  r3.w = 1.44000006 + -r1.z;
  r3.w = max(0, r3.w);
  r4.w = r3.w * r3.w;
  r3.w = r4.w * r3.w;
  r2.w = -0.0250000004 + r2.w;
  r1.z = 0.0199999996 + r1.z;
  r1.z = r2.w / r1.z;
  r1.z = max(0, r1.z);
  r1.z = r3.w * r1.z + r3.x;
  sincos(r5.y, r3.x, r5.x);
  r5.y = r3.x;
  r3.xw = r7.yy * r5.xy;
  r3.xw = (int2)r3.xw;
  r3.xw = (int2)r3.xw + (int2)r0.xy;
  r6.xy = (uint2)r3.xw >> (int2)r8.yy;
  r6.zw = r8.yy;
  r5.w = CS_Z_buffer.Load(r6.xyz).x;
  r3.xw = (int2)r3.xw;
  r3.xw = r3.xw * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r5.xy = r3.xw * r5.ww;
  r5.xyw = r5.xyw + -r2.xyz;
  r2.w = dot(r5.xyw, r5.xyw);
  r3.x = dot(r5.xyw, r4.xyz);
  r3.w = 1.44000006 + -r2.w;
  r3.w = max(0, r3.w);
  r4.w = r3.w * r3.w;
  r3.w = r4.w * r3.w;
  r3.x = -0.0250000004 + r3.x;
  r2.w = 0.0199999996 + r2.w;
  r2.w = r3.x / r2.w;
  r2.w = max(0, r2.w);
  r1.z = r3.w * r2.w + r1.z;
  sincos(r5.z, r3.x, r5.x);
  r5.y = r3.x;
  r3.xw = r7.zz * r5.xy;
  r3.xw = (int2)r3.xw;
  r3.xw = (int2)r3.xw + (int2)r0.xy;
  r5.xy = (uint2)r3.xw >> (int2)r8.zz;
  r5.zw = r8.zz;
  r5.z = CS_Z_buffer.Load(r5.xyz).x;
  r3.xw = (int2)r3.xw;
  r3.xw = r3.xw * g_PixelPosToUV.xy + g_PixelPosToUV.zw;
  r5.xy = r3.xw * r5.zz;
  r2.xyz = r5.xyz + -r2.xyz;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.x = dot(r2.xyz, r4.xyz);
  r2.y = 1.44000006 + -r2.w;
  r2.y = max(0, r2.y);
  r2.z = r2.y * r2.y;
  r2.y = r2.z * r2.y;
  r2.x = -0.0250000004 + r2.x;
  r2.z = 0.0199999996 + r2.w;
  r2.x = r2.x / r2.z;
  r2.x = max(0, r2.x);
  r1.z = r2.y * r2.x + r1.z;
  r1.z = -r1.z * 0.0608909987 + 1;
  r1.z = max(0, r1.z);
  r2.x = ddx_coarse(r1.x);
  r2.x = cmp(abs(r2.x) < 0.100000001);
  r2.y = ddx_fine(r1.z);
  r2.z = (int)r0.x & 1;
  r2.z = (int)r2.z;
  r2.z = -0.5 + r2.z;
  r2.y = -r2.y * r2.z + r1.z;
  r1.z = r2.x ? r2.y : r1.z;
  r2.x = ddy_coarse(r1.x);
  r2.y = ddy_fine(r1.z);
  if (r1.y != 0) {
    o0.xw = float2(1,1);
    o0.yz = r3.yz;
    return;
  }
  r0.xz = motion.Load(r0.xyz).xy;
  r0.xz = float2(-0.497999996,-0.497999996) + r0.xz;
  r0.xz = r0.xz * float2(-0.125,0.125) + v1.xy;
  r0.xzw = reproject.SampleLevel(linearSamp_s_s, r0.xz, 0).xyz;
  r0.z = dot(r0.zw, float2(0.996109009,0.00389100006));
  r0.w = cmp(abs(r2.x) < 0.100000001);
  r0.y = (int)r0.y & 1;
  r0.y = (int)r0.y;
  r0.y = -0.5 + r0.y;
  r0.y = -r2.y * r0.y + r1.z;
  r0.y = r0.w ? r0.y : r1.z;
  r0.w = saturate(r1.x * -0.5 + -0.100000001);
  r0.y = -1 + r0.y;
  r0.y = r0.w * r0.y + 1;
  r0.z = r1.w + -r0.z;
  r0.z = -abs(r0.z) * 200 + 1;
  r0.z = max(0, r0.z);
  r0.z = 0.600000024 * r0.z;
  r0.x = r0.x + -r0.y;
  o0.x = r0.z * r0.x + r0.y;
  o0.yz = r3.yz;
  o0.w = 1;
  return;
}