// Manually fixed shader.
// key instructions are the same after recompile with fxc.

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

// Used as a SampleCmpLevelZero, so needs to be comparison type
SamplerComparisonState  s1 : register(s1);

SamplerState s0 : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[25];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}


Texture2D<float4> StereoParams : register(t125);

void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xyzw = t0.Sample(s0, v1.xy).xyzw; //------------------------warning (fixed)
  r0.x = cb0[7].x * r0.x + cb0[7].y;
  r0.x = 1.000000e+000 / r0.x;
  r0.yzw = v2.xyz * r0.xxx;
  r0.x = 1.000000000e+000 + -r0.x;
  r1.xy = float2(1.000000e+000,2.550000e+002) * r0.xx;
  r1.xy = frac(r1.xy);
  r2.xyzw = cb2[1].xyzw * r0.zzzz;
  r2.xyzw = cb2[0].xyzw * r0.yyyy + r2.xyzw;
  r0.xyzw = cb2[2].xyzw * r0.wwww + r2.xyzw;
  r0.xyzw = cb2[3].xyzw + r0.xyzw;
  r2.xyz = -cb1[0].xyz + r0.xyz;
  r2.x = dot(r2.xyz, r2.xyz);
  r3.xyz = -cb1[1].xyz + r0.xyz;
  r2.y = dot(r3.xyz, r3.xyz);
  r3.xyz = -cb1[2].xyz + r0.xyz;
  r2.z = dot(r3.xyz, r3.xyz);
  r3.xyz = -cb1[3].xyz + r0.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.x = r2.x < cb1[4].x;
  r2.y = r2.y < cb1[4].y;
  r2.z = r2.z < cb1[4].z;
  r2.w = r2.w < cb1[4].w;
  r3.xyz = r2.xyz ? float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) : float3(-0.000000e+000,-0.000000e+000,-0.000000e+000);
  r2.x = r2.x ? 1 : 0;
  r2.y = r2.y ? 1 : 0;
  r2.z = r2.z ? 1 : 0;
  r2.w = r2.w ? 1 : 0;
  r2.yzw = r2.yzw + r3.xyz;
  r2.yzw = max(r2.yzw, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r3.xyz = cb1[13].xyz * r0.yyy;
  r3.xyz = cb1[12].xyz * r0.xxx + r3.xyz;
  r3.xyz = cb1[14].xyz * r0.zzz + r3.xyz;
  r3.xyz = cb1[15].xyz * r0.www + r3.xyz;
  r3.xyz = r3.xyz * r2.yyy;
  r4.xyz = cb1[9].xyz * r0.yyy;
  r4.xyz = cb1[8].xyz * r0.xxx + r4.xyz;
  r4.xyz = cb1[10].xyz * r0.zzz + r4.xyz;
  r4.xyz = cb1[11].xyz * r0.www + r4.xyz;
  r3.xyz = r4.xyz * r2.xxx + r3.xyz;
  r4.xyz = cb1[17].xyz * r0.yyy;
  r4.xyz = cb1[16].xyz * r0.xxx + r4.xyz;
  r4.xyz = cb1[18].xyz * r0.zzz + r4.xyz;
  r4.xyz = cb1[19].xyz * r0.www + r4.xyz;
  r2.xyz = r4.xyz * r2.zzz + r3.xyz;
  r3.xyz = cb1[21].xyz * r0.yyy;
  r3.xyz = cb1[20].xyz * r0.xxx + r3.xyz;
  r0.xyz = cb1[22].xyz * r0.zzz + r3.xyz;
  r0.xyz = cb1[23].xyz * r0.www + r0.xyz;
  r0.xyz = r0.xyz * r2.www + r2.xyz;

  // sample_c_lz r0.x, r0.xyxx, t1.xxxx, s1, r0.z
  r0.x = t1.SampleCmpLevelZero(s1, r0.xy, r0.z).x; //------------------------ERROR (fixed)
  
  r0.y = 1.000000000e+000 + -cb1[24].x;
  o0.x = r0.x * r0.y + cb1[24].x;
  o0.z = -r1.y * 3.921568859e-003 + r1.x;
  o0.w = r1.y;
  o0.y = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[25], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 5
sample r0.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.x, cb0[7].x, r0.x, cb0[7].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.yzw, r0.xxxx, v2.xxyz
add r0.x, -r0.x, l(1.000000)
mul r1.xy, r0.xxxx, l(1.000000, 255.000000, 0.000000, 0.000000)
frc r1.xy, r1.xyxx
mul r2.xyzw, r0.zzzz, cb2[1].xyzw
mad r2.xyzw, cb2[0].xyzw, r0.yyyy, r2.xyzw
mad r0.xyzw, cb2[2].xyzw, r0.wwww, r2.xyzw
add r0.xyzw, r0.xyzw, cb2[3].xyzw
add r2.xyz, r0.xyzx, -cb1[0].xyzx
dp3 r2.x, r2.xyzx, r2.xyzx
add r3.xyz, r0.xyzx, -cb1[1].xyzx
dp3 r2.y, r3.xyzx, r3.xyzx
add r3.xyz, r0.xyzx, -cb1[2].xyzx
dp3 r2.z, r3.xyzx, r3.xyzx
add r3.xyz, r0.xyzx, -cb1[3].xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
lt r2.xyzw, r2.xyzw, cb1[4].xyzw
movc r3.xyz, r2.xyzx, l(-1.000000,-1.000000,-1.000000,0), l(-0.000000,-0.000000,-0.000000,0)
and r2.xyzw, r2.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
add r2.yzw, r3.xxyz, r2.yyzw
max r2.yzw, r2.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r3.xyz, r0.yyyy, cb1[13].xyzx
mad r3.xyz, cb1[12].xyzx, r0.xxxx, r3.xyzx
mad r3.xyz, cb1[14].xyzx, r0.zzzz, r3.xyzx
mad r3.xyz, cb1[15].xyzx, r0.wwww, r3.xyzx
mul r3.xyz, r2.yyyy, r3.xyzx
mul r4.xyz, r0.yyyy, cb1[9].xyzx
mad r4.xyz, cb1[8].xyzx, r0.xxxx, r4.xyzx
mad r4.xyz, cb1[10].xyzx, r0.zzzz, r4.xyzx
mad r4.xyz, cb1[11].xyzx, r0.wwww, r4.xyzx
mad r3.xyz, r4.xyzx, r2.xxxx, r3.xyzx
mul r4.xyz, r0.yyyy, cb1[17].xyzx
mad r4.xyz, cb1[16].xyzx, r0.xxxx, r4.xyzx
mad r4.xyz, cb1[18].xyzx, r0.zzzz, r4.xyzx
mad r4.xyz, cb1[19].xyzx, r0.wwww, r4.xyzx
mad r2.xyz, r4.xyzx, r2.zzzz, r3.xyzx
mul r3.xyz, r0.yyyy, cb1[21].xyzx
mad r3.xyz, cb1[20].xyzx, r0.xxxx, r3.xyzx
mad r0.xyz, cb1[22].xyzx, r0.zzzz, r3.xyzx
mad r0.xyz, cb1[23].xyzx, r0.wwww, r0.xyzx
mad r0.xyz, r0.xyzx, r2.wwww, r2.xyzx
sample_c_lz r0.x, r0.xyxx, t1.xxxx, s1, r0.z
add r0.y, -cb1[24].x, l(1.000000)
mad o0.x, r0.x, r0.y, cb1[24].x
mad o0.z, -r1.y, l(0.003922), r1.x
mov o0.w, r1.y
mov o0.y, l(1.000000)
ret 
// Approximately 0 instruction slots used
*/