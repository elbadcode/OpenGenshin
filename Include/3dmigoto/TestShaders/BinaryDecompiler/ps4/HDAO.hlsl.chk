// ---- Created with 3Dmigoto v1.3.16 on Thu Aug 31 06:04:57 2023

cbuffer _Params : register(b0)
{
  bool b10_1 : packoffset(c0);
  int iNumRingGathers : packoffset(c0.y);
  int iNumRings : packoffset(c0.z);
  bool bUseNormals : packoffset(c0.w);
}

cbuffer cb0 : register(b1)
{
  float3 g_f3LightDir : packoffset(c0);
  float3 g_f3EyePt : packoffset(c1);
  float g_fTime : packoffset(c1.w);
  float4x4 g_f4x4World : packoffset(c2);
  float4x4 g_f4x4View : packoffset(c6);
  float4x4 g_f4x4WorldViewProjection : packoffset(c10);
  float4x4 g_f4x4InvProjection : packoffset(c14);
  float2 g_f2RTSize : packoffset(c18);
  float g_fHDAORejectRadius : packoffset(c18.z);
  float g_fHDAOIntensity : packoffset(c18.w);
  float g_fHDAOAcceptRadius : packoffset(c19);
  float g_fZFar : packoffset(c19.y);
  float g_fZNear : packoffset(c19.z);
  float g_fQ : packoffset(c19.w);
  float g_fQTimesZNear : packoffset(c20);
  float g_fNormalScale : packoffset(c20.y);
  float g_fAcceptAngle : packoffset(c20.z);
  float4 g_f4MaterialDiffuse : packoffset(c21);
  float4 g_f4MaterialSpecular : packoffset(c22);
  float g_fTanH : packoffset(c23);
  float g_fTanV : packoffset(c23.y);
}

SamplerState g_SamplePoint_s : register(s0);
Texture2D<float4> g_txNormals : register(t0);
Texture2D<float4> g_txNormalsZ : register(t1);
Texture2D<float4> g_txNormalsXY : register(t2);
Texture2D<float4> g_txDepth : register(t3);


// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXTURE0,
  out float o0 : SV_Target0)
{
  const float4 icb[] = { { 1, 8, 1.000000, -1.000000},
                              { 8, -1, 0, 1.000000},
                              { 5, 4, 0, 3.000000},
                              { 4, -4, 2.000000, 1.000000},
                              { 5.308640, 0, 3.000000, -1.000000},
                              { 11.396100, 0, 1.000000, -3.000000},
                              { 17.926769, 0, 1.000000, -5.000000},
                              { 24.936390, 0, 3.000000, -3.000000},
                              { 0, 0, 5.000000, -1.000000},
                              { 0, 0, 4.000000, 1.000000},
                              { 0, 0, 2.000000, 3.000000},
                              { 0, 0, 0, 5.000000},
                              { 0, 0, 0, 7.000000},
                              { 0, 0, 2.000000, 5.000000},
                              { 0, 0, 4.000000, 3.000000},
                              { 0, 0, 6.000000, 1.000000},
                              { 0, 0, 7.000000, -1.000000},
                              { 0, 0, 5.000000, -3.000000},
                              { 0, 0, 3.000000, -5.000000},
                              { 0, 0, 1.000000, -7.000000},
                              { 1.000000, 0.500000, 0.447210, 0.707110},
                              { 0.500000, 0.447210, 0.707110, 1.000000},
                              { 0.300000, 0.291040, 0.379470, 0.400000},
                              { 0.424260, 0.332820, 0.379470, 0.536660},
                              { 0.400000, 0.300000, 0.291040, 0.379470},
                              { 0.536660, 0.424260, 0.332820, 0.379470},
                              { 0.315300, 0.290690, 0.241400, 0.254950},
                              { 0.360560, 0.290690, 0.260000, 0.306410},
                              { 0.260000, 0.216670, 0.213720, 0.254950},
                              { 0.290690, 0.241400, 0.254950, 0.315300},
                              { 0.290690, 0.260000, 0.306410, 0.360560},
                              { 0.216670, 0.213720, 0.254950, 0.260000},
                              { 0.175000, 0.173650, 0.197990, 0.200000},
                              { 0.221360, 0.208700, 0.240100, 0.259970},
                              { 0.247490, 0.218640, 0.240100, 0.280000},
                              { 0.221360, 0.192300, 0.197990, 0.230160},
                              { 0.200000, 0.175000, 0.173650, 0.197990},
                              { 0.259970, 0.221360, 0.208700, 0.240100},
                              { 0.280000, 0.247490, 0.218640, 0.240100},
                              { 0.230160, 0.221360, 0.192300, 0.197990} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = g_f2RTSize.xy * v1.xy;
  r0.zw = (int2)r0.xy;
  r1.xy = float2(-1,-1) + g_f2RTSize.xy;
  r2.zw = float2(0,0);
  r3.zw = float2(0,0);
  r1.zw = float2(0,0);
  while (true) {
    r4.x = cmp((int)r1.w >= 4);
    if (r4.x != 0) break;
    r4.xy = (int2)-icb[r1.w+0].xy + (int2)r0.zw;
    r4.zw = (int2)r0.zw + (int2)icb[r1.w+0].xy;
    r4.xy = int2(-1,-1) + (int2)r4.xy;
    r4.xyzw = (int4)r4.xyzw;
    r4.xyzw = min(r4.xyzw, r1.xyxy);
    r4.xyzw = (int4)r4.xyzw;
    r2.xy = max(int2(0,0), (int2)r4.zw);
    r3.xy = max(int2(0,0), (int2)r4.xy);
    if (b10_1 != 0) {
      r4.z = g_txNormalsZ.Load(r2.xyz).x;
      r5.z = g_txNormalsZ.Load(r3.xyz).x;
      r4.xy = g_txNormalsXY.Load(r2.xyz).xy;
      r5.xy = g_txNormalsXY.Load(r3.xyz).xy;
    } else {
      r4.xyz = g_txNormals.Load(r2.xyw).yzx;
      r5.xyz = g_txNormals.Load(r3.xyw).yzx;
    }
    r2.x = dot(r4.xyz, r5.xyz);
    r2.y = cmp(g_fAcceptAngle < r2.x);
    r2.x = -abs(r2.x) * 0.25 + 1;
    r2.x = r2.y ? 0 : r2.x;
    r1.z = r2.x + r1.z;
    r1.w = (int)r1.w + 1;
  }
  r0.z = r1.z * 0.25 + 0.5;
  r0.w = cmp(0.5 < r0.z);
  if (r0.w != 0) {
    r1.xy = float2(0.0009765625,0.00130208337) * g_f2RTSize.xy;
    r1.zw = float2(1,1) / g_f2RTSize.xy;
    r2.xy = trunc(r0.xy);
    r2.zw = r2.xy * r1.zw;
    r3.xy = r1.zw * r0.xy;
    r2.zw = b10_1 ? r2.zw : r3.xy;
    r0.w = g_txDepth.SampleLevel(g_SamplePoint_s, r2.zw, 0).x;
    r0.w = -g_fQ + r0.w;
    r0.w = -g_fQTimesZNear / r0.w;
    if (bUseNormals != 0) {
      if (b10_1 != 0) {
        r3.x = g_txNormalsZ.SampleLevel(g_SamplePoint_s, r2.zw, 0).x;
      } else {
        r3.x = g_txNormals.SampleLevel(g_SamplePoint_s, r2.zw, 0).x;
      }
      r2.z = r3.x * g_fNormalScale + r0.w;
    }
    r3.xyzw = float4(0,0,0,0);
    r4.xyzw = float4(0,0,0,0);
    r2.w = 0;
    while (true) {
      r5.x = cmp((int)r2.w >= iNumRingGathers);
      if (r5.x != 0) break;
      r5.xy = r1.xy * icb[r2.w+0].zw + float2(1,1);
      r5.zw = r1.xy * icb[r2.w+0].zw + r0.xy;
      r5.zw = r5.zw * r1.zw;
      r6.xy = v1.xy * g_f2RTSize.xy + -r5.xy;
      r6.xy = r6.xy * r1.zw;
      if (b10_1 != 0) {
        r6.zw = r5.xy + r2.xy;
        r3.xy = r6.zw * r1.zw;
        r5.xy = -r5.xy + r2.xy;
        r5.xy = float2(1,1) + r5.xy;
        r3.zw = r5.xy * r1.zw;
        r7.xyzw = g_txDepth.Gather(g_SamplePoint_s, r3.xy).xyzw;
        r7.xyzw = -g_fQ + r7.xyzw;
        r7.xyzw = -g_fQTimesZNear / r7.xyzw;
        r8.xyzw = g_txDepth.Gather(g_SamplePoint_s, r3.zw).xyzw;
        r8.xyzw = -g_fQ + r8.xyzw;
        r8.xyzw = -g_fQTimesZNear / r8.xyzw;
      } else {
        r9.x = g_txDepth.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
        r9.y = g_txDepth.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
        r9.z = g_txDepth.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
        r9.w = g_txDepth.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
        r9.xyzw = -g_fQ + r9.xyzw;
        r7.xyzw = -g_fQTimesZNear / r9.xyzw;
        r9.x = g_txDepth.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
        r9.y = g_txDepth.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
        r9.z = g_txDepth.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
        r9.w = g_txDepth.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
        r9.xyzw = -g_fQ + r9.xyzw;
        r8.xyzw = -g_fQTimesZNear / r9.xyzw;
      }
      r9.xyzw = -r7.xyzw + r0.wwww;
      r10.xyzw = cmp(r9.xyzw < g_fHDAORejectRadius);
      r10.xyzw = r10.xyzw ? float4(1,1,1,1) : 0;
      r9.xyzw = cmp(g_fHDAOAcceptRadius < r9.xyzw);
      r9.xyzw = r9.xyzw ? float4(1,1,1,1) : 0;
      r9.xyzw = r10.xyzw * r9.xyzw;
      r10.xyzw = -r8.zwxy + r0.wwww;
      r11.xyzw = cmp(r10.xyzw < g_fHDAORejectRadius);
      r11.xyzw = r11.xyzw ? float4(1,1,1,1) : 0;
      r10.xyzw = cmp(g_fHDAOAcceptRadius < r10.xyzw);
      r10.xyzw = r10.xyzw ? float4(1,1,1,1) : 0;
      r10.xyzw = r11.xyzw * r10.xyzw;
      r9.xyzw = r10.xyzw * r9.xyzw;
      r9.xyzw = icb[r2.w+20].xyzw * r9.xyzw;
      r4.xyzw = r9.xyzw * r0.zzzz + r4.xyzw;
      if (bUseNormals != 0) {
        if (b10_1 != 0) {
          r9.xyzw = g_txNormalsZ.Gather(g_SamplePoint_s, r3.xy).xyzw;
          r10.xyzw = g_txNormalsZ.Gather(g_SamplePoint_s, r3.zw).xyzw;
        } else {
          r9.x = g_txNormals.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
          r9.y = g_txNormals.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
          r9.z = g_txNormals.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
          r9.w = g_txNormals.SampleLevel(g_SamplePoint_s, r5.zw, 0, int2(0, 0)).x;
          r10.x = g_txNormals.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
          r10.y = g_txNormals.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
          r10.z = g_txNormals.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
          r10.w = g_txNormals.SampleLevel(g_SamplePoint_s, r6.xy, 0, int2(0, 0)).x;
        }
        r5.xyzw = r9.xyzw * g_fNormalScale + r7.xyzw;
        r6.xyzw = r10.zwxy * g_fNormalScale + r8.zwxy;
        r5.xyzw = -r5.xyzw + r2.zzzz;
        r7.xyzw = cmp(r5.xyzw < g_fHDAORejectRadius);
        r7.xyzw = r7.xyzw ? float4(1,1,1,1) : 0;
        r5.xyzw = cmp(g_fHDAOAcceptRadius < r5.xyzw);
        r5.xyzw = r5.xyzw ? float4(1,1,1,1) : 0;
        r5.xyzw = r7.xyzw * r5.xyzw;
        r6.xyzw = -r6.xyzw + r2.zzzz;
        r7.xyzw = cmp(r6.xyzw < g_fHDAORejectRadius);
        r7.xyzw = r7.xyzw ? float4(1,1,1,1) : 0;
        r6.xyzw = cmp(g_fHDAOAcceptRadius < r6.xyzw);
        r6.xyzw = r6.xyzw ? float4(1,1,1,1) : 0;
        r6.xyzw = r7.xyzw * r6.xyzw;
        r5.xyzw = r6.xyzw * r5.xyzw;
        r5.xyzw = icb[r2.w+20].xyzw * r5.xyzw;
        r4.xyzw = r5.xyzw * r0.zzzz + r4.xyzw;
      }
      r2.w = (int)r2.w + 1;
    }
  } else {
    r4.xyzw = float4(0,0,0,0);
  }
  if (bUseNormals != 0) {
    r0.x = r4.x + r4.y;
    r0.x = r0.x + r4.z;
    r0.x = r0.x + r4.w;
    r0.y = iNumRings + -1;
    r0.y = icb[r0.y+4].x * 3;
    r0.x = r0.x / r0.y;
  } else {
    r0.y = r4.x + r4.y;
    r0.y = r0.y + r4.z;
    r0.y = r0.y + r4.w;
    r0.z = iNumRings + -1;
    r0.z = icb[r0.z+4].x + icb[r0.z+4].x;
    r0.x = r0.y / r0.z;
  }
  r0.x = saturate(g_fHDAOIntensity * r0.x);
  o0.x = 1 + -r0.x;
  return;
}