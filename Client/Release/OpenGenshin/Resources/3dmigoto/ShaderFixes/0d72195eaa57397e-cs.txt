//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Apr 15 04:57:41 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[18], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_uav_typed_texture3d (float,float,float,float) u0
dcl_uav_typed_texture3d (float,float,float,float) u1
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.xyz
dcl_input vThreadIDInGroup.xy
dcl_input vThreadID.xyz
dcl_temps 4
dcl_tgsm_structured g0, 16, 162
dcl_tgsm_structured g1, 8, 162
dcl_thread_group 8, 8, 1
ult r0.x, vThreadIDInGroupFlattened.x, l(54)
if_nz r0.x
  imul null, r0.x, vThreadIDInGroupFlattened.x, l(3)
  ishl r0.yz, vThreadGroupID.xxyx, l(0, 3, 3, 0)
  udiv null, r1.xy, r0.xxxx, l(81, 9, 0, 0)
  udiv r0.w, null, r1.x, l(9)
  uge r1.x, vThreadIDInGroupFlattened.x, l(27)
  and r1.x, r1.x, cb0[17].z
  iadd r0.y, r0.y, r1.y
  iadd r0.z, r0.w, r0.z
  utof r1.yz, r0.yyzy
  div r2.yw, r1.zzzy, cb0[16].yyyx
  utof r0.y, vThreadGroupID.z
  div r0.y, r0.y, cb0[16].z
  add r2.z, r1.x, r0.y
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r2.wyzw, t0.xyzw, s0, l(0.000000)
  store_structured g0.xyzw, r0.x, l(0), r1.xyzw
  sample_l_indexable(texture3d)(float,float,float,float) r0.yz, r2.wyzw, t1.zxyw, s0, l(0.000000)
  store_structured g1.xy, r0.x, l(0), r0.yzyy
  imad r0.yz, vThreadIDInGroupFlattened.xxxx, l(0, 3, 3, 0), l(0, 1, 2, 0)
  add r2.x, r2.w, cb0[17].x
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r2.xyzx, t0.xyzw, s0, l(0.000000)
  store_structured g0.xyzw, r0.y, l(0), r1.xyzw
  sample_l_indexable(texture3d)(float,float,float,float) r1.xy, r2.xyzx, t1.xyzw, s0, l(0.000000)
  store_structured g1.xy, r0.y, l(0), r1.xyxx
  add r2.x, r2.x, cb0[17].x
  sample_l_indexable(texture3d)(float,float,float,float) r1.xyzw, r2.xyzx, t0.xyzw, s0, l(0.000000)
  store_structured g0.xyzw, r0.z, l(0), r1.xyzw
  sample_l_indexable(texture3d)(float,float,float,float) r0.yw, r2.xyzx, t1.zxwy, s0, l(0.000000)
  store_structured g1.xy, r0.z, l(0), r0.ywyy
endif
sync_g_t
imad r0.x, vThreadIDInGroup.y, l(9), vThreadIDInGroup.x
ld_structured r1.xyzw, r0.x, l(0), g0.xyzw
iadd r2.xyzw, r0.xxxx, l(1, 9, 10, 81)
ld_structured r3.xyzw, r2.x, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
ld_structured r3.xyzw, r2.y, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
ld_structured r3.xyzw, r2.z, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
ld_structured r3.xyzw, r2.w, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
iadd r0.yzw, r0.xxxx, l(0, 82, 90, 91)
ld_structured r3.xyzw, r0.y, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
ld_structured r3.xyzw, r0.z, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
ld_structured r3.xyzw, r0.w, l(0), g0.xyzw
add r1.xyzw, r1.xyzw, r3.xyzw
mul r1.xyzw, r1.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
ld_structured r3.xy, r0.x, l(0), g1.xyxx
ld_structured r3.zw, r2.x, l(0), g1.xxxy
add r3.xyzw, r3.zwzz, r3.xyxx
ld_structured r2.xy, r2.y, l(0), g1.xyxx
add r3.xyzw, r2.xyxx, r3.xyzw
ld_structured r2.xy, r2.z, l(0), g1.xyxx
add r3.xyzw, r2.xyxx, r3.xyzw
ld_structured r2.xy, r2.w, l(0), g1.xyxx
add r2.xyzw, r2.xyxx, r3.xyzw
ld_structured r0.xy, r0.y, l(0), g1.xyxx
add r2.xyzw, r0.xyxx, r2.xyzw
ld_structured r0.xy, r0.z, l(0), g1.xyxx
add r2.xyzw, r0.xyxx, r2.xyzw
ld_structured r0.xy, r0.w, l(0), g1.xyxx
add r0.xyzw, r0.xyxx, r2.xyzw
mul r0.xyzw, r0.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
store_uav_typed u0.xyzw, vThreadID.xyzz, r1.xyzw
store_uav_typed u1.xyzw, vThreadID.xyzz, r0.xyzw
ret
// Approximately 0 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v1.3.16 on Mon Apr 15 04:57:41 2024
// groupshared struct { float val[2]; } g1[162];
// groupshared struct { float val[4]; } g0[162];
// Texture3D<float4> t1 : register(t1);
//
// Texture3D<float4> t0 : register(t0);
//
// SamplerState s0_s : register(s0);
//
// cbuffer cb0 : register(b0)
// {
//   float4 cb0[18];
// }
//
//
//
//
// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);
//
//
// void main)
// {
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_texture3d (float,float,float,float) u0
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_uav_typed_texture3d (float,float,float,float) u1
//   float4 r0,r1,r2,r3;
//   uint4 bitmask, uiDest;
//   float4 fDest;
//
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_thread_group 8, 8, 1
//   r0.x = cmp((uint)vThreadIDInGroupFlattened.x < 54);
//   if (r0.x != 0) {
//     r0.x = (int)vThreadIDInGroupFlattened.x * 3;
//     r0.yz = (uint2)vThreadGroupID.xy << int2(3,3);
//     r1.xy = (uint2)r0.xx % int2(81,9);
//     uiDest.w = (uint)r1.x / 9;
//     r0.w = uiDest.w;
//     r1.x = cmp((uint)vThreadIDInGroupFlattened.x >= 27);
//     r1.x = r1.x ? cb0[17].z : 0;
//     r0.y = (int)r0.y + (int)r1.y;
//     r0.z = (int)r0.w + (int)r0.z;
//     r1.yz = (uint2)r0.yz;
//     r2.yw = r1.zy / cb0[16].yx;
//     r0.y = (uint)vThreadGroupID.z;
//     r0.y = r0.y / cb0[16].z;
//     r2.z = r0.y + r1.x;
//     r1.xyzw = t0.SampleLevel(s0_s, r2.wyz, 0).xyzw;
//     g0[r0.x].val[0/4] = r1.x;
//     g0[r0.x].val[0/4+1] = r1.y;
//     g0[r0.x].val[0/4+2] = r1.z;
//     g0[r0.x].val[0/4+3] = r1.w;
//     r0.yz = t1.SampleLevel(s0_s, r2.wyz, 0).xy;
//     g1[r0.x].val[0/4] = r0.y;
//     g1[r0.x].val[0/4+1] = r0.z;
//     r0.yz = mad((int2)vThreadIDInGroupFlattened.xx, int2(3,3), int2(1,2));
//     r2.x = cb0[17].x + r2.w;
//     r1.xyzw = t0.SampleLevel(s0_s, r2.xyz, 0).xyzw;
//     g0[r0.y].val[0/4] = r1.x;
//     g0[r0.y].val[0/4+1] = r1.y;
//     g0[r0.y].val[0/4+2] = r1.z;
//     g0[r0.y].val[0/4+3] = r1.w;
//     r1.xy = t1.SampleLevel(s0_s, r2.xyz, 0).xy;
//     g1[r0.y].val[0/4] = r1.x;
//     g1[r0.y].val[0/4+1] = r1.y;
//     r2.x = cb0[17].x + r2.x;
//     r1.xyzw = t0.SampleLevel(s0_s, r2.xyz, 0).xyzw;
//     g0[r0.z].val[0/4] = r1.x;
//     g0[r0.z].val[0/4+1] = r1.y;
//     g0[r0.z].val[0/4+2] = r1.z;
//     g0[r0.z].val[0/4+3] = r1.w;
//     r0.yw = t1.SampleLevel(s0_s, r2.xyz, 0).xy;
//     g1[r0.z].val[0/4] = r0.y;
//     g1[r0.z].val[0/4+1] = r0.w;
//   }
//   GroupMemoryBarrierWithGroupSync();
//   r0.x = mad((int)vThreadIDInGroup.y, 9, (int)vThreadIDInGroup.x);
//   r1.x = g0[r0.x].val[0/4];
//   r1.y = g0[r0.x].val[0/4+1];
//   r1.z = g0[r0.x].val[0/4+2];
//   r1.w = g0[r0.x].val[0/4+3];
//   r2.xyzw = (int4)r0.xxxx + int4(1,9,10,81);
//   r3.x = g0[r2.x].val[0/4];
//   r3.y = g0[r2.x].val[0/4+1];
//   r3.z = g0[r2.x].val[0/4+2];
//   r3.w = g0[r2.x].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r3.x = g0[r2.y].val[0/4];
//   r3.y = g0[r2.y].val[0/4+1];
//   r3.z = g0[r2.y].val[0/4+2];
//   r3.w = g0[r2.y].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r3.x = g0[r2.z].val[0/4];
//   r3.y = g0[r2.z].val[0/4+1];
//   r3.z = g0[r2.z].val[0/4+2];
//   r3.w = g0[r2.z].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r3.x = g0[r2.w].val[0/4];
//   r3.y = g0[r2.w].val[0/4+1];
//   r3.z = g0[r2.w].val[0/4+2];
//   r3.w = g0[r2.w].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r0.yzw = (int3)r0.xxx + int3(82,90,91);
//   r3.x = g0[r0.y].val[0/4];
//   r3.y = g0[r0.y].val[0/4+1];
//   r3.z = g0[r0.y].val[0/4+2];
//   r3.w = g0[r0.y].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r3.x = g0[r0.z].val[0/4];
//   r3.y = g0[r0.z].val[0/4+1];
//   r3.z = g0[r0.z].val[0/4+2];
//   r3.w = g0[r0.z].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r3.x = g0[r0.w].val[0/4];
//   r3.y = g0[r0.w].val[0/4+1];
//   r3.z = g0[r0.w].val[0/4+2];
//   r3.w = g0[r0.w].val[0/4+3];
//   r1.xyzw = r3.xyzw + r1.xyzw;
//   r1.xyzw = float4(0.125,0.125,0.125,0.125) * r1.xyzw;
//   r3.x = g1[r0.x].val[0/4];
//   r3.y = g1[r0.x].val[0/4+1];
//   r3.z = g1[r2.x].val[0/4];
//   r3.w = g1[r2.x].val[0/4+1];
//   r3.xyzw = r3.xyxx + r3.zwzz;
//   r2.x = g1[r2.y].val[0/4];
//   r2.y = g1[r2.y].val[0/4+1];
//   r3.xyzw = r3.xyzw + r2.xyxx;
//   r2.x = g1[r2.z].val[0/4];
//   r2.y = g1[r2.z].val[0/4+1];
//   r3.xyzw = r3.xyzw + r2.xyxx;
//   r2.x = g1[r2.w].val[0/4];
//   r2.y = g1[r2.w].val[0/4+1];
//   r2.xyzw = r3.xyzw + r2.xyxx;
//   r0.x = g1[r0.y].val[0/4];
//   r0.y = g1[r0.y].val[0/4+1];
//   r2.xyzw = r2.xyzw + r0.xyxx;
//   r0.x = g1[r0.z].val[0/4];
//   r0.y = g1[r0.z].val[0/4+1];
//   r2.xyzw = r2.xyzw + r0.xyxx;
//   r0.x = g1[r0.w].val[0/4];
//   r0.y = g1[r0.w].val[0/4+1];
//   r0.xyzw = r2.xyzw + r0.xyxx;
//   r0.xyzw = float4(0.125,0.125,0.125,0.125) * r0.xyzw;
// // No code for instruction (needs manual fix):
// store_uav_typed u0.xyzw, vThreadID.xyzz, r1.xyzw
// // No code for instruction (needs manual fix):
// store_uav_typed u1.xyzw, vThreadID.xyzz, r0.xyzw
//   return;
// }
//////////////////////////////// HLSL Errors ////////////////////////////////
// C:\Games\OpenGenshin\Resources\3dmigoto\ShaderFixes\0d72195eaa57397e-cs_replace.txt(24,10): error X3000: syntax error: unexpected token ')'
/////////////////////////////////////////////////////////////////////////////
